<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>miscellaneous</title><link href="http://blog.jameskyle.org/" rel="alternate"></link><link href="http://blog.jameskyle.org/feeds/categories/administration.atom.xml" rel="self"></link><id>http://blog.jameskyle.org/</id><updated>2014-03-19T13:33:14-07:00</updated><entry><title>OSXFuse 2.6.2 Kext Fails to Load in Mavericks</title><link href="http://blog.jameskyle.org/2014/03/osxfuse-kext-fails-on-mavericks" rel="alternate"></link><updated>2014-03-19T13:33:14-07:00</updated><author><name>James A. Kyle</name></author><id>tag:blog.jameskyle.org,2014-03-19:2014/03/osxfuse-kext-fails-on-mavericks</id><summary type="html">&lt;div class="section" id="the-problem"&gt;
&lt;h2&gt;The Problem&lt;/h2&gt;
&lt;p&gt;Installing the most recent &lt;a class="reference external" href="http://osxfuse.github.io"&gt;OSXFuse&lt;/a&gt; from &lt;a class="reference external" href="http://brew.sh"&gt;Homebrew&lt;/a&gt; (or from the main site),
fails to load the new kext. If you attempt to load the kext, you get errors
in your logs like:&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
Mar 19 11:34:30 metaverse.local com.apple.kextd&lt;span class="o"&gt;[&lt;/span&gt;29&lt;span class="o"&gt;]&lt;/span&gt;: WARNING - &lt;span class="se"&gt;\
&lt;/span&gt;Invalid signature -67062 0xFFFFFFFFFFFEFA0A &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="se"&gt;\
&lt;/span&gt;kext &lt;span class="s2"&gt;&amp;quot;/Library/Filesystems/osxfusefs.fs/Support/osxfusefs.kext&amp;quot;&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="the-fix"&gt;
&lt;h2&gt;The Fix&lt;/h2&gt;
&lt;p&gt;The workaround is to sign the code yourself. To do so, you'll first need a
signing certificate. The &lt;a class="reference external" href="https://developer.apple.com/library/mac/documentation/security/conceptual/CodeSigningGuide/Procedures/Procedures.html#//apple_ref/doc/uid/TP40005929-CH4-SW1"&gt;Apple Code Signing Guide&lt;/a&gt; covers how to do so. If
you don't have an applie account and have no interest in creating an
developer certificate, jump to the section called
&amp;quot;To use the Certificate Assistant to create a self-signed signing identity&amp;quot;.&lt;/p&gt;
&lt;p&gt;Once you have a certificate, you can sign the kext.&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
sudo codesign -s &lt;span class="s2"&gt;&amp;quot;James Kyle&amp;quot;&lt;/span&gt; &lt;span class="se"&gt;\
&lt;/span&gt;    -f /Library/Filesystems/osxfusefs.fs/Support/osxfusefs.kex
&lt;/pre&gt;
&lt;p&gt;You should replace &amp;quot;James Kyle&amp;quot; with the name you gave the certificate.&lt;/p&gt;
&lt;p&gt;After that, all should be well with the world again.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="external-links"&gt;
&lt;h2&gt;External Links&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://osxfuse.github.io"&gt;OSXFuse&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://brew.sh"&gt;Homebrew&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://developer.apple.com/library/mac/documentation/security/conceptual/CodeSigningGuide/Procedures/Procedures.html#//apple_ref/doc/uid/TP40005929-CH4-SW1"&gt;Apple Code Signing Guide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</summary><category term="osx administration"></category></entry><entry><title>Deploying Pelican Blog with Bitbucket Commit Hooks</title><link href="http://blog.jameskyle.org/2012/12/deploying-pelican-blog-with-bitbucket-commit-hooks" rel="alternate"></link><updated>2012-12-10T17:42:00-08:00</updated><author><name>James A. Kyle</name></author><id>tag:blog.jameskyle.org,2012-12-10:2012/12/deploying-pelican-blog-with-bitbucket-commit-hooks</id><summary type="html">&lt;img alt="Schaffhausen Watch" class="align-center" src="/images/2012/11/schaffhausen-watch.jpg" style="width: 362.5px; height: 282.0px;" /&gt;
&lt;div class="section" id="migrating-from-wordpress"&gt;
&lt;h2&gt;Migrating from Wordpress&lt;/h2&gt;
&lt;p&gt;I recently migrated my blog from &lt;a class="reference external" href="http://wordpress.org"&gt;Wordpress&lt;/a&gt; to &lt;a class="reference external" href="http://blog.getpelican.com"&gt;Pelican&lt;/a&gt;. There are a few
incentives to do so. Not the least of which is using &lt;a class="reference external" href="http://daringfireball.net/projects/markdown/"&gt;Markdown&lt;/a&gt; or &lt;a class="reference external" href="http://docutils.sourceforge.net/rst.html"&gt;reST&lt;/a&gt; for
markup and free distributed backups with &lt;a class="reference external" href="http://git-scm.com"&gt;Git&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;There are some drawbacks as well. The one I'd miss the most is the
ability to easily sync off line changes to your blog. I was using
&lt;a class="reference external" href="http://www.red-sweater.com/marsedit/"&gt;MarsEdit&lt;/a&gt; for this purpose and am very happy with it overall. Though I've never
been able to find a non-futzy way to edit in reST and publish to the blog. All
the workflow always involved conversion steps or copy and pasting.&lt;/p&gt;
&lt;p&gt;By migrating to Pelican + Git, I'm able to use &lt;a class="reference external" href="https://bitbucket.org"&gt;Bitbucket&lt;/a&gt;'s git service hooks
to trigger a sync &amp;amp; build cycle on my web server. This article walks through
steps required to set this up. &lt;a class="footnote-reference" href="#id3" id="id1"&gt;[1]&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-method"&gt;
&lt;h2&gt;The Method&lt;/h2&gt;
&lt;p&gt;On the back end, I set all this up by writing a little flask + uwsgi application
that does one thing and one thing only: listens for a Bitbucket POST commit
notification. It checks to see if the master branch changed and pulls down the
blog updates and regenerates the static files. The static files are then served
by nginx. I also proxy uwsgi through nginx so my api endpoint is a url like:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
http://yourdomain.com/api
or
http://api.yourdomain.com/v1
&lt;/pre&gt;
&lt;div class="section" id="install"&gt;
&lt;h3&gt;Install&lt;/h3&gt;
&lt;p&gt;First, install the necessary packages on your server:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
apt-get install nginx uwsgi uwsgi-plugin-http uwsgi-plugin-python python-pip \
                python-virtualenv
&lt;/pre&gt;
&lt;p&gt;Pelican doesn't have deb packages. So I used pip instead:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
pip install pelican
&lt;/pre&gt;
&lt;p&gt;I found my theme in the &lt;a class="reference external" href="https://github.com/getpelican/pelican-themes"&gt;pelican-themes&lt;/a&gt; repository. pelican-themes is a
collection of about 25 CSS styles for pelican. This blog is styled using
a variation of tuxlite_tbs. Whichever one you choose, it needs to be installed
on your server:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
pelican-themes -i the_theme
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="configure"&gt;
&lt;h3&gt;Configure&lt;/h3&gt;
&lt;p&gt;Configuration is based on the following assumptions. You may need to adapt the
example files if yours varies. I'll use &lt;em&gt;$fqdn&lt;/em&gt; as a substitute for your actual
blog fqdn. For example, mine would be &lt;em&gt;blog.jameskyle.org&lt;/em&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;blog repository location&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;/var/www/$fqdn&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;static files location&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;/var/www/$fqdn/output/&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;default confiugraiton location for uwsgi sockets on ubuntu&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;/var/run/uwsgi/app/$fqdn/socket&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="nginx"&gt;
&lt;h4&gt;Nginx&lt;/h4&gt;
&lt;p&gt;Nginx is used to serve our static files and also proxy to the uWSGI git service.&lt;/p&gt;
&lt;p&gt;First, I disabled the default site:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
rm /etc/nginx/sites-enabled/default
&lt;/pre&gt;
&lt;p&gt;Next, I create a conf for my blog site:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
vim /etc/nginx/conf.d/${fqdn}.conf
&lt;/pre&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;server&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="kn"&gt;listen&lt;/span&gt;   &lt;span class="mi"&gt;80&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
     &lt;span class="kn"&gt;root&lt;/span&gt; &lt;span class="s"&gt;/var/www/&lt;/span&gt;&lt;span class="nv"&gt;${fqdn}/output&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
     &lt;span class="kn"&gt;index&lt;/span&gt; &lt;span class="s"&gt;index.html&lt;/span&gt; &lt;span class="s"&gt;index.htm&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
     &lt;span class="kn"&gt;server_name&lt;/span&gt; &lt;span class="s"&gt;\*.&lt;/span&gt;&lt;span class="nv"&gt;${fqdn}&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
     &lt;span class="kn"&gt;location&lt;/span&gt; &lt;span class="s"&gt;/api&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
         &lt;span class="kn"&gt;include&lt;/span&gt; &lt;span class="s"&gt;uwsgi_params&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
         &lt;span class="kn"&gt;uwsgi_pass&lt;/span&gt; &lt;span class="s"&gt;unix:///var/run/uwsgi/app/&lt;/span&gt;&lt;span class="nv"&gt;${fqdn}/socket&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
         &lt;span class="kn"&gt;uwsgi_param&lt;/span&gt; &lt;span class="s"&gt;UWSGI_SETENV&lt;/span&gt; &lt;span class="s"&gt;PELICAN=/usr/local/bin/pelican&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
     &lt;span class="p"&gt;}&lt;/span&gt;

     &lt;span class="kn"&gt;location&lt;/span&gt; &lt;span class="s"&gt;/&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
             &lt;span class="kn"&gt;try_files&lt;/span&gt; &lt;span class="nv"&gt;$uri&lt;/span&gt; &lt;span class="nv"&gt;$uri/&lt;/span&gt; &lt;span class="s"&gt;/index.html&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
     &lt;span class="p"&gt;}&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This particular configuraion proxies to all requests made to the /api route to
the backend server. However, you could modify the proxy to suit any number of
configurations.&lt;/p&gt;
&lt;p&gt;You may notice I pass a environment variable to uwsgi. The uWSGI process runs as
the www-data user. In my testing, the user was unable to find the pelican binary
when my server spawned a 'make regenerate'. To solve that problem, I set the
PELICAN environment variable and changed the pelican Makefile to conditionally
set its PELICAN var. You can do this by executing:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
sed -i.bak 's|PELICAN=|PELICAN?=|g' Makefile
&lt;/pre&gt;
&lt;p&gt;On the Makefile generated by pelican-quickstart.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="virtualenv"&gt;
&lt;h4&gt;virtualenv&lt;/h4&gt;
&lt;p&gt;I created a virtual environment with the necessary modules for my uwsgi server.
It provides a nice segration between my system and application libraries. These
config files assume the virtualenv is located at /var/www/$fqdn/env. Update them
if you choose to drop it somewhere else.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;virtualenv /var/www/&lt;span class="nv"&gt;$fqdn&lt;/span&gt;/env
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="uwsgi"&gt;
&lt;h4&gt;uWSGI&lt;/h4&gt;
&lt;p&gt;Nginx needs something to proxy too and I used uwsgi. Gunicorn or any other wsgi
compatible backend is perfectly acceptable. I created a file
/etc/uwsgi/sites-available/$fqdn.ini with these contents&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;[uwsgi]&lt;/span&gt;
&lt;span class="na"&gt;base&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;/var/www/$fqdn&lt;/span&gt;
&lt;span class="na"&gt;gitpost&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;%(base)/utils/gitpost&lt;/span&gt;
&lt;span class="na"&gt;module&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;gitpost&lt;/span&gt;
&lt;span class="na"&gt;callable&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;app&lt;/span&gt;
&lt;span class="na"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;app&lt;/span&gt;
&lt;span class="c1"&gt;# Generic Config&lt;/span&gt;
&lt;span class="na"&gt;plugins&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;http,python&lt;/span&gt;
&lt;span class="na"&gt;home&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;%(base)/env&lt;/span&gt;
&lt;span class="na"&gt;pythonpath&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;%(base)/env&lt;/span&gt;
&lt;span class="na"&gt;chdir&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;%(gitpost)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You must then link the file to the sites-enabled directory&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;ln -s /etc/uwsgi/sites-available/&lt;span class="nv"&gt;$fqdn&lt;/span&gt;.ini /etc/uwsgi/sites-enabled/
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="bitbucket"&gt;
&lt;h4&gt;Bitbucket&lt;/h4&gt;
&lt;p&gt;Bitbucket is where the magic happens. Ok, it's not magic. It's just a POST hook
on commits. But it's what sets everything in motion. To enable that feature you
go to &lt;a class="reference external" href="http://bitbucket.org/$username/$blog-reponame"&gt;http://bitbucket.org/$username/$blog-reponame&lt;/a&gt;,  then type 'r' and 'a' in
quick succession (or click the little sprocket to the right). Next, in the left
menu click &amp;quot;Services&amp;quot;. You'll have a dropdown, select the &amp;quot;POST&amp;quot; service. Finally,
enter your blog's fqdn and api url. Given a fqdn of blog.jameskyle.org, the
examples above woudl produce an api endpoint of:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
http://blog.jameskyle.org/api
&lt;/pre&gt;
&lt;p&gt;My blog repo is public. However, if you wish to keep your raw source private
you'll need to create a public/private keypair for checking out the blog. The
private key should be stored in the www-data user's home directory. On Ubuntu
systems, the key is stored in:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
/var/www/.ssh/id_rsa
&lt;/pre&gt;
&lt;p&gt;Or id_dsa, whichever.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="gitpost"&gt;
&lt;h4&gt;gitpost&lt;/h4&gt;
&lt;p&gt;Of course, we need to have something listening on the other side of the POST hook
or it's all for naught. I wrote a little server using flask to satisfy that
function. Configurable variables are set at the top of the file. Specifically,
you'll want to set the DOCROOT variable. In this case, the DOCROOT is the
location of your blog repository.&lt;/p&gt;
&lt;p&gt;My server also logs activity. By default, it does so to:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
/var/log/gitpost/gitpost.log
&lt;/pre&gt;
&lt;p&gt;This directory should be owned by the www-data user.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;mkdir /var/log/gitpost
chown www-data:www-data -R /var/log/gitpost
&lt;/pre&gt;&lt;/div&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;json&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;logging&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;subprocess&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Popen&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;subprocess&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;PIPE&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;werkzeug.contrib.fixers&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ProxyFix&lt;/span&gt;

&lt;span class="n"&gt;DOCROOT&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;/var/www/$fqdn&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;LOGLEVEL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;INFO&lt;/span&gt;
&lt;span class="n"&gt;LOG_FORMAT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="si"&gt;%(asctime)s&lt;/span&gt;&lt;span class="s"&gt; - &lt;/span&gt;&lt;span class="si"&gt;%(name)s&lt;/span&gt;&lt;span class="s"&gt; - &lt;/span&gt;&lt;span class="si"&gt;%(levelname)s&lt;/span&gt;&lt;span class="s"&gt; - &lt;/span&gt;&lt;span class="si"&gt;%(message)s&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;DATE_FORMAT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;%Y-%m-&lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s"&gt;,%H:%M:%S&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;LOGFILE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;/var/log/gitpost/gitpost.log&amp;quot;&lt;/span&gt;

&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;wsgi_app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ProxyFix&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;wsgi_app&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setLevel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;LOGLEVEL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;formatter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Formatter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;LOG_FORMAT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;datefmt&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;DATE_FORMAT&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;fh&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FileHandler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;LOGFILE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;fh&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setFormatter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;formatter&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addHandler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fh&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Starting gitpost api application&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;log_error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;command&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;returncode&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="s"&gt;    Command: {cmd} =&amp;gt; {ret}&lt;/span&gt;
&lt;span class="s"&gt;    --------------&lt;/span&gt;

&lt;span class="s"&gt;    Output:&lt;/span&gt;
&lt;span class="s"&gt;        {out}&lt;/span&gt;

&lt;span class="s"&gt;    Error:&lt;/span&gt;
&lt;span class="s"&gt;        {err}&lt;/span&gt;
&lt;span class="s"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cmd&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;command&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ret&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;returncode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;pull&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Pulling changes from master&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;popen&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;git&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;pull&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;origin&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;master&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;popen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cmd&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Changing into {0}&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DOCROOT&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Executing: {0}&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot; &amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cmd&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;

    &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;chdir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DOCROOT&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Popen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cmd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;PIPE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;stderr&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;PIPE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;wait&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;communicate&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;returncode&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;log_error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cmd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;returncode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;publish&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Publishing blog updates&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;popen&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;make&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;publish&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;update&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Updating blog&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;pull&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;publish&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="nd"&gt;@app.route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/api&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;methods&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;POST&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;parse_request&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Parsing request&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;payload&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;loads&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;payload&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="n"&gt;branch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;commits&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;branch&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;received commit from branch: {0!r}&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;branch&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;branch&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;master&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Initiating master repo sync&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;pull&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;publish&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Finished publishing&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Received:: {0}&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;The uWSGI configuration files provided assume the gitpost script is located in:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
/var/www/$fqdn/utils
&lt;/pre&gt;
&lt;p&gt;And that the created virtualenv is located in:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
/var/www/$fqdn/env
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="final-steps"&gt;
&lt;h2&gt;Final Steps&lt;/h2&gt;
&lt;p&gt;The last thing you need to do is checkout your git repository into the docroot
directory. In our examples, this would be /var/www/$fqdn. As I mentioned before,
I store all relevant files in my repository.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;git clone git@bitbucket.org:username/reponame.git /var/www/&lt;span class="nv"&gt;$fqdn&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="evaluation"&gt;
&lt;h2&gt;Evaluation&lt;/h2&gt;
&lt;p&gt;I've found the following method to be quite low maintenance. After setting up,
the workflow involves editing your local repo, then pushing the changes to
master.&lt;/p&gt;
&lt;p&gt;My blog and all modifications to the default pelican layout, Makefile, and the
supporting scripts/configurations covered here are available at my
public &lt;a class="reference external" href="http://git.jameskyle.org/blog-jameskyle"&gt;blog repository&lt;/a&gt; along with my pelicanconf and article organization.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="what-s-next"&gt;
&lt;h2&gt;What's Next&lt;/h2&gt;
&lt;p&gt;I'm using a modified &lt;a class="reference external" href="https://github.com/nvie/gitflow"&gt;git-flow&lt;/a&gt; work flow for my article posting where 'hotfixes'
are 'articles' and features are, well, features. I want to modify the plugin
to better reflect blog posting. For example, I'd like to&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;git blog article start deploy-pelican-with-bitbucket-service-hooks
&lt;span class="c"&gt;# create article&lt;/span&gt;
git blog article finish deploy-pelican-with-bitbucket-service-hooks
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If I do make those adaptations, it'll certainly be worthy of a followup post.&lt;/p&gt;
&lt;p&gt;I'm also working on a management script that automates the steps above. For
example, configuring a new application might look like&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;./manage setup
What is your blog&lt;span class="s1"&gt;&amp;#39;s fqdn? &amp;gt; blog.jameskyle.org&lt;/span&gt;
&lt;span class="s1"&gt;What is your blog&amp;#39;&lt;/span&gt;s git repository? &amp;gt; http://git.jameskyle.org/blog-jameskyle
Checking out blog-jameskyle into /var/www/blog.jameskyle.org.....
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And so on.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="external-links"&gt;
&lt;h2&gt;External Links&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://blog.getpelican.com"&gt;Pelican&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://wordpress.org"&gt;Wordpress&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://docutils.sourceforge.net/rst.html"&gt;reST&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://git-scm.com"&gt;Git&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.red-sweater.com/marsedit/"&gt;MarsEdit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://bitbucket.org"&gt;Bitbucket&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://help.ubuntu.com/community/UFW"&gt;UFW&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/nvie/gitflow"&gt;git-flow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://git.jameskyle.org/blog-jameskyle"&gt;blog repository&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;table class="docutils footnote" frame="void" id="id3" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id1"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;The &lt;a class="reference external" href="http://docs.getpelican.com/en/3.0/importer.html"&gt;Pelican documentation&lt;/a&gt; covers this.
The import worked very well for me.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
</summary><category term="administration"></category><category term="debian"></category><category term="howtos"></category><category term="python"></category><category term="pelican"></category><category term="bitbucket"></category></entry><entry><title>Creating a redmine email filter for postfix with virtual domains</title><link href="http://blog.jameskyle.org/2010/06/postfix-virtual-domain-redmine-filter" rel="alternate"></link><updated>2010-06-12T12:47:00-07:00</updated><author><name>James A. Kyle</name></author><id>tag:blog.jameskyle.org,2010-06-12:2010/06/postfix-virtual-domain-redmine-filter</id><summary type="html">&lt;p&gt;This is adapted from the postfix virtual redme for &lt;a class="reference external" href="http://www.postfix.org/VIRTUAL_README.html#autoreplies"&gt;autoreply
transports&lt;/a&gt;. As such, I basically copy/paste that tutorial and edited
it accordingly.&lt;/p&gt;
&lt;p&gt;This assumes that you have set up redmine at its own subdomain as well
as a postfix virtual domain, e.g. redmine.yourdomain.com and wish to
create a virtual redmine user for email processing, e.g.
&lt;a class="reference external" href="mailto:redmine&amp;#64;redmine.yourdomain.com"&gt;redmine&amp;#64;redmine.yourdomain.com&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In order to set up an redmine for virtual recipients as a final stop (no
more filters applied), set up a rule in a virtual alias table:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;/etc/postfix/main.cf:
    virtual_alias_maps = hash:/etc/postfix/virtual
/etc/postfix/virtual:
    redmine@redmine.yourdomain.com redmine@redmine.yourdomain.com@yourdomain.com
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This delivers mail sent to &lt;a class="reference external" href="mailto:redmine&amp;#64;redmine.yourdomain.com"&gt;redmine&amp;#64;redmine.yourdomain.com&lt;/a&gt; to the local
address that handles the email. We service the address locally into the
script parses emails for redmine.&lt;/p&gt;
&lt;p&gt;DO NOT list redmine.yourdomain.com in mydestination!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;/etc/postfix/main.cf:
    transport_maps = hash:/etc/postfix/transport
/etc/postfix/transport:
    redmine.yourdomain.com  redmine
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;/etc/postfix/master.cf:
redmine unix  -       n       n       -       10      pipe
    user=nobody argv=/path/to/redmine/extra/mail_handler/rdm-mailhandler.rb
    --url http://redmine.yourdomain.com --key [redmine api key] --project kspecs
    --allow-override project,priority
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This invokes/path/to/redmine/extra/mail_handler/rdm-mailhandler.rb and
pipes any email sent to the redmine domain. Redmine handles rejection of
invalid users, which is why we don’t bother with filtering valid
addresses within postfix.&lt;/p&gt;
&lt;p&gt;After this is done, do the standard postmap routine for your maps, then
postfix reload.&lt;/p&gt;
</summary><category term="administration"></category><category term="email filter"></category><category term="postfix"></category><category term="redmine"></category><category term="virtual domains"></category></entry><entry><title>Dell Perc 5i on Ubuntu 64</title><link href="http://blog.jameskyle.org/2010/01/dell-perc-5i-on-ubuntu-64" rel="alternate"></link><updated>2010-01-19T08:38:00-08:00</updated><author><name>James A. Kyle</name></author><id>tag:blog.jameskyle.org,2010-01-19:2010/01/dell-perc-5i-on-ubuntu-64</id><summary type="html">&lt;p&gt;I've been setting up an Ubuntu server on a Dell with a 29xx series with
a Perc 5i SAS/SATA RAID controller. It took a bit of digging around and
piecing together posts on the ubuntu forums and random blogs, but I'm
pretty sure I've got it all up and working. Here's the short story:&lt;/p&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p class="first"&gt;Add the deb ports for dell's Open Management tools to your
sources.conf&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;/etc/apt/sources.list: deb &lt;a class="reference external" href="ftp://ftp.sara.nl/pub/sara-omsa"&gt;ftp://ftp.sara.nl/pub/sara-omsa&lt;/a&gt; dell
sara&lt;/li&gt;
&lt;li&gt;add the sara key to your gpg list&lt;ol class="arabic"&gt;
&lt;li&gt;wget &lt;a class="reference external" href="http://ftp.sara.nl/debian_sara.asc"&gt;http://ftp.sara.nl/debian_sara.asc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;sudo apt-key add debian_sara.asc&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;apt-get update&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Install snmp tools&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;apt-get install snmp snmpd&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Install openipmi and ipmitool&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;apt-get install openipmi&lt;/li&gt;
&lt;li&gt;apt-get install ipmitool&lt;/li&gt;
&lt;li&gt;there's an open Ubuntu bug &lt;a class="reference external" href="https://bugs.launchpad.net/ubuntu/+source/ipmitool/+bug/110992"&gt;#110992&lt;/a&gt; that requires ipmi_devinf
and ipmi_si to be appended to /dev/modules by hand to enable
creation of the /dev/ipm* needed by ipmitool on start-up.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Install lib32 ncurses and ia32-libs&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;ol class="first arabic simple"&gt;
&lt;li&gt;apt-get install -f lib32ncurses5&lt;/li&gt;
&lt;li&gt;apt-get install -f ia32-libs&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Install dell's omsa tools&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;apt-get install dellomsa&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Update your libraries&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;ldconfig&lt;/li&gt;
&lt;li&gt;&lt;ol class="first arabic"&gt;
&lt;li&gt;this takes care of a few errors I got that looked like this&lt;/li&gt;
&lt;li&gt;/opt/dell/srvadmin/dataeng/bin/dsm_sa_datamgr32d: error while
loading shared libraries: libdcsmil32.so.5: cannot open shared
object file: No such file or directory&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Place the following init script and put it in /etc/init.d/&lt;/p&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;div class="first"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#!/bin/sh&lt;/span&gt;

/opt/dell/srvadmin/dataeng/bin/dsm_sa_datamgr32d
/opt/dell/srvadmin/dataeng/bin/dsm_sa_eventmgr32d
/opt/dell/srvadmin/dataeng/bin/dsm_sa_snmp32d

/opt/dell/srvadmin/dataeng/bin/dataeng status

/opt/dell/srvadmin/iws/bin/linux/dsm_om_connsvc start
/opt/dell/srvadmin/iws/bin/linux/dsm_om_connsvc start

/etc/init.d/dataeng stop ; modprobe mptctl ; /etc/init.d/dataeng start

/opt/dell/srvadmin/dataeng/bin/dsm_sa_datamgr32d
/opt/dell/srvadmin/dataeng/bin/dsm_sa_eventmgr32d
/opt/dell/srvadmin/dataeng/bin/dsm_sa_snmp32d

/opt/dell/srvadmin/dataeng/bin/dataeng status

/opt/dell/srvadmin/iws/bin/linux/dsm_om_connsvc start
/opt/dell/srvadmin/iws/bin/linux/dsm_om_connsvc start
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Enable snmp in omsa tools&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;/etc/init.d/dataeng enablesnmp&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Execute the dell_omsa.sh script to get up and running&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;/etc/init.d/dell_omsa.sh&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Register the new driver module with omsa&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;/etc/init.d/instsvcdrv restart&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Edit your /etc/snmp/snmpd.conf so it can be used (I take no
responsibility if the following settings are not appropriate security
for your network)&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;change: com2sec paranoid default public to com2sec readonly
default public&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Change the way taht ubuntu starts snmpd&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;/etc/default/snmpd: change&lt;/li&gt;
&lt;li&gt;SNMPDOPTS='-Lsd -Lf /dev/null -u snmp -I -smux -p
/var/run/snmpd.pid 127.0.0.1' to&lt;/li&gt;
&lt;li&gt;SNMPDOPTS='-Lsd -Lf /dev/null -u snmp -p /var/run/snmpd.pid
127.0.0.1'&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;/etc/init.d/snmpd restart&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;/etc/init.d/dataeng restart&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Verify snmpd&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;snmpwalk -OS -v 1 -c public localhost .1.3.6.1.4.1.674.10892.1&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Start OMSA web services on reboot&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;update-rc.d dsm_om_connsvc defaults&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Finally, by default you must log into the web admin with the root
account. So enable root account&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;sudo passwd root&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;One more catch for 64 bit ubuntu users, you must change the lib paths
in /etc/pam.d/omauth and install 32 bit pam libs&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;change all instances of /lib/security/ to /lib32/security&lt;/li&gt;
&lt;li&gt;download the i386 versions of the following libs (you can
determine the package that provides a particular lib by dpkg -S
/path/to/file, e.g. dpkg -S /lib/security/pam_unix.so)&lt;ol class="arabic"&gt;
&lt;li&gt;libselinux1_2.0.15-2ubuntu1_i386.deb&lt;/li&gt;
&lt;li&gt;libpam-modules_0.99.7.1-5ubuntu1_i386.deb&lt;/li&gt;
&lt;li&gt;libsepol1_2.0.3-1_i386.deb&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Extract them to a tmp directory&lt;ol class="arabic"&gt;
&lt;li&gt;dpkg-deb -x &amp;lt;libname&amp;gt; /tmp/lib32s&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;then copy the following over to /lib32 and /lib32/security&lt;ol class="arabic"&gt;
&lt;li&gt;lib/libsepol.so.1&lt;/li&gt;
&lt;li&gt;lib/libselinux.so.1&lt;/li&gt;
&lt;li&gt;lib/security/pam_unix.so&lt;/li&gt;
&lt;li&gt;lib/security/pam_nologin.so&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;run ldconfig&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;You should now be able to log into the OMSA web manager at
&lt;a class="reference external" href="https://localhost"&gt;https://localhost&lt;/a&gt;:1311 using your root name password&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Having root enabled can be viewed as a security list, so you probably
want to add a normal admin user to OMSA's manager group and disable
root&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;adduser dellroot&lt;/li&gt;
&lt;li&gt;usermod -g root dellroot # user must be added to the root group to
gain admin privileges in OMSA manager&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I'd like to thank the &lt;a class="reference external" href="http://sadsoftware.blogspot.com/2008/08/installing-dell-omsa-and-snmp-in-ubuntu.html"&gt;sad software blogger&lt;/a&gt; for a good bit of this
information, especially pertaining to snmp.&lt;/p&gt;
</summary><category term="administration"></category><category term="dell"></category><category term="perc5i"></category><category term="ubuntu"></category><category term="ubuntu64"></category></entry><entry><title>FIX mod_rewrite: could not init rewrite log lock in child</title><link href="http://blog.jameskyle.org/2009/02/could-not-init-rewrite-log-lock-fix" rel="alternate"></link><updated>2009-02-20T07:47:00-08:00</updated><author><name>James A. Kyle</name></author><id>tag:blog.jameskyle.org,2009-02-20:2009/02/could-not-init-rewrite-log-lock-fix</id><summary type="html">&lt;p&gt;Ran into this issue a couple of times already, duplicating it here so I
dont' have to go dig for it again:&lt;/p&gt;
&lt;p&gt;Error:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
[crit] (2)No such file or directory: mod_rewrite: could not init rewrite log lock in child
&lt;/pre&gt;
&lt;p&gt;Change This:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;RewriteEngine On
RewriteCond %{REQUEST_METHOD} ^TRACE
RewriteRule .* - [F]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;RewriteEngine On
RewriteCond %{REQUEST_METHOD} ^TRACE
RewriteRule .* - [F]
RewriteLog /var/log/apache2/rewrite.log
RewriteLogLevel 0
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Original reference is &lt;a class="reference external" href="http://blog.latcarf.com/"&gt;here&lt;/a&gt;&lt;/p&gt;
</summary><category term="administration"></category><category term="apache2"></category><category term="httpd"></category><category term="mod_rewrite"></category></entry><entry><title>Auto-Configure OSX clients for BackupPC</title><link href="http://blog.jameskyle.org/2009/02/auto-configure-osx-clients-for-backuppc" rel="alternate"></link><updated>2009-02-20T07:25:00-08:00</updated><author><name>James A. Kyle</name></author><id>tag:blog.jameskyle.org,2009-02-20:2009/02/auto-configure-osx-clients-for-backuppc</id><summary type="html">&lt;p&gt;This script auto-configures osx 10.4-10.5 clients for backup via
&lt;a class="reference external" href="http://backuppc.sourceforge.net/"&gt;BackupPC.&lt;/a&gt;&amp;nbsp;It creates a hidden backuppc user with standard
permissions. Limits that users sudo permissions to rsync, sets up
public/private key authentication, fliters all incoming ssh connections
using that key to only allow rsync commands.&lt;/p&gt;
&lt;p&gt;The project also comes with a Launchd Daemon that starts backuppc at
startup and keeps it alive if anything happens.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://github.com/jameskyle/backuppcosx/tree/master"&gt;BackupPCOSX&lt;/a&gt;&lt;/p&gt;
</summary><category term="administration"></category><category term="backup"></category><category term="backuppc"></category><category term="osx"></category></entry><entry><title>Command Line Group Management</title><link href="http://blog.jameskyle.org/2008/12/command-line-group-management" rel="alternate"></link><updated>2008-12-16T13:53:00-08:00</updated><author><name>James A. Kyle</name></author><id>tag:blog.jameskyle.org,2008-12-16:2008/12/command-line-group-management</id><summary type="html">&lt;p&gt;Adding a user:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;dscl . append /Groups/admin GroupMembership gneagle
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Removing a user:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;dscl . delete /Groups/admin GroupMembership gneagle
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Reading the membership of the admin group:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;dscl . &lt;span class="nb"&gt;read&lt;/span&gt; /Groups/admin GroupMembership
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This comes with a nod to &lt;a class="reference external" href="http://managingosx.wordpress.com/2006/09/15/add-a-user-to-the-admin-group-via-command-line-20/"&gt;Managing OSX&lt;/a&gt;&lt;/p&gt;
</summary><category term="administration"></category><category term="dscl"></category><category term="osx"></category></entry><entry><title>Disable Extended Attributes for Tar Backup</title><link href="http://blog.jameskyle.org/2008/10/disable-extended-attributes-for-tar-backup" rel="alternate"></link><updated>2008-10-09T11:06:00-07:00</updated><author><name>James A. Kyle</name></author><id>tag:blog.jameskyle.org,2008-10-09:2008/10/disable-extended-attributes-for-tar-backup</id><summary type="html">&lt;p&gt;To disable the tar'ing of extended attributes (those pesky ._foo
files), export the following variable:&lt;/p&gt;
&lt;p&gt;For Tiger:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;COPY_EXTENDED_ATTRIBUTES_DISABLE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For Leopard &amp;amp; Snow Leopard:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;COPYFILE_DISABLE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
</summary><category term="administration"></category><category term="extended attributes"></category><category term="osx"></category><category term="tar"></category></entry><entry><title>Fixing errant Share Points</title><link href="http://blog.jameskyle.org/2008/09/fixing-errant-share-points" rel="alternate"></link><updated>2008-09-19T07:30:00-07:00</updated><author><name>James A. Kyle</name></author><id>tag:blog.jameskyle.org,2008-09-19:2008/09/fixing-errant-share-points</id><summary type="html">&lt;p&gt;Recently, I ran into an issue where Share Points which were removed from
Server Admin were showing up as stale links in my clients. Though not
deal breaking, it was annoying as it indicating some sort of corruption
in my ldap configuration.&lt;/p&gt;
&lt;p&gt;After digging around, I found that the records still existed in my
server's LDAP under /Mounts. Including a duplicate entry for my
/Network/Applications entry. By removing these and reloading the clients
automount (sudo automount), everything went back to normal.&lt;/p&gt;
</summary><category term="dscl"></category><category term="ldap"></category><category term="mac"></category><category term="osx"></category><category term="share points"></category></entry><entry><title>Leopard Server Postfix TLS Error: cannot get private key from file /etc/certificates/mycert.key</title><link href="http://blog.jameskyle.org/2008/09/leopard-server-encrypted-tls-fix" rel="alternate"></link><updated>2008-09-09T07:28:00-07:00</updated><author><name>James A. Kyle</name></author><id>tag:blog.jameskyle.org,2008-09-09:2008/09/leopard-server-encrypted-tls-fix</id><summary type="html">&lt;p&gt;The problem here is that postfix is failing on encrypted TLS certs and
OSX ServerAdmin created certs are encrypted. The fix is, as should be
expected, to unencrypt the cert:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; /etc/certificates
cp mycert.key mycert.key.saved
openssl rsa -in mycert.key -out mycert.key.out
cp -p mycert.key.out mycert.key
postfix reload
&lt;/pre&gt;&lt;/div&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;credit to the apple discussion forums.&lt;/li&gt;
&lt;/ul&gt;
</summary><category term="apple"></category><category term="leopard"></category><category term="mac"></category><category term="osx"></category></entry><entry><title>Creating postfix aliases</title><link href="http://blog.jameskyle.org/2008/09/creating-postfix-aliases" rel="alternate"></link><updated>2008-09-04T17:49:00-07:00</updated><author><name>James A. Kyle</name></author><id>tag:blog.jameskyle.org,2008-09-04:2008/09/creating-postfix-aliases</id><summary type="html">&lt;p&gt;Just&amp;nbsp;a&amp;nbsp;reminder&amp;nbsp;of&amp;nbsp;the&amp;nbsp;postfix&amp;nbsp;alias&amp;nbsp;flow.&amp;nbsp;I&amp;nbsp;don't&amp;nbsp;do&amp;nbsp;it&amp;nbsp;enough&amp;nbsp;to&amp;nbsp;remember
off&amp;nbsp;the&amp;nbsp;top&amp;nbsp;of&amp;nbsp;my&amp;nbsp;head&amp;nbsp;and&amp;nbsp;this&amp;nbsp;saves&amp;nbsp;me&amp;nbsp;the&amp;nbsp;google&amp;nbsp;time.&lt;/p&gt;
&lt;p&gt;1. edit /etc/aliases or /etc/postfix/aliases (one is a symlink to the
other):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# postalias /etc/aliases&lt;/span&gt;
&lt;span class="c"&gt;# newaliases&lt;/span&gt;
&lt;span class="c"&gt;# postfix reload&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
</summary><category term="mail"></category><category term="mtu"></category><category term="postalias"></category><category term="postfix"></category></entry><entry><title>Fix for missing X11 libraries in Leopard</title><link href="http://blog.jameskyle.org/2008/09/fix-for-missing-x11-libraries-in-leopard" rel="alternate"></link><updated>2008-09-04T17:43:00-07:00</updated><author><name>James A. Kyle</name></author><id>tag:blog.jameskyle.org,2008-09-04:2008/09/fix-for-missing-x11-libraries-in-leopard</id><summary type="html">&lt;p&gt;This solution comes straight from: &lt;a class="reference external" href="http://pennysmalls.com/2007/10/28/breakage-in-leopard-rmagick-fails-to-find-libdpstk1dylib/"&gt;Penny Smalls.&lt;/a&gt;. I've just put it
here for personal reference.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
dyld: NSLinkModule() error
dyld: Library not loaded: /usr/X11R6/lib/libdpstk.1.dylib
  Referenced from: /usr/local/lib/ruby/gems/1.8/gems/rmagick-1.15.9/lib/RMagick.bundle
  Reason: image not found
Trace/BPT trap
&lt;/pre&gt;
&lt;p&gt;Those dylib files do not exist any more. But… I have a backup (I hope
you do). I ended up doing this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; /Volumes/BackupDisk/usr/X11R6/lib
sudo cp libdps*1.0* /usr/X11R6/lib/
sudo ln -s /usr/X11R6/lib/libdpstk.1.0.dylib /usr/X11R6/lib/libdpstk.1.dylib
sudo ln -s /usr/X11R6/lib/libdps.1.0.dylib /usr/X11R6/lib/libdps.1.dylib
&lt;/pre&gt;&lt;/div&gt;
</summary><category term="apple"></category><category term="leopard"></category><category term="mac"></category><category term="osx"></category><category term="x11"></category></entry><entry><title>Fix for max attachment size stuck at 0 bug in leopard server</title><link href="http://blog.jameskyle.org/2008/08/fix-for-max-attachment-size-stuck-at-0-bug-in-leopard-server" rel="alternate"></link><updated>2008-08-21T15:36:00-07:00</updated><author><name>James A. Kyle</name></author><id>tag:blog.jameskyle.org,2008-08-21:2008/08/fix-for-max-attachment-size-stuck-at-0-bug-in-leopard-server</id><summary type="html">&lt;p&gt;There's a bug in Server Admin which makes the max attachment size stick
at 0 MB preventing file uploads. To fix this:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;Manually set your preferred attachment size in /etc/wikid/wikid.conf
under the &lt;em&gt;maxattachmentsize&lt;/em&gt;key&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Save file&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;restart the team server on the command line&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo serveradmin stop teams
sudo serveradmin start teams
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
</summary><category term="administration"></category><category term="apple"></category><category term="leopard"></category><category term="mac"></category><category term="osx"></category></entry></feed>