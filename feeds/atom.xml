<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>miscellaneous</title><link href="http://blog.jameskyle.org/" rel="alternate"></link><link href="http://blog.jameskyle.org/feeds/atom.xml" rel="self"></link><id>http://blog.jameskyle.org/</id><updated>2014-08-26T11:58:52-07:00</updated><entry><title>Automated Stage3 Gentoo Install Using Ansible</title><link href="http://blog.jameskyle.org/2014/08/automated-stage3-gentoo-install-using-ansible" rel="alternate"></link><updated>2014-08-26T11:58:52-07:00</updated><author><name>James A. Kyle</name></author><id>tag:blog.jameskyle.org,2014-08-26:2014/08/automated-stage3-gentoo-install-using-ansible</id><summary type="html">&lt;div class="section" id="objectives"&gt;
&lt;h2&gt;Objectives&lt;/h2&gt;
&lt;p&gt;The objective is to, as far as possible, fully automate a stage3 Gentoo build.
While we're at it, we'd like to add some flexibility in building different
kernel configurations or passing in different parameters like the initial
username, passwords, etc.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://www.ansible.com/home"&gt;Ansible&lt;/a&gt; fits the bill for this task nicely.&lt;/p&gt;
&lt;p&gt;As a bonus, Ansible is capable of performing this taks on N number of targets
asynchronously. So taking this method and extending it to an environment where
10, 15, or 100 minimal iso's are deployed over pxe and then concurrently
bootstrapping a new Gentoo install should be trivial!&lt;/p&gt;
&lt;div class="note"&gt;
&lt;p class="first admonition-title"&gt;Note&lt;/p&gt;
&lt;p class="last"&gt;Gentoo is obviously a tweakers OS. This is not meant to be the One True
Way (TM) to configure Gentoo. It's rather a demonstration on how you can use
ansible to configure Gentoo &lt;em&gt;your way&lt;/em&gt;, automated, and repeatable.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="getting-the-roles"&gt;
&lt;h2&gt;Getting the Roles&lt;/h2&gt;
&lt;p&gt;First, we'll need to grab the &lt;a class="reference external" href="https://github.com/jameskyle/ansible-sandbox"&gt;ansible-sandbox&lt;/a&gt; project that includes an example
playbook using the &lt;a class="reference external" href="https://github.com/jameskyle/ansible-gentoo"&gt;ansible-gentoo&lt;/a&gt; role.&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
% git clone https://github.com/jameskyle/ansible-sandbox.git
% librarian-ansible install
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="preparing-the-target-environment"&gt;
&lt;h2&gt;Preparing the target environment.&lt;/h2&gt;
&lt;p&gt;Next, the target environment needs to be prepared. This entails booting to a
Gentoo minimal disk, ensuring that there's networking available, setting a root
password, and enabling ssh. For this tutorial, we'll assume you have a dhcp
server running. If you don't, you'll need to configure networking manually.&lt;/p&gt;
&lt;div class="warning"&gt;
&lt;p class="first admonition-title"&gt;Warning&lt;/p&gt;
&lt;p class="last"&gt;When booting in vmware, I found the minimal Gentoo CD often had issues
getting an ip address on boot.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="note"&gt;
&lt;p class="first admonition-title"&gt;Note&lt;/p&gt;
&lt;p class="last"&gt;The target system can be bare metal or a virtual machine. The kernel
included in the &lt;a class="reference external" href="https://github.com/jameskyle/ansible-gentoo"&gt;ansible-gentoo&lt;/a&gt; role as the default includes support for
VMWare Fusion/Workstation/Desktop v6.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;It also had issues restarting the dhcpcd daemon with /etc/init.d/dhcpcd restart.
I worked around this by issuing the following commands&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
&lt;span class="c"&gt;# kill `ps aux | grep dhcpcd | grep -v grep | awk '{print $2}'`
# /etc/init.d/dhcpcd restart
&lt;/span&gt;* Stopping DHCP Client Daemon ...
* Starting DHCP Client Daemon ...
&lt;/pre&gt;
&lt;div class="section" id="setting-a-root-password"&gt;
&lt;h3&gt;Setting a root password&lt;/h3&gt;
&lt;p&gt;As with any *nix, once your logged into the machine it would look something
like this&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
&lt;span class="c"&gt;# passwd
&lt;/span&gt;New password:
Retype new password:
passwd: password updated successfully
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="enable-sshd"&gt;
&lt;h3&gt;Enable sshd&lt;/h3&gt;
&lt;pre class="code bash literal-block"&gt;
&lt;span class="c"&gt;# /etc/init.d/sshd start
&lt;/span&gt;ssh-keygen: generating new host keys: RSA1 RSA DSA ED25519
* Starting sshd ...
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="wipe-any-previous-configurations"&gt;
&lt;h3&gt;Wipe Any Previous Configurations&lt;/h3&gt;
&lt;p&gt;Ansible doesn't perform operations that have already completed. While normally a
good thing, if you had a previous system setup on the target ansible has no way
of knowing if the configurations were from older installs.&lt;/p&gt;
&lt;p&gt;I found issues sometimes arose if the partition tables on the main disks had
been wiped, but some lvm volume labels were still lurking around. Wiping
everything ensures a clean build. The main partitions created by these scripts
are&lt;/p&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;/dev/sda1&lt;/dt&gt;
&lt;dd&gt;primary 'boot' partition.&lt;/dd&gt;
&lt;dt&gt;/dev/sda2&lt;/dt&gt;
&lt;dd&gt;primary main partition for volume group&lt;/dd&gt;
&lt;dt&gt;main&lt;/dt&gt;
&lt;dd&gt;volume group which includes the /dev/sda2 physical volume&lt;/dd&gt;
&lt;dt&gt;/dev/mapper/main-swap&lt;/dt&gt;
&lt;dd&gt;swap logical volume&lt;/dd&gt;
&lt;dt&gt;/dev/mapper/main-root&lt;/dt&gt;
&lt;dd&gt;root logical volume&lt;/dd&gt;
&lt;/dl&gt;
&lt;pre class="code bash literal-block"&gt;
&lt;span class="c"&gt;# parted /dev/sda -s -- mklabel gpt
# lvremove root
# lvremove  swap
# vgremove main&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="building-out-gentoo"&gt;
&lt;h2&gt;Building Out Gentoo&lt;/h2&gt;
&lt;p&gt;The rest is short and sweet. As automation should be. You'll find an example
inventory in inventories/Gentoo. Couple of notes,&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;the new system will get its hostname  from the inventory_hostname.
In the example this is 'too1'.&lt;/li&gt;
&lt;li&gt;The Gentoo install cd has python 3 as the default, but ansible needs 2.7. So
make sure your ansible_python_interpretor path is set in your inventory.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="code bash literal-block"&gt;
% ansible-playbook -i inventories/gentoo &lt;span class="se"&gt;\
&lt;/span&gt;                   -u root &lt;span class="se"&gt;\
&lt;/span&gt;                   --ask-pass &lt;span class="se"&gt;\
&lt;/span&gt;                   playbooks/gentoo.yml
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="i-don-t-like-the-way-you-configured-gentoo"&gt;
&lt;h2&gt;I Don't Like the Way You Configured Gentoo&lt;/h2&gt;
&lt;p&gt;There's a good chance you don't want Gentoo configured the way the role does.
The individual tasks are broken down into components for easy tweaking of each
individual stage of the deploy. You can also drop in your own kernel
configuration or templates, etc. Think of this as a PoC and tweak away!&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="external-links"&gt;
&lt;h2&gt;External Links&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.ansible.com/home"&gt;Ansible&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/jameskyle/ansible-sandbox"&gt;ansible-sandbox&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/jameskyle/ansible-gentoo"&gt;ansible-gentoo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</summary><category term="Gentoo"></category><category term="administration"></category><category term="ansible"></category></entry><entry><title>Deploying a Bare Metal Kubernetes Cluster</title><link href="http://blog.jameskyle.org/2014/08/deploying-baremetal-kubernetes-cluster" rel="alternate"></link><updated>2014-08-26T10:42:00-07:00</updated><author><name>James A. Kyle</name></author><id>tag:blog.jameskyle.org,2014-08-20:2014/08/deploying-baremetal-kubernetes-cluster</id><summary type="html">&lt;div class="section" id="objectives"&gt;
&lt;h2&gt;Objectives&lt;/h2&gt;
&lt;p&gt;Seems my blog needs a few updates in the buzz department. I like taking the
shotgun approach, so we're going to deploy a 5 node bare metal &lt;a class="reference external" href="https://www.docker.com"&gt;docker&lt;/a&gt; cluster
using &lt;a class="reference external" href="http://www.ansible.com/home"&gt;ansible&lt;/a&gt; for host configuration and &lt;a class="reference external" href="https://github.com/GoogleCloudPlatform/kubernetes"&gt;kubernetes&lt;/a&gt; for container management.&lt;/p&gt;
&lt;p&gt;I wish I could have squeezed &lt;a class="reference external" href="http://mesos.apache.org"&gt;mesos&lt;/a&gt; into this story. But the &lt;a class="reference external" href="https://github.com/mesosphere/kubernetes-mesos"&gt;kubernetes-mesos&lt;/a&gt;
project isn't ready for prime time yet. So that'll be a post for another day.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="requirements"&gt;
&lt;h2&gt;Requirements&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;ansible&lt;/li&gt;
&lt;li&gt;librarian-ansible&lt;/li&gt;
&lt;li&gt;git&lt;/li&gt;
&lt;li&gt;CentOS 7, RHEL 7, Fedora 20+...whatever&lt;/li&gt;
&lt;li&gt;some servers&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="get-the-ansible-work-environment"&gt;
&lt;h2&gt;Get the Ansible Work Environment&lt;/h2&gt;
&lt;p&gt;I've thrown together an &lt;a class="reference external" href="https://github.com/jameskyle/ansible-sandbox"&gt;ansible-sandbox&lt;/a&gt; project to automate the
configuration of the clients. These aren't &amp;quot;production ready&amp;quot; by any means and
almost certainly would require tweaking for a different target environment.
However, I did make a first stab best effort to generalize them and make them
moderately configurable. As such, they should serve more as a programmatic walk
through then a turnkey solution.&lt;/p&gt;
&lt;p&gt;Caveats aside, they should simplify the deployment of the environment.&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
% git clone https://github.com/jameskyle/ansible-sandbox.git
% &lt;span class="nb"&gt;cd &lt;/span&gt;ansible-sandbox
% librarian-ansible install
&lt;/pre&gt;
&lt;p&gt;There's an inventory.example file included. You'll probably want to update the
fqdn's to your local domain. The primary docker host is named 'dock1' by
default. If you wish to change this, it's done in group_vars/dockers.yml.&lt;/p&gt;
&lt;div class="section" id="hostnames-and-ansible"&gt;
&lt;h3&gt;Hostnames and Ansible&lt;/h3&gt;
&lt;p&gt;Ansible assumes it's capable of resolving the hostnames in your inventory &lt;em&gt;or&lt;/em&gt;
the ansible_ssh_host argument is set in your inventory. For example, if you
don't have a dns server set up you might want to edit your inventory to look
something like&lt;/p&gt;
&lt;pre class="literal-block"&gt;
[dockers]
dock1.mydomain.com ansible_ssh_host=192.168.1.10
&lt;/pre&gt;
&lt;p&gt;Ansible general usage is beyond the scope of this walk through, so please see
the upstream docs for any needed clarifications.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="configuring-the-bootstrap-node"&gt;
&lt;h2&gt;Configuring the Bootstrap Node&lt;/h2&gt;
&lt;p&gt;We're going to work from the assumption of a green field deployment. If the
environment already has existing support services like PXE, dns, dhcp, file
server, etc.  I trust you already know how to adapt that environment
accordingly.&lt;/p&gt;
&lt;div class="section" id="install"&gt;
&lt;h3&gt;Install&lt;/h3&gt;
&lt;p&gt;Initial install is manual. In my particular configuration, I have a root drive
in a RAID 1 and a very large storage array. I installed the OS with the
following disk configuration.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;/dev/sda1 : /boot&lt;/li&gt;
&lt;li&gt;/dev/sda2 : lvm volgroup main
- swap
- /&lt;/li&gt;
&lt;li&gt;/dev/sdb : lvm volgroup data
- /var/lib/docker, btrfs
- /var/docker/registry, ext4&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Doesn't really matter. If you want to use the btrfs driver for docker (these
scripts do), then you'll want to spin off a separate drive for mounting on
/var/lib/docker.&lt;/p&gt;
&lt;p&gt;This only needs to be done manually for the first host, our kickstart
scripts will take care of the workers.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="configure-my-user-account"&gt;
&lt;h3&gt;Configure My User Account&lt;/h3&gt;
&lt;p&gt;I'd recommend hacking together your own user (or at least replacing my key),
regardless it's really convenient to have a passwordless ssh and sudo.&lt;/p&gt;
&lt;p&gt;I use my 'jkyle' role for this and put it in a separate playbook from the site
example called jkyle.yml. The first time we run, I have to provide a password.&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
% ansible-playbook --limit dock1 &lt;span class="se"&gt;\
&lt;/span&gt;                   -i inventories/inventory.example &lt;span class="se"&gt;\
&lt;/span&gt;                   --ask-pass &lt;span class="se"&gt;\
&lt;/span&gt;                   --ask-sudo &lt;span class="se"&gt;\
&lt;/span&gt;                   playbooks/jkyle.yml
&lt;/pre&gt;
&lt;p&gt;You might see something like this&lt;/p&gt;
&lt;pre class="literal-block"&gt;
PLAY [all]
********************************************************************

GATHERING FACTS
***************************************************************
ok: [dock1]

TASK: [jkyle | Install YUM Packages]
******************************************
changed: [dock1] =&amp;gt;
(item=bind-utils,zsh,git-core,lsof,tcpdump,vim)

TASK: [jkyle | Install APT Packages]
******************************************
skipping: [dock1]

TASK: [jkyle | Create James]
**************************************************
changed: [dock1]

TASK: [jkyle | Configure jkyle sudoers]
***************************************
changed: [dock1]

TASK: [jkyle | Deploy jkyle User Key]
*****************************************
changed: [dock1]

TASK: [jkyle | Setup James Home Directory]
************************************
changed: [dock1]

TASK: [jkyle | Link James configuration files]
********************************
changed: [dock1] =&amp;gt; (item=zlogin)
changed: [dock1] =&amp;gt; (item=zlogout)
changed: [dock1] =&amp;gt; (item=zpreztorc)
changed: [dock1] =&amp;gt; (item=zprofile)
changed: [dock1] =&amp;gt; (item=zshenv)
changed: [dock1] =&amp;gt; (item=zshrc)

PLAY RECAP
********************************************************************
dock1   : ok=7    changed=6    unreachable=0    failed=0
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="services-configuration-on-primary-host"&gt;
&lt;h3&gt;Services Configuration On Primary Host&lt;/h3&gt;
&lt;div class="section" id="common"&gt;
&lt;h4&gt;Common&lt;/h4&gt;
&lt;p&gt;The common role does some general configuration of networking, hostnames, etc.
Make sure your inventory file includes the necessary group and host variables
for your network. See the inventory.example file.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="docker"&gt;
&lt;h4&gt;Docker&lt;/h4&gt;
&lt;p&gt;Our docker deployment provides both the local socket connection and a remote
API with server/client certificates. Some example certificates are found in
ansible-sandbox/librarian_roles/docker/files. However, you should probably
generate your own as these are obviously insecure...particuarly if the servers have
public ports. I generated the certs using a script and an openssl template you
found in my &lt;a class="reference external" href="https://github.com/jameskyle/CertGen"&gt;CertGen&lt;/a&gt; github repo.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
% ansible-playbook --limit dock1 \
                   -i inventories/inventory.example
                   playbooks/kubernetes.yml
&lt;/pre&gt;
&lt;p&gt;You might see something like this&lt;/p&gt;
&lt;pre class="literal-block"&gt;
PLAY [dockers]
****************************************************************

GATHERING FACTS
***************************************************************
ok: [dock1]

TASK: [common | sudoers]
******************************************************
ok: [dock1]

TASK: [common | Yum Fastest Mirror]
*******************************************
ok: [dock1]

TASK: [common | Update System]
************************************************
ok: [dock1]

TASK: [common | Install Packages]
*********************************************
ok: [dock1] =&amp;gt; (item=bridge-utils,policycoreutils-python)

TASK: [common | disalbe firewalld]
********************************************
ok: [dock1]

TASK: [common | disable network.service]
**************************************
changed: [dock1]

TASK: [common | Configure Management Interface]
*******************************
ok: [dock1]

TASK: [common | config sshd_config]
*******************************************
ok: [dock1]

TASK: [common | Base /etc/hosts Template]
*************************************
changed: [dock1]

TASK: [common | Set Hostname]
*************************************************
ok: [dock1]

TASK: [common | Build hosts file]
*********************************************
changed: [dock1] =&amp;gt; (item=dock1)
skipping: [dock1] =&amp;gt; (item=dock2)
skipping: [dock1] =&amp;gt; (item=dock3)
skipping: [dock1] =&amp;gt; (item=dock4)
skipping: [dock1] =&amp;gt; (item=dock5)

TASK: [docker | disable selinux]
**********************************************
changed: [dock1]

TASK: [docker | Install EPEL Repo]
********************************************
ok: [dock1]

TASK: [docker | Install Packages]
*********************************************
ok: [dock1] =&amp;gt; (item=docker,btrfs-progs,bridge-utils)

TASK: [docker | Install Packages]
*********************************************
skipping: [dock1]

TASK: [docker | Deploy ca.crt]
************************************************
ok: [dock1]

TASK: [docker | Deploy server.crt]
********************************************
ok: [dock1]

TASK: [docker | Deploy server.key]
********************************************
ok: [dock1]

TASK: [docker | Create docker.socket directory path]
**************************
changed: [dock1]

TASK: [docker | Create docker.socket unit]
************************************
ok: [dock1]

TASK: [docker | Link docker.socket to standard location]
**********************
skipping: [dock1]

TASK: [docker | docker.service]
***********************************************
ok: [dock1]

TASK: [docker | Add Docker Users to Docker Group]
*****************************
ok: [dock1] =&amp;gt; (item=docker_users)

TASK: [docker | Enable &amp;amp; Start Services]
**************************************
ok: [dock1] =&amp;gt; (item=docker.socket)
ok: [dock1] =&amp;gt; (item=docker.service)

PLAY RECAP
********************************************************************
dock1                      : ok=23   changed=5    unreachable=0    failed=0
&lt;/pre&gt;
&lt;p&gt;After which, the following changes would have been applied:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;A sudoers file deployed that allows individual configs in /etc/sudoers.d
and passwordless sudo for wheel group members.&lt;/li&gt;
&lt;li&gt;Installation of the yum fastest mirror plugin&lt;/li&gt;
&lt;li&gt;A full system update&lt;/li&gt;
&lt;li&gt;installation of bridge-utils, policycore utils&lt;/li&gt;
&lt;li&gt;The firewalld daemon disabled. &lt;a class="footnote-reference" href="#id4" id="id1"&gt;[*]&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;NetworkManager disabled. &lt;a class="footnote-reference" href="#id5" id="id2"&gt;[†]&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;selinux disabled. &lt;a class="footnote-reference" href="#id6" id="id3"&gt;[‡]&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;configuration of the management interface...probably already done, but this
enforces it&lt;/li&gt;
&lt;li&gt;a common sshd_config file deployed&lt;/li&gt;
&lt;li&gt;/etc/hosts populated with entries for all the docker hosts&lt;/li&gt;
&lt;li&gt;the target hosts hostname&lt;/li&gt;
&lt;li&gt;A fully functional docker server with server/client certificates.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you used the default certs, make sure to copy over the client certificate
and certificate authorities to your ~/.docker directory.&lt;/p&gt;
&lt;p&gt;You can interact with the docker server over tcp via&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
% &lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;DOCKER_HOST&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;tcp://dock1.yourdomain.com:2376
% docker --tlsverify -i -t --rm ubuntu /bin/bash
% docker --tlsverify images
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="pxe-services"&gt;
&lt;h3&gt;PXE Services&lt;/h3&gt;
&lt;p&gt;Next, we're going to deploy a container with pxe related services to bring up
the worker hosts. I've created a project that builds a pxe server container
given a specific environment context. You can use my &lt;a class="reference external" href="https://github.com/jameskyle/docker-pxe-server"&gt;docker-pxe-server&lt;/a&gt;
project, or build your own...or even just install the services on the host
itself.&lt;/p&gt;
&lt;p&gt;The readme for the project should be sufficient to get going.&lt;/p&gt;
&lt;p&gt;After pxe/dns/dhcp services are up for your environment, bounce the servers and
bring them up. I typically do this with ipmitool. A script to do so might look
something like&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
&lt;span class="k"&gt;for&lt;/span&gt; i in &lt;span class="m"&gt;11&lt;/span&gt; &lt;span class="m"&gt;12&lt;/span&gt; &lt;span class="m"&gt;13&lt;/span&gt; 14&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="k"&gt;do&lt;/span&gt;
    ipmitool -I lanplus &lt;span class="se"&gt;\
&lt;/span&gt;             -f ~/.racpasswd &lt;span class="se"&gt;\
&lt;/span&gt;             -H 192.168.19.&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;i&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="se"&gt;\
&lt;/span&gt;             -U root chassis bootdev pxe
    ipmitool -I lanplus &lt;span class="se"&gt;\
&lt;/span&gt;             -f ~/.racpasswd &lt;span class="se"&gt;\
&lt;/span&gt;             -H 192.168.19.&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;i&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="se"&gt;\
&lt;/span&gt;             -U root chassis power cycle
&lt;span class="k"&gt;done&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Of course, you'll need your actually ILO/iDrac/etc ip's. Make a cup of coffee,
catch up on the news. Whatever.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="summary"&gt;
&lt;h3&gt;Summary&lt;/h3&gt;
&lt;p&gt;That completes the initial host configuration. You should have all the key
services up such as an initial docker server &amp;amp; registry, PXE, DHCP, &amp;amp; DNS
services, and your initial user account. Finally you should have a number of
client hosts with fresh installs awaiting configuration.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="finalizing-the-cluster"&gt;
&lt;h2&gt;Finalizing the Cluster.&lt;/h2&gt;
&lt;p&gt;All that's left is configuring the client hosts and installing kubernetes.
Assuming our inventory is correctly configured in, we can just skip to what's
needed for kubernetes and then run ansible on all nodes.&lt;/p&gt;
&lt;div class="section" id="kubernetes"&gt;
&lt;h3&gt;Kubernetes&lt;/h3&gt;
&lt;p&gt;The kubernetes role assumes the required binaries and etcd are located in the&lt;/p&gt;
&lt;pre class="literal-block"&gt;
roles/kubernetes/files
&lt;/pre&gt;
&lt;p&gt;directory. These aren't bundled and since we're deploying the bleeding edge,
it's probably best to build a fresh set anyway. They both have their own build
systems that are covered in the docs, so please refer to the upstream
&lt;a class="reference external" href="https://github.com/GoogleCloudPlatform/kubernetes"&gt;kubernetes&lt;/a&gt; and &lt;a class="reference external" href="https://github.com/coreos/etcd"&gt;etcd&lt;/a&gt; project for details.&lt;/p&gt;
&lt;p&gt;A couple of hints though.&lt;/p&gt;
&lt;p&gt;For Kubernetes, you'll want to read the README.md in kubernetes's ./build
directory.&lt;/p&gt;
&lt;p&gt;For etcd, you'll probably just want to run these commands&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
docker build -t coreos/etcd .
docker run -d coreos/etcd
docker cp &amp;lt;container_id&amp;gt;:/opt/etcd/bin/etcd .
docker stop &amp;lt;container_id&amp;gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; docker rm &amp;lt;container_id&amp;gt;
&lt;/pre&gt;
&lt;p&gt;Then you have an amd64 etcd binary you can copy to roles/kubernetes/files.&lt;/p&gt;
&lt;div class="section" id="installation"&gt;
&lt;h4&gt;Installation&lt;/h4&gt;
&lt;p&gt;No more configuration should be necessary. Assuming everything's gone well so
far, the following should be sufficient&lt;/p&gt;
&lt;pre class="literal-block"&gt;
ansible-playbook --ask-pass \
                 --ask-sudo \
                 -i inventories/inventory.example \
                 playbooks/kubernetes.yml
&lt;/pre&gt;
&lt;p&gt;Notice we're no longer limiting to the dock1 host or passing specific tags to
run. Once done, you should be able to query your kubernetes minions. You can do
so from any host where kubecfg is installed. Which includes all your hosts at
/usr/local/bin/kubecfg. For example&lt;/p&gt;
&lt;pre class="literal-block"&gt;
% kubecfg -h http://dock1.pao19.tfoundry.com:8080 list minions
Minion identifier
----------
dock1
dock2
dock3
dock4
dock5
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="next-steps"&gt;
&lt;h2&gt;Next Steps.&lt;/h2&gt;
&lt;p&gt;Next up, you can deploy the &lt;a class="reference external" href="https://github.com/GoogleCloudPlatform/kubernetes/tree/master/examples/guestbook"&gt;Kubernetes GuestBook&lt;/a&gt; example. Or build your
own!&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="footnotes"&gt;
&lt;h2&gt;Footnotes&lt;/h2&gt;
&lt;table class="docutils footnote" frame="void" id="id4" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id1"&gt;[*]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;I had a hell of a time getting firewalld to work as advertised. Zones
wouldn't persist, interfaces added to multiple zones, etc. Several
upstream bugs were filed.Much easier to just write your own iptables
rules.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id5" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id2"&gt;[†]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;The network.service &amp;amp; NetworkManager seem to be mortal enemies in this
release.  You coudl tell NM manager to ignore a config, but it would
happily still muck with it...such as adding it to the default zone if
firewalld was enabled. In the end, leaving only NM running seemed to
work best.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id6" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id3"&gt;[‡]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;As of the time of this tutorial, the btrfs driver for docker does not
support selinux&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
</summary><category term="administration"></category><category term="devops"></category><category term="ansible"></category><category term="kubernetes"></category></entry><entry><title>Integrating PEP8 &amp; PyLint Tests with Nose &amp; Xunit</title><link href="http://blog.jameskyle.org/2014/05/pep8-pylint-tests-with-nose-xunit" rel="alternate"></link><updated>2014-05-23T08:24:46-07:00</updated><author><name>James A. Kyle</name></author><id>tag:blog.jameskyle.org,2014-05-23:2014/05/pep8-pylint-tests-with-nose-xunit</id><summary type="html">&lt;div class="section" id="motivation"&gt;
&lt;h2&gt;Motivation&lt;/h2&gt;
&lt;p&gt;Most continuous integration platforms support the xunit/junit formats for test
results. They allow a greater granularity of test management above a simple
pass/fail. &lt;a class="reference external" href="https://nose.readthedocs.org/en/latest/"&gt;Nose&lt;/a&gt; supports xunit reports by default, but &lt;a class="reference external" href="http://pep8.readthedocs.org/en/latest/"&gt;PEP8&lt;/a&gt; and &lt;a class="reference external" href="http://www.pylint.org/"&gt;PyLint&lt;/a&gt; do not.
By integrating PEP8 &amp;amp; PyLint into nose tests, we can include their results in
our xunit reports. This allows easy tracking of lint and pep failures and
linking them to issues.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="technique-limitations"&gt;
&lt;h2&gt;Technique &amp;amp; Limitations&lt;/h2&gt;
&lt;p&gt;In both cases I used the technique of collecting results, then using a test
&lt;a class="reference external" href="http://nose.readthedocs.org/en/latest/writing_tests.html#test-generators"&gt;generator pattern&lt;/a&gt; with the PEP or lint output as the error message. This has
the benefit of easily integrating with nose's xunit output plugin. However, it
does come with the disadvantage that tests do not persist across runs. This is
due to the test only existing when it &lt;em&gt;fails&lt;/em&gt; and disappearing when it does not.
The consequence is that if your CI tracks 'fixed' bugs, it'll lose that metric
since the test never technically succeeds ... it just disappears.&lt;/p&gt;
&lt;p&gt;Providing persistance would require a bit of footwork to track past failures
and generate a test, with the same name, with a 'pass' flag in the xunit.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="pep8"&gt;
&lt;h2&gt;PEP8&lt;/h2&gt;
&lt;p&gt;I couldn't find a method of extracting test data directly from the pep8
reports. To work around that, I subclassed the StandardReport and overrode the
get_file_results method so data is collected in an array of results.&lt;/p&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CustomReport&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pep8&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StandardReport&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;
    Collect report into an array of results.
    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;results&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_file_results&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_deferred_print&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_deferred_print&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;line_number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;offset&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;code&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_deferred_print&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;results&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
                    &lt;span class="s"&gt;'path'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="s"&gt;'row'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;line_offset&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;line_number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="s"&gt;'col'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;offset&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="s"&gt;'code'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;code&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="s"&gt;'text'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="p"&gt;})&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;file_errors&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Next, a generator requires a test method to yield a function and its args which
in turn produces a test result. I created a small wrapper method to always fail.&lt;/p&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;fail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;
    Fails with message.
    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;assert_true&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Finally, I created a test method that programmatically calls pep8 on the
project and generates a failure for each error found.&lt;/p&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_pep8_conformance&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;
    Test for pep8 conformance
    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="c"&gt;# Here I'm matching the project path so I can remove the prefix path&lt;/span&gt;
    &lt;span class="c"&gt;# in the output. This strips the often obtuse absolute paths in CI&lt;/span&gt;
    &lt;span class="c"&gt;# environments. Yours will obviously differ.&lt;/span&gt;
    &lt;span class="n"&gt;pattern&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;compile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;r'.*(roadrage/roadrage.*\.py)'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;pep8style&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pep8&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StyleGuide&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;reporter&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;CustomReport&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;base&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dirname&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;abspath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__file__&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;dirname&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;abspath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;base&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'..'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;sources&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pyfile&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;files&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;walk&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dirname&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;pyfile&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;files&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;pyfile&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;endswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'.py'&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
    &lt;span class="n"&gt;report&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pep8style&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;init_report&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;pep8style&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;check_files&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sources&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;error&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;report&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;results&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;{path}: {code} {row}, {col} - {text}&amp;quot;&lt;/span&gt;
        &lt;span class="n"&gt;match&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pattern&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'path'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;rel_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;group&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;rel_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'path'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

        &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;fail&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;rel_path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;code&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'code'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
            &lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'row'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
            &lt;span class="n"&gt;col&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'col'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
            &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'text'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;These are placed where nose can find them, in my case tests/test_pep8.py.
Here's the full source.&lt;/p&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;
Provides code conformance testing.

We do it here so we can collect errors into the xunit report for CI
integration.
&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pep8&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;re&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;nose.tools&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;assert_true&lt;/span&gt;  &lt;span class="c"&gt;# pylint: disable=E0611&lt;/span&gt;

&lt;span class="n"&gt;PROJ_ROOT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;roadrage/roadrage&amp;quot;&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;fail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;
    Fails with message.
    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;assert_true&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CustomReport&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pep8&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StandardReport&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;
    Collect report into an array of results.
    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;results&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_file_results&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_deferred_print&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_deferred_print&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;line_number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;offset&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;code&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_deferred_print&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;results&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
                    &lt;span class="s"&gt;'path'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="s"&gt;'row'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;line_offset&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;line_number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="s"&gt;'col'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;offset&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="s"&gt;'code'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;code&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="s"&gt;'text'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="p"&gt;})&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;file_errors&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_pep8_conformance&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;
    Test for pep8 conformance
    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;pattern&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;compile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;r'.*({0}.*\.py)'&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PROJ_ROOT&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;pep8style&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pep8&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StyleGuide&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;reporter&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;CustomReport&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;base&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dirname&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;abspath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__file__&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;dirname&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;abspath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;base&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'..'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;sources&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pyfile&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;files&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;walk&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dirname&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;pyfile&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;files&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;pyfile&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;endswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'.py'&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
    &lt;span class="n"&gt;report&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pep8style&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;init_report&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;pep8style&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;check_files&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sources&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;error&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;report&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;results&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;{path}: {code} {row}, {col} - {text}&amp;quot;&lt;/span&gt;
        &lt;span class="n"&gt;match&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pattern&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'path'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;rel_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;group&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;rel_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'path'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

        &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;fail&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;rel_path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;code&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'code'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
            &lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'row'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
            &lt;span class="n"&gt;col&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'col'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
            &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'text'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="pylint"&gt;
&lt;h2&gt;PyLint&lt;/h2&gt;
&lt;p&gt;I used a very similar method with PyLint, with one exception. I couldn't figure
out how to do it purely programmatically. The failure was primarily due to a
bug in the current version where the py_run method ignored the pylintrc options
passed to it. I seriously can't find the bug report now, but it was being
tracked. My workaround involved configuring a custom output template, shelling
out, and capturing then parsing the output.&lt;/p&gt;
&lt;p&gt;The method requires pylintrc settings for the msg template that separates
each field by a '|' and disabling of the verbose reporting options.&lt;/p&gt;
&lt;pre class="code ini literal-block"&gt;
&lt;span class="na"&gt;msg-template&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;{path}|{msg_id}|{line},{column}|{msg}&lt;/span&gt;
&lt;span class="na"&gt;reports&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;no&lt;/span&gt;
&lt;/pre&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;
Provides lint testing for the roadrage project.
&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;subprocess&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Popen&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;PIPE&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;nose.tools&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;assert_true&lt;/span&gt;  &lt;span class="c"&gt;# pylint: disable=E0611&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;fail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;
    Fails with message.
    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;assert_true&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_lint_conformance&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;
    Collects all lint tests and creates nose errors.
    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;base&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dirname&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;abspath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__file__&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;root&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;abspath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;base&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'..'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'..'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;rcfile&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'.pylintrc'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;cmd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'pylint'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'roadrage'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'--rcfile={0}'&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rcfile&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
    &lt;span class="n"&gt;proc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Popen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cmd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;PIPE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;proc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;wait&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="n"&gt;errors&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;
              &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;proc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;readlines&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
              &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;startswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'*'&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;errors&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;fields&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'|'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;{path}: {code} ({position}) - {msg}&amp;quot;&lt;/span&gt;
        &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;fail&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;fields&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
            &lt;span class="n"&gt;code&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;fields&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
            &lt;span class="n"&gt;position&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;fields&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
            &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;fields&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="external-links"&gt;
&lt;h2&gt;External Links&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://pep8.readthedocs.org/en/latest/"&gt;PEP8&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.pylint.org/"&gt;PyLint&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://nose.readthedocs.org/en/latest/"&gt;Nose&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</summary><category term="python programming"></category></entry><entry><title>Configuring Docker Remote API with TLS on CoreOS</title><link href="http://blog.jameskyle.org/2014/04/coreos-docker-remote-api-tls" rel="alternate"></link><updated>2014-04-18T09:09:25-07:00</updated><author><name>James A. Kyle</name></author><id>tag:blog.jameskyle.org,2014-04-18:2014/04/coreos-docker-remote-api-tls</id><summary type="html">&lt;div class="section" id="problem"&gt;
&lt;h2&gt;Problem&lt;/h2&gt;
&lt;p&gt;I recently set up a CoreOS box for futzing around and wanted to use it as a
replacement for my qemu-kvm workflow (amongst other things). Typically this
involves spinning up various distros of linux to compile software, provide
services, or do demos on. They're typically ephemeral in that I frequently tear
them down when I'm done and the workspace is configured automatically using
&lt;a class="reference external" href="https://github.com/jameskyle/setup"&gt;some setup&lt;/a&gt; scripts. Before I'd done this with virsh behind a rather
restrictive vpn, but this box is a little more exposed and I wanted some kind
of auth in front. Luckily, docker 0.10.0 provides TLS authentication for its
remote tcp API. Perfect.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="solution"&gt;
&lt;h2&gt;Solution&lt;/h2&gt;
&lt;p&gt;I'm going to assume you already have a &lt;a class="reference external" href="http://coreos.com/docs/"&gt;working coreos and docker&lt;/a&gt; instance
somwhere. After that, we're going to merge a couple of tutorials from the
&lt;a class="reference external" href="http://docs.docker.io/examples/https/"&gt;docker side&lt;/a&gt; for https auth and the &lt;a class="reference external" href="http://coreos.com/docs/launching-containers/building/customizing-docker/#enable-the-remote-api-on-a-new-socket"&gt;coreos side&lt;/a&gt; for configuring the remote
api. But we're not going to use the docker-tcp.socket example as I was unable to
get that to work with the docker cert options.&lt;/p&gt;
&lt;div class="section" id="creating-certificates"&gt;
&lt;h3&gt;Creating Certificates&lt;/h3&gt;
&lt;div class="tip"&gt;
&lt;p class="first admonition-title"&gt;Tip&lt;/p&gt;
&lt;p class="last"&gt;I've updated &lt;a class="reference external" href="https://gist.github.com/jameskyle/5a530f80e5ab8e19013c"&gt;this script&lt;/a&gt;, making it more generalized, supporting
multiple client cert generation, and using an &lt;a class="reference external" href="https://gist.github.com/jameskyle/8106d4d5c6dfa5395cef"&gt;openssl.cnf&lt;/a&gt; file that gets
rid of those annoying questions.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Docker uses client/server certificates to grant access. So we need to create
some private/public key pairs and a CA serial file. The example below creates
one with a 10 year expiration.&lt;/p&gt;
&lt;pre class="code sh literal-block"&gt;
&lt;span class="c"&gt;#!/bin/bash
&lt;/span&gt;&lt;span class="nb"&gt;set&lt;/span&gt; -ex
mkdir certs &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;cd &lt;/span&gt;certs
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Creating server keys...&amp;quot;&lt;/span&gt;
&lt;span class="nb"&gt;echo &lt;/span&gt;&lt;span class="m"&gt;01&lt;/span&gt; &amp;gt; ca.srl
openssl genrsa -des3 -out ca-key.pem
openssl req -new -x509 -days &lt;span class="m"&gt;3650&lt;/span&gt; -key ca-key.pem -out ca.pem
openssl genrsa -des3 -out server-key.pem
openssl req -new -key server-key.pem -out server.csr
openssl x509 -req -days &lt;span class="m"&gt;365&lt;/span&gt; -in server.csr -CA ca.pem -CAkey ca-key.pem &lt;span class="se"&gt;\
&lt;/span&gt;    -out server-cert.pem

&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Creating client keys...&amp;quot;&lt;/span&gt;
openssl genrsa -des3 -out client-key.pem
openssl req -new -key client-key.pem -out client.csr
&lt;span class="nb"&gt;echo &lt;/span&gt;&lt;span class="nv"&gt;extendedKeyUsage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; clientAuth &amp;gt; extfile.cnf
openssl x509 -req -days &lt;span class="m"&gt;365&lt;/span&gt; -in client.csr -CA ca.pem -CAkey ca-key.pem &lt;span class="se"&gt;\
&lt;/span&gt;    -out client-cert.pem -extfile extfile.cnf

&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Stripping passwords from keys...&amp;quot;&lt;/span&gt;
openssl rsa -in server-key.pem -out server-key.pem
openssl rsa -in client-key.pem -out client-key.pem
&lt;/pre&gt;
&lt;p&gt;After being asked a bunch of annoying questions, you'll need to copy the
generated client certificates from your server to your client or vice versa if
you created the certs on your client.&lt;/p&gt;
&lt;p&gt;Make sure you use the correct FQDN (or '*' to match all servers) of the server
for the server certificate. We don't have a fully working dns for our lab
network, so I just made sure I had a /etc/hosts entry on my client.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="configuring-coreos"&gt;
&lt;h3&gt;Configuring CoreOS&lt;/h3&gt;
&lt;p&gt;We need to tweak the default docker.service definition in CoreOS to use the
TLS certs we created. This should be done as root. The below script &lt;em&gt;assumes
the server certificates are in working directory of the script&lt;/em&gt;.&lt;/p&gt;
&lt;pre class="code sh literal-block"&gt;
&lt;span class="c"&gt;#!/bin/bash
&lt;/span&gt;&lt;span class="nb"&gt;set&lt;/span&gt; -ex
systemctl stop docker
systemctl disable docker
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Copying scripts to /var/ssl/&amp;quot;&lt;/span&gt;
mkdir -p /var/ssl
cp ca.pem server-cert.pem server-key.pem /var/ssl/

cat&lt;span class="s"&gt;&amp;lt;&amp;lt;-EOF &amp;gt; /etc/systemd/system/docker.service
[Unit]
Description=Docker Application Container Engine
Documentation=http://docs.docker.io

[Service]
ExecStartPre=/bin/mount --make-rprivate /
# Run docker but don't have docker automatically restart
# containers. This is a job for systemd and unit files.
ExecStart=/usr/bin/docker -d -s=btrfs -r=false --tlsverify --tlscacert=/var/ssl/ca.pem --tlscert=/var/ssl/server-cert.pem --tlskey=/var/ssl/server-key.pem -H fd:// -H 0.0.0.0:4243
#ExecStart=/usr/bin/docker -d -s=btrfs -r=false -H fd://

[Install]
WantedBy=multi-user.target
EOF&lt;/span&gt;

systemctl &lt;span class="nb"&gt;enable&lt;/span&gt; /etc/systemd/system/docker.service
systemctl start docker
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="setting-up-your-client"&gt;
&lt;h3&gt;Setting Up Your Client&lt;/h3&gt;
&lt;p&gt;Coy the client certificates to a good location, I put mine in ~/.docker/. Also,
for convenience, set the DOCKER_HOST environment variable.&lt;/p&gt;
&lt;pre class="code sh literal-block"&gt;
mkdir ~/.docker
cp ca.pem ~/.docker
cp client-cert.pem ~/.docker/cert.pem
cp client-key.pem ~/.docker/key.pem

&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;DOCKER_HOST&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&amp;lt;docker service fqdn&amp;gt;:4243
&lt;/pre&gt;
&lt;p&gt;If you named the files exactly like above, you should be able to access your
TLS protected docker api with with the following command from your client.&lt;/p&gt;
&lt;pre class="code sh literal-block"&gt;
docker --tlsverify images
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="external-links"&gt;
&lt;h2&gt;External Links&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.docker.io"&gt;Docker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://coreos.com"&gt;CoreOS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</summary><category term="docker coreos administration"></category></entry><entry><title>OSXFuse 2.6.2 Kext Fails to Load in Mavericks</title><link href="http://blog.jameskyle.org/2014/03/osxfuse-kext-fails-on-mavericks" rel="alternate"></link><updated>2014-03-19T13:33:14-07:00</updated><author><name>James A. Kyle</name></author><id>tag:blog.jameskyle.org,2014-03-19:2014/03/osxfuse-kext-fails-on-mavericks</id><summary type="html">&lt;div class="section" id="the-problem"&gt;
&lt;h2&gt;The Problem&lt;/h2&gt;
&lt;p&gt;Installing the most recent &lt;a class="reference external" href="http://osxfuse.github.io"&gt;OSXFuse&lt;/a&gt; from &lt;a class="reference external" href="http://brew.sh"&gt;Homebrew&lt;/a&gt; (or from the main site),
fails to load the new kext. If you attempt to load the kext, you get errors
in your logs like:&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
Mar &lt;span class="m"&gt;19&lt;/span&gt; 11:34:30 metaverse.local com.apple.kextd&lt;span class="o"&gt;[&lt;/span&gt;29&lt;span class="o"&gt;]&lt;/span&gt;: WARNING - &lt;span class="se"&gt;\
&lt;/span&gt;Invalid signature -67062 0xFFFFFFFFFFFEFA0A &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="se"&gt;\
&lt;/span&gt;kext &lt;span class="s2"&gt;&amp;quot;/Library/Filesystems/osxfusefs.fs/Support/osxfusefs.kext&amp;quot;&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="the-fix"&gt;
&lt;h2&gt;The Fix&lt;/h2&gt;
&lt;p&gt;The workaround is to sign the code yourself. To do so, you'll first need a
signing certificate. The &lt;a class="reference external" href="https://developer.apple.com/library/mac/documentation/security/conceptual/CodeSigningGuide/Procedures/Procedures.html#//apple_ref/doc/uid/TP40005929-CH4-SW1"&gt;Apple Code Signing Guide&lt;/a&gt; covers how to do so. If
you don't have an applie account and have no interest in creating an
developer certificate, jump to the section called
&amp;quot;To use the Certificate Assistant to create a self-signed signing identity&amp;quot;.&lt;/p&gt;
&lt;p&gt;Once you have a certificate, you can sign the kext.&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
sudo codesign -s &lt;span class="s2"&gt;&amp;quot;James Kyle&amp;quot;&lt;/span&gt; &lt;span class="se"&gt;\
&lt;/span&gt;    -f /Library/Filesystems/osxfusefs.fs/Support/osxfusefs.kex
&lt;/pre&gt;
&lt;p&gt;You should replace &amp;quot;James Kyle&amp;quot; with the name you gave the certificate.&lt;/p&gt;
&lt;p&gt;After that, all should be well with the world again.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="external-links"&gt;
&lt;h2&gt;External Links&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://osxfuse.github.io"&gt;OSXFuse&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://brew.sh"&gt;Homebrew&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://developer.apple.com/library/mac/documentation/security/conceptual/CodeSigningGuide/Procedures/Procedures.html#//apple_ref/doc/uid/TP40005929-CH4-SW1"&gt;Apple Code Signing Guide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</summary><category term="osx administration"></category></entry><entry><title>Zsh Script to Create VMware Fusion 5 Vagrant Box</title><link href="http://blog.jameskyle.org/2013/05/zsh-script-to-create-vmware-fusion-5-vagrant-box" rel="alternate"></link><updated>2013-05-25T09:03:50-07:00</updated><author><name>James A. Kyle</name></author><id>tag:blog.jameskyle.org,2013-05-25:2013/05/zsh-script-to-create-vmware-fusion-5-vagrant-box</id><summary type="html">&lt;p&gt;I'm sure &lt;a class="reference external" href="http://www.vagrantup.com/"&gt;vagrant&lt;/a&gt; package will soon support &lt;a class="reference external" href="http://www.vmware.com/products/fusion/overview.html"&gt;vmware fusion&lt;/a&gt; too, but as of this article
it does not. So I wrote a little script that'll clean up, shrink, and package a
vmware virtualmachine directory into a vagrant box.&lt;/p&gt;
&lt;p&gt;It's should be run from the directory of the virtual machine. I put some checks
in there to try and verify that the current directory is a vmware vm. However,
if you do run it outside of a vmware vm directory Bad Things May Happen (TM).&lt;/p&gt;
&lt;p&gt;Use with caution, I'm not responsible for any unintended consequences, yada
yada yada.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#!/usr/bin/env zsh&lt;/span&gt;
&lt;span class="c"&gt;# set: ft=sh&lt;/span&gt;
&lt;span class="nb"&gt;set&lt;/span&gt; -e
setopt extendedglob

vmrun stop *.vmx

&lt;span class="c"&gt;# verify we&amp;#39;re in a vmware vm directory&lt;/span&gt;
&lt;span class="nb"&gt;pwd&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; grep vmwarevm &amp;gt; /dev/null 2&amp;gt;&lt;span class="p"&gt;&amp;amp;&lt;/span&gt;1

&lt;span class="c"&gt;# just another check, make sure the files in this directory look like vmware&lt;/span&gt;
&lt;span class="c"&gt;# virtual machine files&lt;/span&gt;
ls -d *.&lt;span class="o"&gt;(&lt;/span&gt;vmxf&lt;span class="p"&gt;|&lt;/span&gt;nvram&lt;span class="p"&gt;|&lt;/span&gt;vmsd&lt;span class="p"&gt;|&lt;/span&gt;vmx&lt;span class="p"&gt;|&lt;/span&gt;vmdk&lt;span class="o"&gt;)&lt;/span&gt; &amp;gt; /dev/null 2&amp;gt;&lt;span class="p"&gt;&amp;amp;&lt;/span&gt;1

&lt;span class="c"&gt;# remove all files that are not essential for a vagrant box&lt;/span&gt;
rm -f &lt;span class="k"&gt;$(&lt;/span&gt;ls -d *~*.&lt;span class="o"&gt;(&lt;/span&gt;vmxf&lt;span class="p"&gt;|&lt;/span&gt;nvram&lt;span class="p"&gt;|&lt;/span&gt;vmsd&lt;span class="p"&gt;|&lt;/span&gt;vmx&lt;span class="p"&gt;|&lt;/span&gt;vmdk&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;

&lt;span class="c"&gt;# defragment and shrink the main vmware disk&lt;/span&gt;
vmware-vdiskmanager -d &lt;span class="s2"&gt;&amp;quot;Virtual Disk.vmdk&amp;quot;&lt;/span&gt;
vmware-vdiskmanager -k &lt;span class="s2"&gt;&amp;quot;Virtual Disk.vmdk&amp;quot;&lt;/span&gt;

&lt;span class="c"&gt;# create the metadata.json for vmware fusion&lt;/span&gt;
cat &lt;span class="s"&gt;&amp;lt;&amp;lt;EOF &amp;gt; metadata.json&lt;/span&gt;
&lt;span class="s"&gt;{&lt;/span&gt;
&lt;span class="s"&gt;  &amp;quot;provider&amp;quot;:&amp;quot;vmware_fusion&amp;quot;&lt;/span&gt;
&lt;span class="s"&gt;}&lt;/span&gt;
&lt;span class="s"&gt;EOF&lt;/span&gt;

&lt;span class="c"&gt;# box it up using the virtual machine name as the box name.&lt;/span&gt;
&lt;span class="nv"&gt;box_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;basename &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;PWD&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; .vmwarevm&lt;span class="k"&gt;)&lt;/span&gt;
tar cvzf &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;box_name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;.box&amp;quot;&lt;/span&gt; ./*
&lt;/pre&gt;&lt;/div&gt;
</summary><category term="vmware"></category><category term="vagrant"></category><category term="scripts"></category></entry><entry><title>Disable DHCP Daemon on Default Virtual Nets in VMware Fusion 5</title><link href="http://blog.jameskyle.org/2013/05/disable-dhcp-daemon-on-default-vmnets-in-vmware-fusion-5" rel="alternate"></link><updated>2013-05-16T21:21:18-07:00</updated><author><name>James A. Kyle</name></author><id>tag:blog.jameskyle.org,2013-05-16:2013/05/disable-dhcp-daemon-on-default-vmnets-in-vmware-fusion-5</id><summary type="html">&lt;p&gt;Fusion 5 is a bit different than previous versions. It adds a lot of network
configuration missing in previous versions. There are two interfaces that
aren't modifiable in the gui; vmnet1 and vmnet8.&lt;/p&gt;
&lt;p&gt;These are default networks created by VMware. vmnet1 is VMware's default
hostonly net and vmnet8 is the default nat network. Both have dhcp enabled.&lt;/p&gt;
&lt;p&gt;Network configuration options are managed using the vmnet-cfgcli. vmnet-cfgcli
and all VMWare utilities are found in the
/Applications/VMware Fusion.app/Contents/Library/ directory. To disable dhcp,
we'd&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo vmnet-cfgcli vnetcfgadd VNET_1_DHCP no
sudo vmnet-cfgcli vnetcfgadd VNET_8_DHCP no
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;They basically update configuration values in the
/Library/Preferences/VMware Fusion/networking file.&lt;/p&gt;
&lt;p&gt;Then restart vmware. You can verify the dhcpd service is no longer running by&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;ps aux &lt;span class="p"&gt;|&lt;/span&gt; grep -i dhcpd &lt;span class="p"&gt;|&lt;/span&gt; grep vmnet
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Zero results means no dhcpd running on VMware's virtual nets.&lt;/p&gt;
</summary><category term="vmware"></category><category term="virtualization"></category><category term="dhcp"></category></entry><entry><title>Deploying Pelican Blog with Bitbucket Commit Hooks</title><link href="http://blog.jameskyle.org/2012/12/deploying-pelican-blog-with-bitbucket-commit-hooks" rel="alternate"></link><updated>2012-12-10T17:42:00-08:00</updated><author><name>James A. Kyle</name></author><id>tag:blog.jameskyle.org,2012-12-10:2012/12/deploying-pelican-blog-with-bitbucket-commit-hooks</id><summary type="html">&lt;img alt="Schaffhausen Watch" class="align-center" src="/images/2012/11/schaffhausen-watch.jpg" style="width: 362.5px; height: 282.0px;" /&gt;
&lt;div class="section" id="migrating-from-wordpress"&gt;
&lt;h2&gt;Migrating from Wordpress&lt;/h2&gt;
&lt;p&gt;I recently migrated my blog from &lt;a class="reference external" href="http://wordpress.org"&gt;Wordpress&lt;/a&gt; to &lt;a class="reference external" href="http://blog.getpelican.com"&gt;Pelican&lt;/a&gt;. There are a few
incentives to do so. Not the least of which is using &lt;a class="reference external" href="http://daringfireball.net/projects/markdown/"&gt;Markdown&lt;/a&gt; or &lt;a class="reference external" href="http://docutils.sourceforge.net/rst.html"&gt;reST&lt;/a&gt; for
markup and free distributed backups with &lt;a class="reference external" href="http://git-scm.com"&gt;Git&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;There are some drawbacks as well. The one I'd miss the most is the
ability to easily sync off line changes to your blog. I was using
&lt;a class="reference external" href="http://www.red-sweater.com/marsedit/"&gt;MarsEdit&lt;/a&gt; for this purpose and am very happy with it overall. Though I've never
been able to find a non-futzy way to edit in reST and publish to the blog. All
the workflow always involved conversion steps or copy and pasting.&lt;/p&gt;
&lt;p&gt;By migrating to Pelican + Git, I'm able to use &lt;a class="reference external" href="https://bitbucket.org"&gt;Bitbucket&lt;/a&gt;'s git service hooks
to trigger a sync &amp;amp; build cycle on my web server. This article walks through
steps required to set this up. &lt;a class="footnote-reference" href="#id3" id="id1"&gt;[1]&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-method"&gt;
&lt;h2&gt;The Method&lt;/h2&gt;
&lt;p&gt;On the back end, I set all this up by writing a little flask + uwsgi application
that does one thing and one thing only: listens for a Bitbucket POST commit
notification. It checks to see if the master branch changed and pulls down the
blog updates and regenerates the static files. The static files are then served
by nginx. I also proxy uwsgi through nginx so my api endpoint is a url like:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
http://yourdomain.com/api
or
http://api.yourdomain.com/v1
&lt;/pre&gt;
&lt;div class="section" id="install"&gt;
&lt;h3&gt;Install&lt;/h3&gt;
&lt;p&gt;First, install the necessary packages on your server:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
apt-get install nginx uwsgi uwsgi-plugin-http uwsgi-plugin-python python-pip \
                python-virtualenv
&lt;/pre&gt;
&lt;p&gt;Pelican doesn't have deb packages. So I used pip instead:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
pip install pelican
&lt;/pre&gt;
&lt;p&gt;I found my theme in the &lt;a class="reference external" href="https://github.com/getpelican/pelican-themes"&gt;pelican-themes&lt;/a&gt; repository. pelican-themes is a
collection of about 25 CSS styles for pelican. This blog is styled using
a variation of tuxlite_tbs. Whichever one you choose, it needs to be installed
on your server:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
pelican-themes -i the_theme
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="configure"&gt;
&lt;h3&gt;Configure&lt;/h3&gt;
&lt;p&gt;Configuration is based on the following assumptions. You may need to adapt the
example files if yours varies. I'll use &lt;em&gt;$fqdn&lt;/em&gt; as a substitute for your actual
blog fqdn. For example, mine would be &lt;em&gt;blog.jameskyle.org&lt;/em&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;blog repository location&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;/var/www/$fqdn&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;static files location&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;/var/www/$fqdn/output/&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;default confiugraiton location for uwsgi sockets on ubuntu&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;/var/run/uwsgi/app/$fqdn/socket&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="nginx"&gt;
&lt;h4&gt;Nginx&lt;/h4&gt;
&lt;p&gt;Nginx is used to serve our static files and also proxy to the uWSGI git service.&lt;/p&gt;
&lt;p&gt;First, I disabled the default site:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
rm /etc/nginx/sites-enabled/default
&lt;/pre&gt;
&lt;p&gt;Next, I create a conf for my blog site:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
vim /etc/nginx/conf.d/${fqdn}.conf
&lt;/pre&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;server&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="kn"&gt;listen&lt;/span&gt;   &lt;span class="mi"&gt;80&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
     &lt;span class="kn"&gt;root&lt;/span&gt; &lt;span class="s"&gt;/var/www/&lt;/span&gt;&lt;span class="nv"&gt;${fqdn}/output&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
     &lt;span class="kn"&gt;index&lt;/span&gt; &lt;span class="s"&gt;index.html&lt;/span&gt; &lt;span class="s"&gt;index.htm&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
     &lt;span class="kn"&gt;server_name&lt;/span&gt; &lt;span class="s"&gt;\*.&lt;/span&gt;&lt;span class="nv"&gt;${fqdn}&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
     &lt;span class="kn"&gt;location&lt;/span&gt; &lt;span class="s"&gt;/api&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
         &lt;span class="kn"&gt;include&lt;/span&gt; &lt;span class="s"&gt;uwsgi_params&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
         &lt;span class="kn"&gt;uwsgi_pass&lt;/span&gt; &lt;span class="s"&gt;unix:///var/run/uwsgi/app/&lt;/span&gt;&lt;span class="nv"&gt;${fqdn}/socket&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
         &lt;span class="kn"&gt;uwsgi_param&lt;/span&gt; &lt;span class="s"&gt;UWSGI_SETENV&lt;/span&gt; &lt;span class="s"&gt;PELICAN=/usr/local/bin/pelican&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
     &lt;span class="p"&gt;}&lt;/span&gt;

     &lt;span class="kn"&gt;location&lt;/span&gt; &lt;span class="s"&gt;/&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
             &lt;span class="kn"&gt;try_files&lt;/span&gt; &lt;span class="nv"&gt;$uri&lt;/span&gt; &lt;span class="nv"&gt;$uri/&lt;/span&gt; &lt;span class="s"&gt;/index.html&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
     &lt;span class="p"&gt;}&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This particular configuraion proxies to all requests made to the /api route to
the backend server. However, you could modify the proxy to suit any number of
configurations.&lt;/p&gt;
&lt;p&gt;You may notice I pass a environment variable to uwsgi. The uWSGI process runs as
the www-data user. In my testing, the user was unable to find the pelican binary
when my server spawned a 'make regenerate'. To solve that problem, I set the
PELICAN environment variable and changed the pelican Makefile to conditionally
set its PELICAN var. You can do this by executing:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
sed -i.bak 's|PELICAN=|PELICAN?=|g' Makefile
&lt;/pre&gt;
&lt;p&gt;On the Makefile generated by pelican-quickstart.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="virtualenv"&gt;
&lt;h4&gt;virtualenv&lt;/h4&gt;
&lt;p&gt;I created a virtual environment with the necessary modules for my uwsgi server.
It provides a nice segration between my system and application libraries. These
config files assume the virtualenv is located at /var/www/$fqdn/env. Update them
if you choose to drop it somewhere else.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;virtualenv /var/www/&lt;span class="nv"&gt;$fqdn&lt;/span&gt;/env
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="uwsgi"&gt;
&lt;h4&gt;uWSGI&lt;/h4&gt;
&lt;p&gt;Nginx needs something to proxy too and I used uwsgi. Gunicorn or any other wsgi
compatible backend is perfectly acceptable. I created a file
/etc/uwsgi/sites-available/$fqdn.ini with these contents&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;[uwsgi]&lt;/span&gt;
&lt;span class="na"&gt;base&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;/var/www/$fqdn&lt;/span&gt;
&lt;span class="na"&gt;gitpost&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;%(base)/utils/gitpost&lt;/span&gt;
&lt;span class="na"&gt;module&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;gitpost&lt;/span&gt;
&lt;span class="na"&gt;callable&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;app&lt;/span&gt;
&lt;span class="na"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;app&lt;/span&gt;
&lt;span class="c1"&gt;# Generic Config&lt;/span&gt;
&lt;span class="na"&gt;plugins&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;http,python&lt;/span&gt;
&lt;span class="na"&gt;home&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;%(base)/env&lt;/span&gt;
&lt;span class="na"&gt;pythonpath&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;%(base)/env&lt;/span&gt;
&lt;span class="na"&gt;chdir&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;%(gitpost)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You must then link the file to the sites-enabled directory&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;ln -s /etc/uwsgi/sites-available/&lt;span class="nv"&gt;$fqdn&lt;/span&gt;.ini /etc/uwsgi/sites-enabled/
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="bitbucket"&gt;
&lt;h4&gt;Bitbucket&lt;/h4&gt;
&lt;p&gt;Bitbucket is where the magic happens. Ok, it's not magic. It's just a POST hook
on commits. But it's what sets everything in motion. To enable that feature you
go to &lt;a class="reference external" href="http://bitbucket.org/$username/$blog-reponame"&gt;http://bitbucket.org/$username/$blog-reponame&lt;/a&gt;,  then type 'r' and 'a' in
quick succession (or click the little sprocket to the right). Next, in the left
menu click &amp;quot;Services&amp;quot;. You'll have a dropdown, select the &amp;quot;POST&amp;quot; service. Finally,
enter your blog's fqdn and api url. Given a fqdn of blog.jameskyle.org, the
examples above woudl produce an api endpoint of:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
http://blog.jameskyle.org/api
&lt;/pre&gt;
&lt;p&gt;My blog repo is public. However, if you wish to keep your raw source private
you'll need to create a public/private keypair for checking out the blog. The
private key should be stored in the www-data user's home directory. On Ubuntu
systems, the key is stored in:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
/var/www/.ssh/id_rsa
&lt;/pre&gt;
&lt;p&gt;Or id_dsa, whichever.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="gitpost"&gt;
&lt;h4&gt;gitpost&lt;/h4&gt;
&lt;p&gt;Of course, we need to have something listening on the other side of the POST hook
or it's all for naught. I wrote a little server using flask to satisfy that
function. Configurable variables are set at the top of the file. Specifically,
you'll want to set the DOCROOT variable. In this case, the DOCROOT is the
location of your blog repository.&lt;/p&gt;
&lt;p&gt;My server also logs activity. By default, it does so to:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
/var/log/gitpost/gitpost.log
&lt;/pre&gt;
&lt;p&gt;This directory should be owned by the www-data user.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;mkdir /var/log/gitpost
chown www-data:www-data -R /var/log/gitpost
&lt;/pre&gt;&lt;/div&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;json&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;logging&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;subprocess&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Popen&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;subprocess&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;PIPE&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;werkzeug.contrib.fixers&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ProxyFix&lt;/span&gt;

&lt;span class="n"&gt;DOCROOT&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;/var/www/$fqdn&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;LOGLEVEL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;INFO&lt;/span&gt;
&lt;span class="n"&gt;LOG_FORMAT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="si"&gt;%(asctime)s&lt;/span&gt;&lt;span class="s"&gt; - &lt;/span&gt;&lt;span class="si"&gt;%(name)s&lt;/span&gt;&lt;span class="s"&gt; - &lt;/span&gt;&lt;span class="si"&gt;%(levelname)s&lt;/span&gt;&lt;span class="s"&gt; - &lt;/span&gt;&lt;span class="si"&gt;%(message)s&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;DATE_FORMAT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;%Y-%m-&lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s"&gt;,%H:%M:%S&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;LOGFILE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;/var/log/gitpost/gitpost.log&amp;quot;&lt;/span&gt;

&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;wsgi_app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ProxyFix&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;wsgi_app&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setLevel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;LOGLEVEL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;formatter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Formatter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;LOG_FORMAT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;datefmt&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;DATE_FORMAT&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;fh&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FileHandler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;LOGFILE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;fh&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setFormatter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;formatter&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addHandler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fh&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Starting gitpost api application&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;log_error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;command&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;returncode&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="s"&gt;    Command: {cmd} =&amp;gt; {ret}&lt;/span&gt;
&lt;span class="s"&gt;    --------------&lt;/span&gt;

&lt;span class="s"&gt;    Output:&lt;/span&gt;
&lt;span class="s"&gt;        {out}&lt;/span&gt;

&lt;span class="s"&gt;    Error:&lt;/span&gt;
&lt;span class="s"&gt;        {err}&lt;/span&gt;
&lt;span class="s"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cmd&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;command&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ret&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;returncode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;pull&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Pulling changes from master&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;popen&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;git&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;pull&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;origin&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;master&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;popen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cmd&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Changing into {0}&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DOCROOT&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Executing: {0}&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot; &amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cmd&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;

    &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;chdir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DOCROOT&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Popen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cmd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;PIPE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;stderr&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;PIPE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;wait&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;communicate&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;returncode&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;log_error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cmd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;returncode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;publish&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Publishing blog updates&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;popen&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;make&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;publish&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;update&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Updating blog&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;pull&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;publish&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="nd"&gt;@app.route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/api&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;methods&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;POST&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;parse_request&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Parsing request&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;payload&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;loads&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;payload&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="n"&gt;branch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;commits&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;branch&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;received commit from branch: {0!r}&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;branch&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;branch&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;master&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Initiating master repo sync&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;pull&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;publish&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Finished publishing&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Received:: {0}&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;The uWSGI configuration files provided assume the gitpost script is located in:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
/var/www/$fqdn/utils
&lt;/pre&gt;
&lt;p&gt;And that the created virtualenv is located in:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
/var/www/$fqdn/env
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="final-steps"&gt;
&lt;h2&gt;Final Steps&lt;/h2&gt;
&lt;p&gt;The last thing you need to do is checkout your git repository into the docroot
directory. In our examples, this would be /var/www/$fqdn. As I mentioned before,
I store all relevant files in my repository.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;git clone git@bitbucket.org:username/reponame.git /var/www/&lt;span class="nv"&gt;$fqdn&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="evaluation"&gt;
&lt;h2&gt;Evaluation&lt;/h2&gt;
&lt;p&gt;I've found the following method to be quite low maintenance. After setting up,
the workflow involves editing your local repo, then pushing the changes to
master.&lt;/p&gt;
&lt;p&gt;My blog and all modifications to the default pelican layout, Makefile, and the
supporting scripts/configurations covered here are available at my
public &lt;a class="reference external" href="http://git.jameskyle.org/blog-jameskyle"&gt;blog repository&lt;/a&gt; along with my pelicanconf and article organization.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="what-s-next"&gt;
&lt;h2&gt;What's Next&lt;/h2&gt;
&lt;p&gt;I'm using a modified &lt;a class="reference external" href="https://github.com/nvie/gitflow"&gt;git-flow&lt;/a&gt; work flow for my article posting where 'hotfixes'
are 'articles' and features are, well, features. I want to modify the plugin
to better reflect blog posting. For example, I'd like to&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;git blog article start deploy-pelican-with-bitbucket-service-hooks
&lt;span class="c"&gt;# create article&lt;/span&gt;
git blog article finish deploy-pelican-with-bitbucket-service-hooks
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If I do make those adaptations, it'll certainly be worthy of a followup post.&lt;/p&gt;
&lt;p&gt;I'm also working on a management script that automates the steps above. For
example, configuring a new application might look like&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;./manage setup
What is your blog&lt;span class="s1"&gt;&amp;#39;s fqdn? &amp;gt; blog.jameskyle.org&lt;/span&gt;
&lt;span class="s1"&gt;What is your blog&amp;#39;&lt;/span&gt;s git repository? &amp;gt; http://git.jameskyle.org/blog-jameskyle
Checking out blog-jameskyle into /var/www/blog.jameskyle.org.....
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And so on.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="external-links"&gt;
&lt;h2&gt;External Links&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://blog.getpelican.com"&gt;Pelican&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://wordpress.org"&gt;Wordpress&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://docutils.sourceforge.net/rst.html"&gt;reST&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://git-scm.com"&gt;Git&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.red-sweater.com/marsedit/"&gt;MarsEdit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://bitbucket.org"&gt;Bitbucket&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://help.ubuntu.com/community/UFW"&gt;UFW&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/nvie/gitflow"&gt;git-flow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://git.jameskyle.org/blog-jameskyle"&gt;blog repository&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;table class="docutils footnote" frame="void" id="id3" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id1"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;The &lt;a class="reference external" href="http://docs.getpelican.com/en/3.0/importer.html"&gt;Pelican documentation&lt;/a&gt; covers this.
The import worked very well for me.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
</summary><category term="administration"></category><category term="debian"></category><category term="howtos"></category><category term="python"></category><category term="pelican"></category><category term="bitbucket"></category></entry><entry><title>Configuring OpenSwan IPSec Server</title><link href="http://blog.jameskyle.org/2012/07/configuring-openswan-ipsec-server" rel="alternate"></link><updated>2012-07-18T15:06:00-07:00</updated><author><name>James A. Kyle</name></author><id>tag:blog.jameskyle.org,2012-07-18:2012/07/configuring-openswan-ipsec-server</id><summary type="html">&lt;div class="section" id="introduction"&gt;
&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;The intent of this article is to walk through the installation,
configuration, and general debugging of OpenSwan based IPSec tunnels.
Though primarily focused on Ubuntu &amp;amp; Debian systems, non-package
management portions should apply generally.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="installation-initial-configuration"&gt;
&lt;h2&gt;Installation &amp;amp; Initial Configuration&lt;/h2&gt;
&lt;p&gt;We install using apt-get or aptitude.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;% apt-get install openswan
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For a basic PSK (Private Shared Key) configuration, there are two main
files we need to modify. The first is the configuration file,
/etc/ipsec.conf. The second is the ipsec secrets file where the PSK is
stored in /etc/ipsec.secrets.&lt;/p&gt;
&lt;div class="section" id="the-ipsec-conf-file"&gt;
&lt;h3&gt;The ipsec.conf file&lt;/h3&gt;
&lt;p&gt;There are two main sections to the ipsec configuration file. The
configuration setup section &amp;amp; the connection section.&lt;/p&gt;
&lt;div class="section" id="the-configuration-setup-section"&gt;
&lt;h4&gt;The configuration setup section&lt;/h4&gt;
&lt;p&gt;The configuration setup section begins by declaring&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;config setup
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;. The 'virtual_private 'option declares which subnets should be allowed
through the tunnel and which should be excluded. Typically, you'll wish
to exclude any networks that overlap with your private LAN.&lt;/p&gt;
&lt;p&gt;Networks are allowed by specifying the internet protocol version and the
CIDR of the allowed network. Networks are excluded by prepending the
bang symbol, '!', to the CIDR.&lt;/p&gt;
&lt;p&gt;Assuming a private network of 10.1.1.1 on a /24 network, the setup
configuration would look something like...&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;config setup
    plutoopts=&amp;quot;--perpeerlog&amp;quot;
    virtual_private=%v4:172.16.0.0/12,%v4:192.168.0.0/16,%v4:10.0.0.0/8,%v4:!10.1.1.0/24
    protostack=auto
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If either end of the tunnel is being nat'd, it may be necessary to add
the nat_traversal work around to the config setup section.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;nat_traversal=yes
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The plutoopts specified create a log for each peer that connects. The
protostack specifies which kernel protocol to use. 'auto' is generally
fine. However, if you wish to apply firewall rules to traffic coming
over the tunnel, you may wan to look into the KLIPS protocol as it
creates a unique interface for tunnel traffic, greatly reducing the
complexity of your firewall scripts.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-connection-configuration-section"&gt;
&lt;h4&gt;The connection configuration section&lt;/h4&gt;
&lt;p&gt;The connection configuration section begins with the declaration of the
'conn' keyword followed by an arbitrary connection label. An example
configuration might look like...&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;conn State-Secrets
    type=tunnel
    authby=secret
    auto=start
    pfs=no
    ike=aes256-sha1;modp1024!
    phase2alg=aes256-sha1;modp1024
    aggrmode=no    left=10.1.1.1
    right=5.5.5.5    leftsubnet=10.1.1.0/24
    rightsubnet=172.16.0.0/12
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We'll walk through each of the above connection options. It is important
to note that though the protocol allows for client negotiation of most
of these parameters with the server, in practice I've found explicitly
setting them to conform to the remote servers specifications produces
the most reliable results. If you are acting as the client, without
control of the server, obtaining a thorough specification document that
lists phase1 and phase2 algorithms can be quite the time saver. Such a
document for the above configuration might look like&lt;/p&gt;
&lt;table border="1" class="docutils"&gt;
&lt;caption&gt;Configuration Table&lt;/caption&gt;
&lt;colgroup&gt;
&lt;col width="61%" /&gt;
&lt;col width="39%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;Configuration Option&lt;/th&gt;
&lt;th class="head"&gt;Configuration Value&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;Athentication Method&lt;/td&gt;
&lt;td&gt;Pre Shared Key&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Phase 1 Encryption Scheme&lt;/td&gt;
&lt;td&gt;IKE&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Phase 1 DH Group&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Encryption Algorithm&lt;/td&gt;
&lt;td&gt;AES/256&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Hashing Algorithm&lt;/td&gt;
&lt;td&gt;SHA-1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Main or Aggressive Mode&lt;/td&gt;
&lt;td&gt;Main Mode&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Phase 1 Lifetime&lt;/td&gt;
&lt;td&gt;1440&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Phase 2 Encapsulation&lt;/td&gt;
&lt;td&gt;ESP&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Phase 2 Encryption Algorithm&lt;/td&gt;
&lt;td&gt;AES/256&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Phase 2 Authentication Algorithm&lt;/td&gt;
&lt;td&gt;SHA&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Phase 2 Perfect Forward Secrecy&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Phase 2 Lifetime&lt;/td&gt;
&lt;td&gt;3600&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Key Exchange for Subnets&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Let's walk through each of the options, look at their corresponding
value from our document, and clarify its use.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;type=tunnel
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This declares the type of connection to be formed. Since we're
configuring an ipsec tunnel, we specify 'tunnel' (I know, very
original).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;authby=secret
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This option declares the type of authentication scheme to use. IPSec
supports several different authentication schemes. 'secret' is used due
to our specification document specifying a type of &amp;quot;Pre Shared Key&amp;quot;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;auto=start
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;There's no corresponding document value for this setting. It specifies
that the ipsec tunnel should be started and routes created when the
ipsec daemon itself starts.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;pfs=no
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This value comes from our documents PFS setting.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;ike=aes256-sha1;modp1024!
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is a combination of several values in our document. It specifies
the phase 1 encryption scheme, the hashing algorithm, and the
diffie-hellman group. The modp1024 is for Diffie-Hellman 2. Why 'modp'
instead of dh? DH2 is a 1028 bit encryption algorithm that modulo's a
prime number, e.g. modp1028. See RFC 5114 for details or the wiki page
on diffie hellmann, if interested.&lt;/p&gt;
&lt;p&gt;The bang symbol, !, specifies the connection shoudl be formed in strict
mode. Technically, this is the default. However, at some point (version
wise) it was not being properly applied and it doesn't hurt.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;phase2alg=aes256-sha1;modp1024
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is a combination of several values in our document. It specifies
the phase 2 encryption scheme, the hashing algorithm, and the
diffie-hellman group just like the ike parameter.&lt;/p&gt;
&lt;p&gt;For further information on valid parameters for the ike and phase2alg
variables, please see the ipsec.conf man page.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;aggrmode=no
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Enables or disables Aggressive Mode. Agressive Mode is almost &lt;em&gt;never&lt;/em&gt;
needed and 'no' is the default. However, I've included it for clarity.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;left=10.1.1.1
right=5.5.5.5
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The 'left' and &amp;amp;39;right' arguments specify details about the two end
points of the tunnel. Which is used for which endpoint is arbitrary, but
many used left to denote the 'local' endpoint and the right to denote
the 'remote' endpoing for mnemonic reasons. This &lt;em&gt;should&lt;/em&gt; be the ip of
the peer we're attempting to connect to.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;leftsubnet=10.1.1.0/24
rightsubnet=172.16.0.0/12
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;These are the subnets that are exposed by the tunnel. Again, left and
right is arbitrary. However, consistency is obviously required. Make
sure the subnet declaration matches its corresponding left/right
endpoing declaration.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="troubleshooting"&gt;
&lt;h2&gt;Troubleshooting&lt;/h2&gt;
&lt;p&gt;Configuration is normally the easy portion of setting up an ipsec
tunnel, it's normally the debugging that takes up the majority of time.
Particularly if dealing with heterogenous peers.&lt;/p&gt;
&lt;div class="section" id="pertinent-log-files"&gt;
&lt;h3&gt;Pertinent log files&lt;/h3&gt;
&lt;p&gt;These are the log files most likely to contain important information
about why a particular tunnel is not succeeding.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;/var/log/auth.log
/var/log/syslog
/var/log/pluto/peer/a/b/c/d/a.b.c.d.log
&lt;/pre&gt;&lt;/div&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The /var/log/auth.log is where logs on the authentication
transactions are, stored.&lt;/li&gt;
&lt;li&gt;The /var/log/syslog is the system log, it's always good to check here
for any startup or general errors.&lt;/li&gt;
&lt;li&gt;/var/log/pluto/peer/a/b/c/d/a.b.c.d.log file is the per peer pluto
log. You can find some of the startup and shutdown information in
here.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="utilities"&gt;
&lt;h3&gt;Utilities&lt;/h3&gt;
&lt;p&gt;The main utilities to use are&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;tcpdump&lt;/li&gt;
&lt;li&gt;ip&lt;/li&gt;
&lt;li&gt;ipsec&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="tcpdump"&gt;
&lt;h4&gt;tcpdump&lt;/h4&gt;
&lt;p&gt;Since the traffic is encrypted, you can only track the &amp;quot;flow&amp;quot; of the
ipsec transaction to ensure all packets are reaching their destination
and routing is working as expected. However, seeing the packet flow can
be very informative.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="ip"&gt;
&lt;h4&gt;ip&lt;/h4&gt;
&lt;p&gt;The ip tool is used to ensure that the needed routes have been crated.
Alternatively, you could use something like netstat.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="ipsec"&gt;
&lt;h4&gt;ipsec&lt;/h4&gt;
&lt;p&gt;Read the man page for complete information, but the most used switch is
the status command. We configured our example connection for 'auto'. To
retrieve the status of all auto configured connections, you execute&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;% ipsec auto --status
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When debugging, I find it very useful to poll the output of this command
in one second intervales. For example,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;% &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;((&lt;/span&gt; &lt;span class="p"&gt;;;&lt;/span&gt; &lt;span class="o"&gt;))&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="k"&gt;do&lt;/span&gt; ipsec auto --status&lt;span class="p"&gt;;&lt;/span&gt; sleep 1&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;done&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The astute may notice the 'watch' command was made for this. I
experienced glitches on some systems with ipsec status and the watch
command. YMMV.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-ipsec-secrets-file"&gt;
&lt;h4&gt;The ipsec.secrets file&lt;/h4&gt;
&lt;p&gt;The ipsec.secrets file takes the following format&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;leftid1 rightid1 : PSK &amp;quot;preshared key1&amp;quot;
leftid2 rightid2 : PSK &amp;quot;preshared key2&amp;quot;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The secrets file can have multiple entries. Of note, the combination of
the leftid1 + rightid1 must be unique for each tunnel in order for the
PSK lookup to succeed.&lt;/p&gt;
&lt;p&gt;If you're only managing a single ipsec tunnel, using the the special
catch all %any can work well. Such a config would look like this&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;%any %any : PSK &amp;quot;preshared key&amp;quot;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="gotchas-to-keep-an-eye-out-for"&gt;
&lt;h3&gt;'Gotchas' to keep an eye out for&lt;/h3&gt;
&lt;p&gt;There are a few problems that seem to come up over and over and over
again. I cover those here in brief along with ways to eliminate them as
suspects. . . or at least ways to &lt;em&gt;confirm&lt;/em&gt; if not completely eliminate.&lt;/p&gt;
&lt;div class="section" id="mismatched-peer-identities"&gt;
&lt;h4&gt;Mismatched Peer Identities&lt;/h4&gt;
&lt;p&gt;This comes up quite a bit. Keep an eye out for messages from the peer
like 'no proposal found for peer' or connections that make it through
phase 1, but fail to complete phase 2. Another way to verify is by
inspecting the status output. You'll find a line like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;10.1.1.0/24===10.1.1.1&amp;lt;10.1.1.1&amp;gt;[+S=C]...5.5.5.5&amp;lt;5.5.5.5&amp;gt;[+S=C]===172.16.0.0/12; erouted; eroute owner: #6
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That line indicates that the ips of the endpoints are being used as the
peer id. It also declares the subnet being exposed. The standard default
for peer id&amp;amp;39;s is the ip of the peer. However, this is not required.
Nor is it uncommon for it to be overridden by a remote admin. If you
suspect a peer id mismatch, the remote peer admin should be able to
provide you with her routers configuration.&lt;/p&gt;
&lt;p&gt;Peer id's &lt;em&gt;must&lt;/em&gt; match.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="mismatched-configurations"&gt;
&lt;h4&gt;Mismatched configurations&lt;/h4&gt;
&lt;p&gt;This is pretty vague. In the end, virtually &lt;em&gt;all&lt;/em&gt; connection problems
boil down to mismatched configurations. However, it still bears
mentioning as it is eminently worth it to go over configurations
repeatedly to ensure they match up.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</summary><category term="administration"></category><category term="debian"></category><category term="howtos"></category><category term="openswan"></category></entry><entry><title>A Boilerplate Comparison: Puppet</title><link href="http://blog.jameskyle.org/2012/07/puppet-boilerplate" rel="alternate"></link><updated>2012-07-15T15:20:00-07:00</updated><author><name>James A. Kyle</name></author><id>tag:blog.jameskyle.org,2012-07-15:2012/07/puppet-boilerplate</id><summary type="html">&lt;div class="section" id="introduction"&gt;
&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Here we cover the steps for deploying a package to a puppet agent/node.
Like with chef, we assume a working installation.&lt;/p&gt;
&lt;p&gt;Though I must take the opportunity to comment that the installation
process for puppet was ridiculously easy.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-ridiculously-easy-way"&gt;
&lt;h2&gt;The ridiculously easy way&lt;/h2&gt;
&lt;p&gt;Package installation can be performed completely through the console,
e.g. web ui, for puppet. To do so, you go to &lt;a class="reference external" href="https://puppetmaster.me.com"&gt;https://puppetmaster.me.com&lt;/a&gt;
and click 'Live Management' -&amp;gt; Advanced Tasks -&amp;gt; package tasks -&amp;gt;
Install. Type in the package name you wish to install and click 'Run'.&lt;/p&gt;
&lt;p&gt;That's it. Done.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-not-quite-ridiculously-easy-way"&gt;
&lt;h2&gt;The not quite ridiculously easy way&lt;/h2&gt;
&lt;p&gt;That seems almost too trivial. It's nice that the trivial tasks are
trivial to perform, but let's take a closer look at what it takes to
roll your own task and deploy it. It's more representative of how a
sysadmin will interact with the framework and seems more fair to chef.&lt;/p&gt;
&lt;div class="section" id="creating-a-module-from-scratch"&gt;
&lt;h3&gt;Creating a module from scratch&lt;/h3&gt;
&lt;p&gt;Puppet, like chef, can generate a module template. Puppet is very
community centric and sharing of modules is the default. As such, the
module template asks you to prepend your Puppet Forge username as it is
the best practice naming convention for shared modules. Like in our
previous walk through with chef, we're going to write a package for
installing tmux.&lt;/p&gt;
&lt;div class="section" id="create-the-package"&gt;
&lt;h4&gt;Create the package&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;% puppet module generate username-tmux
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You're rewarded with a directory like&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;Modulefile README     manifests  spec       tests
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="edit-modulefile"&gt;
&lt;h4&gt;Edit Modulefile&lt;/h4&gt;
&lt;p&gt;You should always edit the modulefile and enter pertinent information
such as version, license, description, etc.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="create-tmux-class"&gt;
&lt;h4&gt;Create tmux class&lt;/h4&gt;
&lt;p&gt;The business is in the init.pp file, we edit that and add our package
requirement.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="n"&gt;tmux&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;package&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;tmux&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="add-class-to-a-node"&gt;
&lt;h4&gt;Add class to a node&lt;/h4&gt;
&lt;p&gt;Finally, to apply the role to a node you add it to the nodes definition
in the site.pp file. This isn't a hard, fast rule. Puppet can pull node
configuration from external sources. Puppet Enterprise console provides
this and so you could use the web frontend to add the class to your list
in console and then apply it to a group. You could also provide your own
backend.&lt;/p&gt;
&lt;p&gt;However, the &amp;quot;basic&amp;quot; basic, out the box puppet involves editing the
site.pp, so we&amp;amp;squot;ll add it to the default node here&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;node&lt;/span&gt; &lt;span class="n"&gt;default&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;tmux&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We also commit the package to our repository.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;% git add modules/username-tmux manifests/site.pp
% git commit modules/username-tmux manifests/site.pp -m &lt;span class="s2"&gt;&amp;quot;added tmux module&amp;quot;&lt;/span&gt;
% git push origin master
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="comments"&gt;
&lt;h3&gt;Comments&lt;/h3&gt;
&lt;p&gt;If you noticed, we didn't cover how you upload your module and manifest
like we did in the &lt;a class="reference external" href="/2012/07/infrastructure-automation-a-boilerplate-comparison/"&gt;Chef&lt;/a&gt; article. That's because puppet doesn't have a
management tool for interacting with the puppet master like the knife
tool. Deployment is left up to the administrator. Some common methods
are using cap deploy, commit hooks, or pulling files down in a cron from
the repo.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="/2012/07/infrastructure-automation-a-boilerplate-comparison/"&gt;Previous Article&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</summary><category term="administration"></category><category term="chef"></category><category term="devops"></category><category term="infrastructure"></category><category term="linux"></category><category term="puppet"></category></entry><entry><title>Infrastructure Automation: A Boilerplate Comparison</title><link href="http://blog.jameskyle.org/2012/07/infrastructure-automation-a-boilerplate-comparison" rel="alternate"></link><updated>2012-07-08T11:33:00-07:00</updated><author><name>James A. Kyle</name></author><id>tag:blog.jameskyle.org,2012-07-08:2012/07/infrastructure-automation-a-boilerplate-comparison</id><summary type="html">&lt;div class="section" id="introduction"&gt;
&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;We've been using &lt;a class="reference external" href="http://opscode.com"&gt;Chef&lt;/a&gt; to deploy our infrastructure for a while now.
One of the main sticking points we've run into is the barrier to entry
for develoepers as a result of the boiler plate required to perform a
simple deployment task. Our ideal framework would be equally accessible
to the ops, who use the system every day, and development teams, who
know their application environments best.&lt;/p&gt;
&lt;p&gt;In that spirit, this article compares the boilerplate necessary to
perform a simple configuraiton task. Since one of the most common, and
straight forward, needs is installing a system package we'll use that as
an example. This is not intended to demonstrate that one framework is
overall &amp;quot;better&amp;quot; than another. Rather it's merely a comparison of
workflows.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="contenders"&gt;
&lt;h2&gt;Contenders&lt;/h2&gt;
&lt;p&gt;The following frameworks are covered:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://opscode.com"&gt;Chef&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://puppetlabs.com/"&gt;Puppet&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="article-series-format"&gt;
&lt;h2&gt;Article Series Format&lt;/h2&gt;
&lt;p&gt;I already have a chef environment ready to go. So first, we'll cover
that workflow. In subsequent posts, I'll cover the other frameworks.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-objective"&gt;
&lt;h2&gt;The Objective&lt;/h2&gt;
&lt;p&gt;To install the tmux package.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-chef-workflow"&gt;
&lt;h2&gt;The Chef Workflow&lt;/h2&gt;
&lt;p&gt;For the purposes of our example, we assume &lt;a class="reference external" href="http://wiki.opscode.com/display/chef/Chef+Server"&gt;Chef Server&lt;/a&gt; is already
configured and working. We also assume a working repository is already
created and the users credentials/environment is set up.&lt;/p&gt;
&lt;div class="section" id="step-one-create-a-cookbook"&gt;
&lt;h3&gt;Step One: Create a Cookbook&lt;/h3&gt;
&lt;p&gt;First, we create the chef cookbook.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
% knife cookbook create tmux
** Creating cookbook tmux
** Creating README for cookbook: tmux
** Creating metadata for cookbook: tmux
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="step-two-edit-the-default-recipe"&gt;
&lt;h3&gt;Step Two: Edit the Default Recipe&lt;/h3&gt;
&lt;p&gt;Next, we edit the package to perform the task we need. To do so, we open
the default recipe.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
% vim cookbooks/tmux/recipes/default.rb
&lt;/pre&gt;
&lt;p&gt;And add the following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;# add multiple case statements for other target platforms&lt;/span&gt;
&lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:platform&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
  &lt;span class="k"&gt;when&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;ubuntu&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;debian&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;package&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;tmux&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
      &lt;span class="n"&gt;action&lt;/span&gt; &lt;span class="ss"&gt;:install&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Though technically not required, updating the metadata is certainly best
practice.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
% vim cookbooks/tmux/metadata.rb
&lt;/pre&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;maintainer&lt;/span&gt;       &lt;span class="s2"&gt;&amp;quot;AT&amp;amp;T Foundry&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;maintainer_email&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;email@domain.com&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;license&lt;/span&gt;          &lt;span class="s2"&gt;&amp;quot;All rights reserved&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;description&lt;/span&gt;      &lt;span class="s2"&gt;&amp;quot;Installs/Configures tmux&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;long_description&lt;/span&gt; &lt;span class="no"&gt;IO&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;File&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;File&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dirname&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;__FILE__&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;README.md&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;version&lt;/span&gt;          &lt;span class="s2"&gt;&amp;quot;0.0.1&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="step-three-add-the-cookbook-to-your-repository"&gt;
&lt;h3&gt;Step Three: Add the Cookbook to Your Repository&lt;/h3&gt;
&lt;pre class="literal-block"&gt;
% git add cookbooks/tmux
% git commit cookbooks/tmux -m &amp;quot;Tmux package cookbook added&amp;quot;
% git pull origin master
% git push origin master
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="step-four-upload-cookbook-to-chef-server"&gt;
&lt;h3&gt;Step Four: Upload Cookbook to Chef Server&lt;/h3&gt;
&lt;pre class="literal-block"&gt;
% knife cookbook upload tmux
Uploading tmux
[0.0.1] upload complete
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="step-five-add-recipe-to-role"&gt;
&lt;h3&gt;Step Five: Add Recipe to Role&lt;/h3&gt;
&lt;p&gt;Next we need to add the recipe to a role. This may require the creation
of a new role. In that case, an additional creation, commit, upload is
required for the role.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
% vim roles/tmux.json
&lt;/pre&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;tmux&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;default_attributes&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;   &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;json_class&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Chef::Role&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;env_run_lists&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;   &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;run_list&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;recipe[tmux]&amp;quot;&lt;/span&gt;
  &lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;description&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Install Tmux&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;chef_type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;role&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;override_attributes&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;   &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Commit &amp;amp; Upload the role:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
% knife role from file roles/tmux.json
% git commit roles/tmux.json -m &amp;quot;added tmux role&amp;quot;
% git push origin master
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="step-six-apply-role-to-server"&gt;
&lt;h3&gt;Step Six: Apply Role to Server&lt;/h3&gt;
&lt;p&gt;The final step is applying the role to a server.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
knife bootstrap 10.4.54.9 -i ~/.ssh/keys/jk328n_rsa -d ubuntu12.04-gems-att \
  -x ubuntu --sudo -N jkyle-test -E foundry-services_pao1 -r 'role[tmux]'
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="followup-articles"&gt;
&lt;h2&gt;Followup Articles&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="/2012/07/puppet-boilerplate/"&gt;Puppet Boiler Plate&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</summary><category term="administration"></category><category term="devops"></category><category term="infrastructure"></category><category term="linux"></category></entry><entry><title>Chef Alternatives for Debian/Ubuntu</title><link href="http://blog.jameskyle.org/2012/02/chef-alternatives-for-debian-ubuntu" rel="alternate"></link><updated>2012-02-05T10:32:00-08:00</updated><author><name>James A. Kyle</name></author><id>tag:blog.jameskyle.org,2012-02-05:2012/02/chef-alternatives-for-debian-ubuntu</id><summary type="html">&lt;p&gt;An update-alternatives script for chef. Currently only sets up a version
installed in the 1.9.1 gems directory, but extendable to any version
easily enough.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#!/bin/bash&lt;/span&gt;
&lt;span class="nv"&gt;RUBY_VERSION&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;1.9.1
&lt;span class="nv"&gt;CHEF_VERSION&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;0.10.8
&lt;span class="nv"&gt;GEM_ROOT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/var/lib/gems/&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;RUBY_VERSION&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;/gems/chef-&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;CHEF_VERSION&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
update-alternatives &lt;span class="se"&gt;\&lt;/span&gt;
   --install /usr/bin/chef-client chef &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;GEM_ROOT&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;/bin/chef-client &lt;span class="m"&gt;500&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
   --slave /usr/bin/chef-solo chef-solo &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;GEM_ROOT&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;/bin/chef-solo &lt;span class="se"&gt;\&lt;/span&gt;
   --slave /usr/bin/knife knife &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;GEM_ROOT&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;/bin/knife &lt;span class="se"&gt;\&lt;/span&gt;
   --slave /usr/bin/shef shef  &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;GEM_ROOT&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;/bin/shef
&lt;/pre&gt;&lt;/div&gt;
</summary><category term="administration"></category><category term="debian"></category><category term="linux"></category><category term="ubuntu"></category></entry><entry><title>Ruby Alternatives for Debian/Ubuntu</title><link href="http://blog.jameskyle.org/2012/02/ruby-alternatives-for-debianubuntu" rel="alternate"></link><updated>2012-02-05T10:14:00-08:00</updated><author><name>James A. Kyle</name></author><id>tag:blog.jameskyle.org,2012-02-05:2012/02/ruby-alternatives-for-debianubuntu</id><summary type="html">&lt;p&gt;A quick update-alternatives script for ruby versions on debian based
systems. It only includes the ruby binaries, man pages, etc. included in
the ruby1.8 and ruby1.9.1 debs. It's defaults to '1.9' when in auto
mode.&lt;/p&gt;
&lt;p&gt;After running the script, you can switch between ruby version via&lt;/p&gt;
&lt;pre class="literal-block"&gt;
% update-alternatives --config ruby
&lt;/pre&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#!/bin/bash&lt;/span&gt;
&lt;span class="nv"&gt;RUBY_VERSION&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;1.9.1
update-alternatives &lt;span class="se"&gt;\&lt;/span&gt;
   --install /usr/bin/ruby ruby /usr/bin/ruby&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;RUBY_VERSION&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="m"&gt;500&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
   --slave /usr/bin/erb erb /usr/bin/erb&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;RUBY_VERSION&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
   --slave /usr/bin/rake rake /usr/bin/rake&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;RUBY_VERSION&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
   --slave /usr/bin/irb irb /usr/bin/irb&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;RUBY_VERSION&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
   --slave /usr/bin/gem gem /usr/bin/gem&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;RUBY_VERSION&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
   --slave /usr/bin/rdoc rdoc /usr/bin/rdoc&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;RUBY_VERSION&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
   --slave /usr/bin/testrb testrb /usr/bin/testrb&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;RUBY_VERSION&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
   --slave /usr/share/man/man1/rdoc.1.gz rdoc.1.gz &lt;span class="se"&gt;\&lt;/span&gt;
       /usr/share/man/man1/rdoc&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;RUBY_VERSION&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;.1.gz &lt;span class="se"&gt;\&lt;/span&gt;
   --slave /usr/share/man/man1/testrb.1.gz testrb.1.gz &lt;span class="se"&gt;\&lt;/span&gt;
       /usr/share/man/man1/testrb&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;RUBY_VERSION&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;.1.gz &lt;span class="se"&gt;\&lt;/span&gt;
   --slave /usr/share/man/man1/rake.1.gz rake.1.gz &lt;span class="se"&gt;\&lt;/span&gt;
       /usr/share/man/man1/rake&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;RUBY_VERSION&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;.1.gz &lt;span class="se"&gt;\&lt;/span&gt;
   --slave /usr/share/man/man1/irb.1.gz irb.1.gz &lt;span class="se"&gt;\&lt;/span&gt;
       /usr/share/man/man1/irb&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;RUBY_VERSION&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;.1.gz &lt;span class="se"&gt;\&lt;/span&gt;
   --slave /usr/share/man/man1/erb.1.gz erb.1.gz &lt;span class="se"&gt;\&lt;/span&gt;
       /usr/share/man/man1/erb&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;RUBY_VERSION&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;.1.gz &lt;span class="se"&gt;\&lt;/span&gt;
   --slave /usr/share/man/man1/gem.1.gz gem.1.gz &lt;span class="se"&gt;\&lt;/span&gt;
       /usr/share/man/man1/gem&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;RUBY_VERSION&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;.1.gz &lt;span class="se"&gt;\&lt;/span&gt;
   --slave /usr/share/man/man1/ruby.1.gz ruby.1.gz &lt;span class="se"&gt;\&lt;/span&gt;
           /usr/share/man/man1/ruby&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;RUBY_VERSION&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;.1.gz &lt;span class="se"&gt;\&lt;/span&gt;
   --slave /usr/share/menu/ruby ruby_menu /usr/share/menu/ruby&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;RUBY_VERSION&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;

   &lt;span class="nv"&gt;RUBY_VERSION&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;1.8
   update-alternatives &lt;span class="se"&gt;\&lt;/span&gt;
   --install /usr/bin/ruby ruby /usr/bin/ruby&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;RUBY_VERSION&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="m"&gt;400&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
   --slave /usr/bin/erb erb /usr/bin/erb&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;RUBY_VERSION&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
   --slave /usr/bin/irb irb /usr/bin/irb&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;RUBY_VERSION&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
   --slave /usr/bin/rdoc rdoc /usr/bin/rdoc&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;RUBY_VERSION&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
   --slave /usr/bin/testrb testrb /usr/bin/testrb&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;RUBY_VERSION&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
   --slave /usr/share/man/man1/rdoc.1.gz rdoc.1.gz &lt;span class="se"&gt;\&lt;/span&gt;
       /usr/share/man/man1/rdoc&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;RUBY_VERSION&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;.1.gz &lt;span class="se"&gt;\&lt;/span&gt;
   --slave /usr/share/man/man1/testrb.1.gz testrb.1.gz &lt;span class="se"&gt;\&lt;/span&gt;
       /usr/share/man/man1/testrb&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;RUBY_VERSION&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;.1.gz &lt;span class="se"&gt;\&lt;/span&gt;
   --slave /usr/share/man/man1/irb.1.gz irb.1.gz &lt;span class="se"&gt;\&lt;/span&gt;
       /usr/share/man/man1/irb&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;RUBY_VERSION&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;.1.gz &lt;span class="se"&gt;\&lt;/span&gt;
   --slave /usr/share/man/man1/erb.1.gz erb.1.gz &lt;span class="se"&gt;\&lt;/span&gt;
       /usr/share/man/man1/erb&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;RUBY_VERSION&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;.1.gz &lt;span class="se"&gt;\&lt;/span&gt;
   --slave /usr/share/man/man1/ruby.1.gz ruby.1.gz &lt;span class="se"&gt;\&lt;/span&gt;
       /usr/share/man/man1/ruby&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;RUBY_VERSION&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;.1.gz &lt;span class="se"&gt;\&lt;/span&gt;
   --slave /usr/share/menu/ruby ruby_menu &lt;span class="se"&gt;\&lt;/span&gt;
       /usr/share/menu/ruby&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;RUBY_VERSION&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
</summary><category term="administration"></category><category term="debian"></category><category term="linux"></category></entry><entry><title>Adding Syntactic Sugar to Python dicts</title><link href="http://blog.jameskyle.org/2012/01/adding-syntactic-sugar-to-python-dicts" rel="alternate"></link><updated>2012-01-28T16:44:00-08:00</updated><author><name>James A. Kyle</name></author><id>tag:blog.jameskyle.org,2012-01-28:2012/01/adding-syntactic-sugar-to-python-dicts</id><summary type="html">&lt;div class="section" id="snippet"&gt;
&lt;h2&gt;Snippet&lt;/h2&gt;
&lt;p&gt;This little snippet allows dict keys to be accessed like attributes. For
example&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;CustomDict&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;foo&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;bar&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;bah&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;baz&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;bot&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Can be accessed like&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;foo&lt;/span&gt; &lt;span class="c"&gt;# returns &amp;quot;bar&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bah&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;baz&lt;/span&gt; &lt;span class="c"&gt;# returns &amp;quot;bot&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In addition to the hash key lookups.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CustomDict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;copy&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__dict__&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;iteritems&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;CustomDict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="nb"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__setitem__&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
</summary><category term="programming"></category><category term="python"></category><category term="recipes"></category></entry><entry><title>Improving ScriptingBridge Performance Using NSProxy &amp; NSCache</title><link href="http://blog.jameskyle.org/2011/09/scriptingbridge-caching" rel="alternate"></link><updated>2011-09-10T12:55:00-07:00</updated><author><name>James A. Kyle</name></author><id>tag:blog.jameskyle.org,2011-09-10:2011/09/scriptingbridge-caching</id><summary type="html">&lt;div class="section" id="the-problem"&gt;
&lt;h2&gt;The Problem&lt;/h2&gt;
&lt;p&gt;The ScriptingBridge API is an excellent way to tap into the internals of
OS X applications with little effort. However, it does have its
drawbacks. Not the least of which being &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Lazy_evaluation"&gt;lazy evaluation&lt;/a&gt; of
&lt;a class="reference external" href="http://developer.apple.com/library/mac/#documentation/Cocoa/Reference/SBObject_Class/SBObject/SBObject.html"&gt;SBObject's&lt;/a&gt; attributes. Lazy evaluation makes the retrieval of
SBObject's very efficient since all of the objects attributes are not
retrieved at the same time. However, if you need to sort those objects
by a particular key (say the name of a movie) the latency of
ScriptingBridge becomes glaringly obvious to the point of becoming
unusable.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-solution"&gt;
&lt;h2&gt;The Solution&lt;/h2&gt;
&lt;p&gt;We can solve this problem using a combination of &lt;a class="reference external" href="http://developer.apple.com/library/mac/#documentation/Cocoa/Reference/NSCache_Class/Reference/Reference.html"&gt;NSCache&lt;/a&gt; and
&lt;a class="reference external" href="http://developer.apple.com/library/mac/#documentation/Cocoa/Reference/Foundation/Classes/NSProxy_Class/Reference/Reference.html"&gt;NSProxy&lt;/a&gt;. NSProxy provides a relatively simple API for wrapping
&lt;a class="reference external" href="http://developer.apple.com/library/mac/#documentation/Cocoa/Reference/Foundation/Classes/NSObject_Class/Reference/Reference.html"&gt;NSObject's&lt;/a&gt; and intercepting &lt;a class="reference external" href="http://developer.apple.com/library/mac/#documentation/Cocoa/Conceptual/ObjCRuntimeGuide/Articles/ocrtHowMessagingWorks.html"&gt;messages&lt;/a&gt; sent to them. By doing so,
you can interecept the message and if it's been previously called,
retrieve the value from an NSCache.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-implementation"&gt;
&lt;h2&gt;The Implementation&lt;/h2&gt;
&lt;p&gt;For our example, we'll use iTunes. To do so we first have to generate an
iTunes objc header file using &lt;a class="reference external" href="http://developer.apple.com/library/mac/#documentation/Cocoa/Conceptual/ScriptingBridgeConcepts/UsingScriptingBridge/UsingScriptingBridge.html"&gt;sdef and sdp&lt;/a&gt;.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
% sdef /Applications/iTunes.app | sdp -fh --basename iTunes
&lt;/pre&gt;
&lt;p&gt;This produces a header file called &amp;quot;iTunes.h&amp;quot; that we include in our
project to instantiate the iTunes &lt;a class="reference external" href="http://developer.apple.com/library/mac/#documentation/Cocoa/Reference/SBApplication_Class/SBApplication/SBApplication.html"&gt;SBApplication&lt;/a&gt; object.&lt;/p&gt;
&lt;p&gt;This is what our source looks like so far:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="bp"&gt;NSArray&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nf"&gt;getTracks&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;iTunesApplication&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;itunes&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;itunes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;SBApplication&lt;/span&gt; &lt;span class="nl"&gt;applicationWithBundleIdentifier&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;@&amp;quot;com.apple.iTunes&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;      &lt;span class="c1"&gt;// Retrieve a list of movies in our iTunes library.&lt;/span&gt;
  &lt;span class="bp"&gt;NSArray&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;sources&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="n"&gt;itunes&lt;/span&gt; &lt;span class="n"&gt;sources&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
  &lt;span class="bp"&gt;NSPredicate&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;predicate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="bp"&gt;NSPredicate&lt;/span&gt;
                      &lt;span class="nl"&gt;predicateWithFormat&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;@&amp;quot;name == &amp;#39;Library&amp;#39; &amp;amp;&amp;amp; kind == %i&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                      &lt;span class="n"&gt;iTunesESrcLibrary&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;      &lt;span class="bp"&gt;NSArray&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;libs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;sources&lt;/span&gt; &lt;span class="nl"&gt;filteredArrayUsingPredicate&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;predicate&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;      &lt;span class="bp"&gt;NSMutableArray&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;theMovies&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="bp"&gt;NSMutableArray&lt;/span&gt; &lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
  &lt;span class="bp"&gt;NSArray&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;playlists&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="bp"&gt;NSArray&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;movieLists&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;      &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;iTunesSource&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;source&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;libs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;playlists&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;source&lt;/span&gt; &lt;span class="n"&gt;playlists&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="n"&gt;movieLists&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;playlists&lt;/span&gt; &lt;span class="nl"&gt;filteredArrayUsingPredicate&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="bp"&gt;NSPredicate&lt;/span&gt; &lt;span class="nl"&gt;predicateWithFormat&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;@&amp;quot;name == &amp;#39;Movies&amp;#39;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]];&lt;/span&gt;        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;iTunesPlaylist&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;playlist&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;movieLists&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;iTunesTrack&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;track&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;playlist&lt;/span&gt; &lt;span class="n"&gt;tracks&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;theMovies&lt;/span&gt; &lt;span class="nl"&gt;addObject&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;track&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;theMovies&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="the-itunestrackproxy-object"&gt;
&lt;h2&gt;The iTunesTrackProxy Object&lt;/h2&gt;
&lt;p&gt;Not terribly interesting, but now to the fun part. We create a proxy
object to wrap the tracks we retrieved in our getTracks method and act
as an intermediary to any requests for track attributes.&lt;/p&gt;
&lt;p&gt;For our purposes we need to override three of the NSProxy objects
methods to handle &lt;a class="reference external" href="http://developer.apple.com/library/mac/#documentation/Cocoa/Reference/Foundation/Classes/NSInvocation_Class/Reference/Reference.html"&gt;NSInvocations&lt;/a&gt; sent to the track object.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;ul class="first"&gt;
&lt;li&gt;(NSMethodSignature *)methodSignatureForSelector:(SEL)sel&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;ul class="first"&gt;
&lt;li&gt;(void)forwardInvocation:(NSInvocation *)invocation&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;ul class="first"&gt;
&lt;li&gt;(BOOL)respondsToSelector:(SEL)aSelector&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We want to respond to all the same methods that the original iTunesTrack
object does, so we simply pass the method to the proxies track object.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;BOOL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;respondsToSelector:&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;SEL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nv"&gt;aSelector&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;track&lt;/span&gt; &lt;span class="nl"&gt;respondsToSelector&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;aSelector&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We also want our object to transparantly behave just like a iTunesTrack
for method returns. So all method signatures will also be identical.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;NSMethodSignature&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;methodSignatureForSelector:&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;SEL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nv"&gt;sel&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="bp"&gt;NSMethodSignature&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;sig&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;sig&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;track&lt;/span&gt; &lt;span class="nl"&gt;methodSignatureForSelector&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;sel&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;sig&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="the-real-action"&gt;
&lt;h3&gt;The real action&lt;/h3&gt;
&lt;p&gt;The real action happens in the forwardInvocation. This is where we catch
message invocations intended for the iTunesTrack object and return the
values we want from the sources we want (e.g. NSCache). Since I'm not
covering the uninteresting boiler plate code in detail, here's our
iTunesTrackProxy header and implementation source so far:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;#import     @class iTunesTrack;    @interface iTunesTrackProxy : NSProxy {&lt;/span&gt;
  &lt;span class="k"&gt;@private&lt;/span&gt;
  &lt;span class="n"&gt;iTunesTrack&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;_track&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="bp"&gt;NSCache&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;_cache&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nl"&gt;initWithTrack&lt;/span&gt;&lt;span class="p"&gt;:(&lt;/span&gt;&lt;span class="n"&gt;iTunesTrack&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;track&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;    &lt;span class="k"&gt;@property&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;readonly&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;iTunesTrack&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;track&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;@end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;#import &amp;quot;iTunesTrackProxy.h&amp;quot;&lt;/span&gt;
&lt;span class="cp"&gt;#import &amp;quot;iTunes.h&amp;quot;    @implementation iTunesTrackProxy    - (id)initWithTrack:(iTunesTrack *)track&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;_track&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;track&lt;/span&gt; &lt;span class="k"&gt;retain&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
  &lt;span class="n"&gt;_cache&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="bp"&gt;NSCache&lt;/span&gt; &lt;span class="n"&gt;alloc&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;init&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;dealloc&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;_track&lt;/span&gt; &lt;span class="k"&gt;release&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;_cache&lt;/span&gt; &lt;span class="k"&gt;release&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;super&lt;/span&gt; &lt;span class="n"&gt;dealloc&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;NSMethodSignature&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nl"&gt;methodSignatureForSelector&lt;/span&gt;&lt;span class="p"&gt;:(&lt;/span&gt;&lt;span class="kt"&gt;SEL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;sel&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="bp"&gt;NSMethodSignature&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;sig&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;sig&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;track&lt;/span&gt; &lt;span class="nl"&gt;methodSignatureForSelector&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;sel&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;sig&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;    &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;BOOL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nl"&gt;respondsToSelector&lt;/span&gt;&lt;span class="p"&gt;:(&lt;/span&gt;&lt;span class="kt"&gt;SEL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;aSelector&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;track&lt;/span&gt; &lt;span class="nl"&gt;respondsToSelector&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;aSelector&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nl"&gt;forwardInvocation&lt;/span&gt;&lt;span class="p"&gt;:(&lt;/span&gt;&lt;span class="bp"&gt;NSInvocation&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;invocation&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;    &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;@synthesize&lt;/span&gt; &lt;span class="n"&gt;track&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;_track&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;@end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="first-attempt-at-the-forwardinvocation-method"&gt;
&lt;h3&gt;First attempt at the forwardInvocation method&lt;/h3&gt;
&lt;p&gt;A naive first attempt might look similar to this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;forwardInvocation:&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;NSInvocation&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nv"&gt;invocation&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Using the string representation of the selector as the NSCache key.&lt;/span&gt;
  &lt;span class="bp"&gt;NSString&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;NSStringFromSelector&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;invocation&lt;/span&gt; &lt;span class="n"&gt;selector&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;      &lt;span class="c1"&gt;// First check and see if we&amp;#39;ve already cached the object&lt;/span&gt;
  &lt;span class="kt"&gt;id&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;_cache&lt;/span&gt; &lt;span class="nl"&gt;objectForKey&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;      &lt;span class="c1"&gt;// If the object is cached, use it as the returnValue&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;invocation&lt;/span&gt; &lt;span class="nl"&gt;setReturnValue&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;       &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// if not cached, forward it to the track object, then cache the return&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;invocation&lt;/span&gt; &lt;span class="nl"&gt;invokeWithTarget&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;track&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;invocation&lt;/span&gt; &lt;span class="nl"&gt;getReturnValue&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;_cache&lt;/span&gt; &lt;span class="nl"&gt;setObject&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="nl"&gt;forKey&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Simple enough. However, it makes a critically flawed
assumption.Specifically that all method invocations to the iTunesTrack
object return NSObjects. A quick glance at the iTunes.h header proves
otherwise and many return primitive types. Just to keep everything
interesting, NSCache only stores NSObjects, thus we have to transform
the primitive return types to an NSObject when storing and retrieving
these values.&lt;/p&gt;
&lt;p&gt;To resolve this oversight we create a few more methods.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;(void)setValueFromTrack:(NSInvocation *)invocation&lt;/li&gt;
&lt;li&gt;(void)setValueFromCacheObj:(id)obj invocation:(NSInvocation *)inv&lt;/li&gt;
&lt;li&gt;(id)mapBuffer:(voidPtr)buffer type:(NSString *)type&lt;/li&gt;
&lt;li&gt;(void *)mapObject:(id)obj key:(NSString *)key&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="final-implementation"&gt;
&lt;h3&gt;Final implementation&lt;/h3&gt;
&lt;p&gt;Let's walk through each of our new methods and then the final
implementation of the forwardInvocation method.&lt;/p&gt;
&lt;div class="section" id="setvaluefromtrack"&gt;
&lt;h4&gt;setValueFromTrack&lt;/h4&gt;
&lt;p&gt;If the result is not found in the cache, this method retrieves it from
track itself. If it's an NSObject, it stores the value directly in the
NSCache. If it's a primitive, it passes the value to the mapBuffer:type
method to retrieve an appropriate object for storing in the NSCache.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;setValueFromTrack:&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;NSInvocation&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nv"&gt;invocation&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="bp"&gt;NSString&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;NSStringFromSelector&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;invocation&lt;/span&gt; &lt;span class="n"&gt;selector&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;      &lt;span class="bp"&gt;NSString&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;returnType&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="bp"&gt;NSString&lt;/span&gt;
                          &lt;span class="nl"&gt;stringWithUTF8String&lt;/span&gt;&lt;span class="p"&gt;:[[&lt;/span&gt;&lt;span class="n"&gt;invocation&lt;/span&gt; &lt;span class="n"&gt;methodSignature&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;methodReturnType&lt;/span&gt;&lt;span class="p"&gt;]];&lt;/span&gt;
  &lt;span class="kt"&gt;id&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;      &lt;span class="c1"&gt;// retrieve value from track object&lt;/span&gt;
  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;invocation&lt;/span&gt; &lt;span class="nl"&gt;invokeWithTarget&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;track&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;      &lt;span class="c1"&gt;// if object is of type NSObject.&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;returnType&lt;/span&gt; &lt;span class="nl"&gt;isEqualToString&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;@&amp;quot;@&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;invocation&lt;/span&gt; &lt;span class="nl"&gt;getReturnValue&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="c1"&gt;// retrieved value does not exist for track&lt;/span&gt;
      &lt;span class="c1"&gt;// set to default&lt;/span&gt;
      &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;@&amp;quot;None&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;invocation&lt;/span&gt; &lt;span class="nl"&gt;setReturnValue&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;        &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;_cache&lt;/span&gt; &lt;span class="nl"&gt;setObject&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="nl"&gt;forKey&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;      &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;buffer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;NSUInteger&lt;/span&gt; &lt;span class="n"&gt;length&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="n"&gt;invocation&lt;/span&gt; &lt;span class="n"&gt;methodSignature&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
                         &lt;span class="n"&gt;methodReturnLength&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="n"&gt;buffer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;malloc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;invocation&lt;/span&gt; &lt;span class="nl"&gt;getReturnValue&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;buffer&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;        &lt;span class="kt"&gt;id&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;self&lt;/span&gt; &lt;span class="nl"&gt;mapBuffer&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;buffer&lt;/span&gt; &lt;span class="nl"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;returnType&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="c1"&gt;// done with buffer&lt;/span&gt;
    &lt;span class="n"&gt;free&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;buffer&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;        &lt;span class="c1"&gt;// cache value&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;_cache&lt;/span&gt; &lt;span class="nl"&gt;setObject&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt; &lt;span class="nl"&gt;forKey&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In this implementation we see a new object in play, specifically the
&lt;a class="reference external" href="http://developer.apple.com/library/mac/#documentation/Cocoa/Reference/Foundation/Classes/NSMethodSignature_Class/Reference/Reference.html"&gt;NSMessageSignature&lt;/a&gt; and its methodReturnType. The methodReturnType is
an &lt;a class="reference external" href="http://developer.apple.com/library/mac/#documentation/Cocoa/Conceptual/ObjCRuntimeGuide/Articles/ocrtTypeEncodings.html"&gt;objc type encoding&lt;/a&gt;. Here, we only check for the &amp;quot;&amp;#64;&amp;quot;, or NSObject,
type. In our mapBuffer:type: method we'll need to handle all the other
types we care about.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="mapbuffer-type"&gt;
&lt;h4&gt;mapBuffer:type:&lt;/h4&gt;
&lt;p&gt;For iTunesTrack objects, NSNumber is perfectly adequate at storing all
the primitives we're interested in storing. Also, to make mapping of
buffers to void pointers easier, we create a union.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;typedef&lt;/span&gt; &lt;span class="k"&gt;union&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kt"&gt;char&lt;/span&gt;               &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kt"&gt;int&lt;/span&gt;                &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kt"&gt;short&lt;/span&gt;              &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kt"&gt;long&lt;/span&gt;               &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="kt"&gt;long&lt;/span&gt;          &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt;      &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;       &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;I&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;short&lt;/span&gt;     &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;long&lt;/span&gt;      &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;L&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;Q&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kt"&gt;float&lt;/span&gt;              &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kt"&gt;double&lt;/span&gt;             &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kt"&gt;_Bool&lt;/span&gt;              &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kt"&gt;void&lt;/span&gt;               &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="n"&gt;TRACKDATA&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The name of each union item is the same as its type encoding key. We use
the union and the appropriate type encoding to store the primitive data
type in an NSNumber in the mapBuffer:type: method.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;mapBuffer:&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;voidPtr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nv"&gt;buffer&lt;/span&gt; &lt;span class="nf"&gt;type:&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;NSString&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nv"&gt;type&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kt"&gt;id&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;      &lt;span class="n"&gt;TRACKDATA&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;buffer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt; &lt;span class="nl"&gt;isEqualToString&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;@&amp;quot;c&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="bp"&gt;NSNumber&lt;/span&gt; &lt;span class="nl"&gt;numberWithChar&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;      &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt; &lt;span class="nl"&gt;isEqualToString&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;@&amp;quot;i&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="bp"&gt;NSNumber&lt;/span&gt; &lt;span class="nl"&gt;numberWithInt&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;      &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt; &lt;span class="nl"&gt;isEqualToString&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;@&amp;quot;s&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="bp"&gt;NSNumber&lt;/span&gt; &lt;span class="nl"&gt;numberWithShort&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;      &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt; &lt;span class="nl"&gt;isEqualToString&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;@&amp;quot;l&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="bp"&gt;NSNumber&lt;/span&gt; &lt;span class="nl"&gt;numberWithLong&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;      &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt; &lt;span class="nl"&gt;isEqualToString&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;@&amp;quot;q&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="bp"&gt;NSNumber&lt;/span&gt; &lt;span class="nl"&gt;numberWithLongLong&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;      &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt; &lt;span class="nl"&gt;isEqualToString&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;@&amp;quot;C&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="bp"&gt;NSNumber&lt;/span&gt; &lt;span class="nl"&gt;numberWithUnsignedChar&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;      &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt; &lt;span class="nl"&gt;isEqualToString&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;@&amp;quot;I&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="bp"&gt;NSNumber&lt;/span&gt; &lt;span class="nl"&gt;numberWithUnsignedInt&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;I&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;      &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt; &lt;span class="nl"&gt;isEqualToString&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;@&amp;quot;S&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="bp"&gt;NSNumber&lt;/span&gt; &lt;span class="nl"&gt;numberWithUnsignedShort&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;      &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt; &lt;span class="nl"&gt;isEqualToString&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;@&amp;quot;L&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="bp"&gt;NSNumber&lt;/span&gt; &lt;span class="nl"&gt;numberWithUnsignedLong&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;L&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;      &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt; &lt;span class="nl"&gt;isEqualToString&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;@&amp;quot;Q&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="bp"&gt;NSNumber&lt;/span&gt; &lt;span class="nl"&gt;numberWithUnsignedLongLong&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Q&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;      &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt; &lt;span class="nl"&gt;isEqualToString&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;@&amp;quot;f&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="bp"&gt;NSNumber&lt;/span&gt; &lt;span class="nl"&gt;numberWithFloat&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;      &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt; &lt;span class="nl"&gt;isEqualToString&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;@&amp;quot;d&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="bp"&gt;NSNumber&lt;/span&gt; &lt;span class="nl"&gt;numberWithDouble&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;      &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt; &lt;span class="nl"&gt;isEqualToString&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;@&amp;quot;B&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// The BOOL type is a special case, so we do a little dance here.&lt;/span&gt;
    &lt;span class="kt"&gt;BOOL&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;YES&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;NO&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="bp"&gt;NSNumber&lt;/span&gt; &lt;span class="nl"&gt;numberWithBool&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Raise an exception if we receive a data type we&amp;#39;re not prepared&lt;/span&gt;
    &lt;span class="c1"&gt;// for...&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="bp"&gt;NSException&lt;/span&gt;
     &lt;span class="nl"&gt;raise&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;@&amp;quot;Unhandled NSMethodSignature:methodReturnType:&amp;quot;&lt;/span&gt;
     &lt;span class="nl"&gt;format&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;@&amp;quot;NSMethodSignature:methodReturnType: %@&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="setvaluefromcacheobj-invocation"&gt;
&lt;h4&gt;setValueFromCacheObj:invocation:&lt;/h4&gt;
&lt;p&gt;The reverse case is retrieving an object from the cache. We accomplish
that by first checking if the invocation's returnType is an object and
if not transforming our cache object into a primitive type with
mapObject:type.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;setValueFromCacheObj:&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nv"&gt;obj&lt;/span&gt; &lt;span class="nf"&gt;invocation:&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;NSInvocation&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nv"&gt;inv&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="bp"&gt;NSString&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;returnType&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="bp"&gt;NSString&lt;/span&gt;
                          &lt;span class="nl"&gt;stringWithUTF8String&lt;/span&gt;&lt;span class="p"&gt;:[[&lt;/span&gt;&lt;span class="n"&gt;inv&lt;/span&gt; &lt;span class="n"&gt;methodSignature&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;methodReturnType&lt;/span&gt;&lt;span class="p"&gt;]];&lt;/span&gt;       &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;returnType&lt;/span&gt; &lt;span class="nl"&gt;isEqualToString&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;@&amp;quot;@&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;inv&lt;/span&gt; &lt;span class="nl"&gt;setReturnValue&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;buffer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;self&lt;/span&gt; &lt;span class="nl"&gt;mapObject&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt; &lt;span class="nl"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;returnType&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;inv&lt;/span&gt; &lt;span class="nl"&gt;setReturnValue&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;buffer&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="c1"&gt;// done with buffer&lt;/span&gt;
    &lt;span class="n"&gt;free&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;buffer&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;     &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="mapobject-type"&gt;
&lt;h4&gt;mapObject:type:&lt;/h4&gt;
&lt;p&gt;The reverse mapping from object to buffer is done by the mapObject:type:
method. It's pretty much just the inverse of the mapBuffer:type: method.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nf"&gt;mapObject:&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nv"&gt;obj&lt;/span&gt; &lt;span class="nf"&gt;type:&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;NSString&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nv"&gt;type&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;buffer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt; &lt;span class="nl"&gt;isEqualToString&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;@&amp;quot;c&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;buffer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;malloc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;buffer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt; &lt;span class="n"&gt;charValue&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;      &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt; &lt;span class="nl"&gt;isEqualToString&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;@&amp;quot;i&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;buffer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;malloc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;buffer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt; &lt;span class="n"&gt;intValue&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;      &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt; &lt;span class="nl"&gt;isEqualToString&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;@&amp;quot;s&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;buffer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;short&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;malloc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;short&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;short&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;buffer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt; &lt;span class="n"&gt;shortValue&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;      &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt; &lt;span class="nl"&gt;isEqualToString&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;@&amp;quot;l&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;buffer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;malloc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;long&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;buffer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt; &lt;span class="n"&gt;longValue&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;      &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt; &lt;span class="nl"&gt;isEqualToString&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;@&amp;quot;q&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;buffer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;malloc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="kt"&gt;long&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;buffer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt; &lt;span class="n"&gt;longLongValue&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;      &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt; &lt;span class="nl"&gt;isEqualToString&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;@&amp;quot;C&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;buffer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;malloc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;buffer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt; &lt;span class="n"&gt;unsignedCharValue&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;      &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt; &lt;span class="nl"&gt;isEqualToString&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;@&amp;quot;I&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;buffer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;malloc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;buffer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt; &lt;span class="n"&gt;unsignedIntValue&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;      &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt; &lt;span class="nl"&gt;isEqualToString&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;@&amp;quot;S&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;buffer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;short&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;malloc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;short&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;short&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;buffer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt; &lt;span class="n"&gt;unsignedShortValue&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;      &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt; &lt;span class="nl"&gt;isEqualToString&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;@&amp;quot;L&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;buffer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;malloc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;long&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;buffer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt; &lt;span class="n"&gt;unsignedLongValue&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;      &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt; &lt;span class="nl"&gt;isEqualToString&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;@&amp;quot;Q&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;buffer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;malloc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="kt"&gt;long&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;buffer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt; &lt;span class="n"&gt;unsignedLongLongValue&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;      &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt; &lt;span class="nl"&gt;isEqualToString&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;@&amp;quot;f&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;buffer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;malloc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;float&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;buffer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt; &lt;span class="n"&gt;floatValue&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;      &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt; &lt;span class="nl"&gt;isEqualToString&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;@&amp;quot;d&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;buffer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;malloc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;buffer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt; &lt;span class="n"&gt;doubleValue&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;      &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt; &lt;span class="nl"&gt;isEqualToString&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;@&amp;quot;B&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;_Bool&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt; &lt;span class="n"&gt;boolValue&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;buffer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;_Bool&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;malloc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;_Bool&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;_Bool&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;buffer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;      &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="bp"&gt;NSException&lt;/span&gt;
     &lt;span class="nl"&gt;raise&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;@&amp;quot;Unhandled NSMethodSignature:methodReturnType:&amp;quot;&lt;/span&gt;
     &lt;span class="nl"&gt;format&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;@&amp;quot;NSMethodSignature:methodReturnType: %@&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;buffer&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="summary-benchmarks"&gt;
&lt;h2&gt;Summary &amp;amp; Benchmarks&lt;/h2&gt;
&lt;p&gt;That pretty much wraps it up. We can use our iTunesProxy object as a
drop in replacement for the iTunesTrack object and it will cache all
values for that track. This vastly improves query intensive operations
such as sorting.&lt;/p&gt;
&lt;p&gt;In fact, we'll use sorting as a demonstration on what we've gained from
our work. The following output is from the main function attached to the
article.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
We retrieved 254 unproxied movies
We retrieved 254 proxied movies
Time elapsed for track sort: -7.293006
Time elapsed for proxy sort: -0.567359
&lt;/pre&gt;
&lt;p&gt;Not the fastest sort in the world, but we did get a 13x improvement
bringing the performance from &amp;quot;application breaking&amp;quot; to perfectly
workable. Of course, most of the overhead in that second run is from the
initial caching of the track values. Let's see what we get on a &lt;em&gt;second&lt;/em&gt;
run of our proxy array:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
Time elapsed for proxy sort second run: -0.017478
&lt;/pre&gt;
&lt;p&gt;That's more like it! After the initial hit when caching our variables,
we are rewarded with a 365x increase in sorting speed.&lt;/p&gt;
&lt;p&gt;It's easy to see how this pattern is extendible outside the scope of
iTunes tracks or even ScriptingBridge to any situation where the cost of
retrieval far out weighs a minor hit to memory.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="full-source-files"&gt;
&lt;h2&gt;Full Source Files&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="/source/2011/09/iTunes.h"&gt;iTunes.h&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="/source/2011/09/iTunesTrackProxy.h"&gt;iTunesTrackProxy.h&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="/source/2011/09/iTunesTrackProxy.m"&gt;iTunesTrackProxy.m&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="/source/2011/09/main.m"&gt;main.m&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="/source/2011/09/Makefile"&gt;Makefile&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</summary><category term="cocoa"></category><category term="objc"></category><category term="osx"></category><category term="programming"></category></entry><entry><title>Unboxing, first impressions, and 300 mile followup for Rol Wheel's Volant/RT</title><link href="http://blog.jameskyle.org/2011/06/rol-wheels-review" rel="alternate"></link><updated>2011-06-06T10:28:00-07:00</updated><author><name>James A. Kyle</name></author><id>tag:blog.jameskyle.org,2011-06-06:2011/06/rol-wheels-review</id><summary type="html">&lt;p&gt;For the write up on why I chose Rol Wheels over the many other custom
and commercial options for wheels, see my original post &lt;a class="reference external" href="/2011/05/my-experience-as-a-newbie-cyclist-buying-his-first-set-of-non-stock-wheels/"&gt;My experience
as a newbie cyclist buying his first set of non stock wheels.&lt;/a&gt;.&lt;/p&gt;
&lt;div class="section" id="the-unboxing"&gt;
&lt;h2&gt;The Unboxing&lt;/h2&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="Rol Wheels 1.jpg" src="/images/2011/06/Rol-Wheels-1.jpg" /&gt;
&lt;/div&gt;
&lt;p&gt;Though packed in nothing but cardboard, the wheels were well protected
and secure. It couldn't have withstood a pallet of cinder blocks being
dropped on them or anything, but appeared perfectly suitable for normal
shipping bumps and bangs.&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="Rol Wheels 2.jpg" src="/images/2011/06/Rol-Wheels-2.jpg" /&gt;
&lt;/div&gt;
&lt;p&gt;The wheels themselves looked absolutely sexy. Polished with nice looking
decals. A quick ping test on spoke tension gave an equal tone for all
spokes. I didn't put them up on a truing rack right off the bat, but a
visual check on the mounted wheels didn't indicate any warping. In
hindsight, I should have driven them up to the shop if only for a
reference on the 300 mile followup. As others have mentioned on many of
the &lt;a class="reference external" href="http://www.roadbikereview.com/mfr/rolwheels/wheelsets/mpl_13414_2490crx.aspx"&gt;Rol Wheels reviews on roadbikereview.com&lt;/a&gt;, the only negative as
far as construction might be the plastic pokers for the hubs. But, in my
book, this is a minor detail.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-ride"&gt;
&lt;h2&gt;The Ride&lt;/h2&gt;
&lt;p&gt;Well, of course the &lt;em&gt;real&lt;/em&gt; test of a new wheel set is when they're doing
what their meant to do...rolling! And I couldn't have had a better
impression of the Volants at that task. They spin up well and corner
great. Now, as I mentioned in my original post I'm a newbie so I'm
likely not pushing the absolute limits of my bike. However, I did seem
to notice a difference between the Volants and my stock Mavic Open
Sport's with shimano 105 hubs. They seemed to hold the line a bit better
without flex on tight turns. It could all be in my head or maybe I was
just really trying to push the new wheels and just got more out of them
because of that. Bottom line is, no dissappointment on that front.&lt;/p&gt;
&lt;p&gt;The only possible negative to the wheels is the hubs are of the noisy
variety when freewheeling. It doesn't bother me, but if such things do
bother you it's something to take into consideration. Personally, in
some ways I even like it. The only time I freewheel is when I'm slowing
for other riders or pedestrians on bike paths and the audible click
usually lets them know I've rolled up behind them. However, the noise is
low enough to be drowned out by the wind for the most part.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-300-mile-followup"&gt;
&lt;h2&gt;The 300 Mile Followup&lt;/h2&gt;
&lt;p&gt;To make one thing clear off the bat, after 300+ miles of riding I don't
expect a new set of wheels to remain true. . . even if they've been
pre-stressed. You should &lt;em&gt;always&lt;/em&gt; do a followup check on your new wheels
to make sure they held tru after teh first few weeks of riding. As such,
none of the adjustments I note below in the followup should be taken as
a slight against the quality of Rol Wheels.&lt;/p&gt;
&lt;p&gt;After approximately 300 to 400 miles of road time, I brought the wheels
into my local bike coop &lt;a class="reference external" href="http://www.bikerowave.org/"&gt;Bikerowave&lt;/a&gt;, free to all &lt;a class="reference external" href="http://www.smc.edu"&gt;Santa Monica
College&lt;/a&gt; students! While there I threw the wheels up on a truing stand.&lt;/p&gt;
&lt;p&gt;The rear wheel had become dished toward the side with the shorter spoke
angle. One thing I found odd is that it was &lt;em&gt;perfectly&lt;/em&gt; dished, by which
I mean they were evenly dished arround the entire wheel. This is
something that the naked eye likely wouldn't catch on a quick spin check
unless you were paying close attention to the spacing between the wheel
and the rear fork near the bottom bracket. This is why I wished I'd
taken the time to bring them to the shop out of the box to see if they
came from the factory like that. If they had, it may be an indication
that one of Sean's truing stands is dished. However, it's not a big deal
to correct which is exactly what I did with a few 1/4 turns around the
circumference of the wheel.&lt;/p&gt;
&lt;p&gt;The front wheel was still very, very close to tru. I tightened it up a
bit bringing it to within 1mm which is good enough for government work.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="final-verdict"&gt;
&lt;h2&gt;Final Verdict&lt;/h2&gt;
&lt;p&gt;So, the final verdict is I'm very happy with the new wheel set. If given
the choice to do over I'd make the same decision. The weight to price to
performance ratio is stellar and when I called with questions Sean, the
owner, was very responsive (picked up on the first ring).&lt;/p&gt;
&lt;/div&gt;
</summary><category term="cycling"></category><category term="fitness"></category><category term="wheels"></category></entry><entry><title>My experience as a newbie cyclist buying his first set of non stock wheels.</title><link href="http://blog.jameskyle.org/2011/05/my-experience-as-a-newbie-cyclist-buying-his-first-set-of-non-stock-wheels" rel="alternate"></link><updated>2011-05-05T08:59:00-07:00</updated><author><name>James A. Kyle</name></author><id>tag:blog.jameskyle.org,2011-05-05:2011/05/my-experience-as-a-newbie-cyclist-buying-his-first-set-of-non-stock-wheels</id><summary type="html">&lt;p&gt;So, I've been rocking stock Open Sport's for about 10 or 11 thousand
kilometers and they've about had it. Couple of good dings and not really
holding true anymore. Time for some new wheels.&lt;/p&gt;
&lt;div class="section" id="the-contenders"&gt;
&lt;h2&gt;The Contenders&lt;/h2&gt;
&lt;p&gt;I looked at a few commercial wheel options and at four wheel builders:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.bicyclewheelwarehouse.com/"&gt;Bicycle Wheel Warehouse&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://predatorcycling.com/"&gt;Predator Cycling&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.wheelbuilder.com/"&gt;Wheel Builder&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.rolwheels.com/"&gt;Rol Wheels&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="bycycle-wheel-warehouse"&gt;
&lt;h3&gt;Bycycle Wheel Warehouse&lt;/h3&gt;
&lt;p&gt;Bicycle Wheel Warehouse looks like they pull from a subset of commercial
components and have their own in-house line called Pure (hubs) and
Blackset Race (rims). I noticed their address was on my daily bike route
in Huntington Beach…but they don't have a walk in store. I also ran into
mixed satisfaction with customer service (mainly responsiveness) in
reviews and forum discussions (these and others). Though the majority
seem happy with the wheels themselves. I attempted to contact the shop,
but no one answered. Left a message, but received no return call. This
being my first wheel set I'd prefer a bit more hand
holding/accessibility.&lt;/p&gt;
&lt;p&gt;My other contention with BWW was a certain level of uncertainty I wasn't
quite comfortable with. There was very vocal support on the &lt;a class="reference external" href="http://forums.roadbikereview.com/"&gt;Road Bike
Review&lt;/a&gt; forums (whom BWW sponsors). However, it mainly comes from a few
people. There were more than a few anecdotal, positive stories. But a
deep review history of their products does not exist.&lt;/p&gt;
&lt;p&gt;None of these would have been deal breakers. BWW's prices are quite good
and they're somewhat local despite the lack of a store front. However,
in combination they put me off as a new buyer. Frankly, if I could name
one thing that was &lt;em&gt;the&lt;/em&gt; deterrant it would be responsiveness. If they'd
have answered or returned my call within a day or so, they'd have
probably made a sale.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="predator-cycling"&gt;
&lt;h3&gt;Predator Cycling&lt;/h3&gt;
&lt;p&gt;So, Predator Cycling only deals with high end. They're local (Los
Angeles) and have a walk in shop that I've been fit in. Their main focus
is building custom bikes from the ground up, wheels being part of that.
So I was still tempted. But their wheels started at around 900-1200 a
set which was a bit more than I wanted to pay. Was really impressed with
Aram's customer service and the fit feels quite good. He also said he'd
work with me with any wheels I picked up.&lt;/p&gt;
&lt;p&gt;I liked the feel of the shop and Aram seemed very passionate about his
work. When it's time to upgrade my bike, I'll seriously consider
purchasing it from them. No negatives with Predator Cycling whatsoever,
just a bit out of my range.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="wheel-builder"&gt;
&lt;h3&gt;Wheel Builder&lt;/h3&gt;
&lt;p&gt;Wheel Builder is an outfit located in El Monte, CA. which is semi-local
for me at approximately 30 miles away. They were recommended by Aram at
predator as a solid wheel builder and I have no reason to doubt that
recommendation. The only negative was that they were a bit pricey for
the components being built. Not a deal breaker in and of itself, after
all they &lt;em&gt;are&lt;/em&gt; custom built wheels. But a few hundred dollars is still a
few hundred dollars.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="main-stream-options"&gt;
&lt;h3&gt;Main stream options&lt;/h3&gt;
&lt;p&gt;No need to really cover these in detail. Shiimano, DT, WI, etc. They're
solid, they're known, there's plenty of information out there. Most in
the price range I was looking at are factory built. Easton would be one
exception, but I've received so many anecdotal reports of busted spokes,
loose hubs, etc. that I was hesitant to dive in.&lt;/p&gt;
&lt;p&gt;Having worked in plants and factories before, there was one thing I was
sure of. When it comes to precision work, a hand built product done by
someone who cares about their work is vastly superior to assembly line
fabrication. So I was leaning toward a hand built wheel by a small shop.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="rol-wheels"&gt;
&lt;h3&gt;Rol Wheels&lt;/h3&gt;
&lt;p&gt;Rol Wheels is based in Austin, TX. which has a lively and strong cycling
scene. They've been a sponsor of Road Bike Review for quite some time.
They've been in the Road Bike Review &amp;quot;Best of XX Year&amp;quot; list for 4 years
in a row with over 150 reviews non of which are below a 4.5....that
caught my attention A recurring theme amongst reviewers and forum
commenters was the outstandingly, over the top customer service. That
held my attention.&lt;/p&gt;
&lt;p&gt;In contrast to BWW whose feedback and users seemed to mainly congregate
around Road Bike Review, I was able to find discussions of Rol Wheels in
many other forums, blogs, and a couple of magazines. &lt;a class="reference external" href="http://www.pelotonmagazine.com/"&gt;Peloton Magazine&lt;/a&gt;
(formally testrider.com) also covered the line. The greater presence
could simply be indicative of better marketing. Regardless, it was nice
to have a more diverse set of sources. Finally their prices are quite
good and fell squarely within my price range.&lt;/p&gt;
&lt;p&gt;As a final test, I decided to see if the raves about customer service
could hold water. I called up Rol first thing in the morning. Sean, the
owner, picked up on the second ring. He asked my weight and my intended
uses (durability, reliability, dual purpose train/race). He said I was
light enough to ride any of their wheelsets regularly, even the 20/24,
1478g &lt;a class="reference external" href="http://www.rolwheels.com/rol_dhuez_wheels.php"&gt;D&amp;quot;Huez&lt;/a&gt;. However, the &lt;a class="reference external" href="http://www.rolwheels.com/rol_volant_rt_wheels.php"&gt;Volant R/T&lt;/a&gt; is their most robust line
weighing in at 1655g with 24/28 spoke configuration. I mentioned that I
wanted something that could take a bit of abuse and not come away like a
taco. To which he replied that if I never irreparably dent the rim,
they'd be happy to repair it for $60 dollars...so a busted rim doesn't
result in a trip to the savings account.&lt;/p&gt;
&lt;p&gt;That's the sort of feedback that inspires purchasing confidence. It may
be superficial, but talking to a human being that sounds excited about
their work and generally eager to make you a customer without trying to
upsell is the kind of interaction that wins customers and creates
loyalty.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="the-winner"&gt;
&lt;h2&gt;The Winner&lt;/h2&gt;
&lt;p&gt;I went with Rol Wheels (could probably tell that already) and I plinked
down for the Volant R/T. I decided as a newbie that cutting 2268 grams
off the waste for free was a cheaper way to lighten my bike than cutting
177 grams for $250 dollars. They're still a lot lighter than the Open
Sports I'm using now.&lt;/p&gt;
&lt;p&gt;I'll make an unboxing post when I receive them with first impressions
and, of course, a final impression after I put a few thousand kilometers
on them.&lt;/p&gt;
&lt;/div&gt;
</summary><category term="cycling"></category><category term="fitness"></category><category term="wheels"></category><category term="reviews"></category></entry><entry><title>Fix for MacVim Syntax Error, Throws "Only one file name allowed"</title><link href="http://blog.jameskyle.org/2011/02/vim-only-one-filename-allowed-fix" rel="alternate"></link><updated>2011-02-25T11:58:00-08:00</updated><author><name>James A. Kyle</name></author><id>tag:blog.jameskyle.org,2011-02-25:2011/02/vim-only-one-filename-allowed-fix</id><summary type="html">&lt;p&gt;I keep a lot of my user installed applications in /Applications/User
Utilities. Keeps some modicum of organization and reduces a bit of
clutter in my /Applications directory. After moving &lt;a class="reference external" href="http://code.google.com/p/macvim/"&gt;MacVim&lt;/a&gt; to this
directory, I began getting several errors when opening files. They were
all of the same type.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
E172: Only one file name allowed
&lt;/pre&gt;
&lt;p&gt;With occurrances on several lines in the runtime/syntax/vim.vim file.
Opening the file, I found syntax like the following&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;exe &lt;span class="s2"&gt;&amp;quot;syn include @vimPerlScript &amp;quot;&lt;/span&gt;.s:perlpath
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You may notice the perpath variable is where the problem lies. the space
gives the appearance of two arguments instead of a single path. We can
prevent this by using fnameescape For me, these errors occurred on lines
585, 607, and 628.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;Line 585&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;exe &lt;span class="s2"&gt;&amp;quot;syn include @vimPerlScript &amp;quot;&lt;/span&gt;.s:perlpath
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;becomes&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;exe &lt;span class="s2"&gt;&amp;quot;syn include @vimPerlScript &amp;quot;&lt;/span&gt;.fnameescape&lt;span class="p"&gt;(&lt;/span&gt;s:perlpath&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Line 607&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;exe &lt;span class="s2"&gt;&amp;quot;syn include @vimRubyScript &amp;quot;&lt;/span&gt;.s:rubypath
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;becomes&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;exe &lt;span class="s2"&gt;&amp;quot;syn include @vimRubyScript &amp;quot;&lt;/span&gt;.fnameescape&lt;span class="p"&gt;(&lt;/span&gt;s:rubypath&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Line 628&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;exe &lt;span class="s2"&gt;&amp;quot;syn include @vimPythonScript &amp;quot;&lt;/span&gt;.s:pythonpath
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;becomes&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;exe &lt;span class="s2"&gt;&amp;quot;syn include @vimPythonScript &amp;quot;&lt;/span&gt;.fnameescape&lt;span class="p"&gt;(&lt;/span&gt;s:pythonpath&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All done.&lt;/p&gt;
</summary><category term="programming"></category><category term="vim"></category></entry><entry><title>Automatically create django User Profiles as needed.</title><link href="http://blog.jameskyle.org/2011/02/autocreate-django-user-profiles" rel="alternate"></link><updated>2011-02-25T11:10:00-08:00</updated><author><name>James A. Kyle</name></author><id>tag:blog.jameskyle.org,2011-02-25:2011/02/autocreate-django-user-profiles</id><summary type="html">&lt;p&gt;Ran across a very nice, brief run down of creating user profiles for
django on &lt;a class="reference external" href="http://www.turnkeylinux.org/blog/django-profile"&gt;Turnkey Linux&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I was particularly pleased of this &amp;quot;ism&amp;quot; that creates user profiles on
the fly on an as needed basis. As a bonus, it provides access to the
profiles through a user.profile property. All you have to do is place
the following property declaration at the bottom of your profile's
models.py.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;profile&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;property&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;UserProfile&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_or_create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And that's it. Now, when someuser.profile is called, it'll create a
default profile if needed or return that user's profile if it exists.
See the original article for a full User Profile quickstart.&lt;/p&gt;
</summary><category term="django"></category><category term="programming"></category><category term="python"></category></entry><entry><title>Real Science of the Mind: A reply</title><link href="http://blog.jameskyle.org/2011/01/real-science-of-the-mind-a-reply" rel="alternate"></link><updated>2011-01-06T18:11:00-08:00</updated><author><name>James A. Kyle</name></author><id>tag:blog.jameskyle.org,2011-01-06:2011/01/real-science-of-the-mind-a-reply</id><summary type="html">&lt;p&gt;Tyler Burge wrote an interesting &lt;a class="reference external" href="http://opinionator.blogs.nytimes.com/2010/12/19/a-real-science-of-mind/"&gt;op-ed&lt;/a&gt; that took a pretty hostile
tone toward neuroscience. Starting right off the bat referring to
neuroscience as &amp;quot;neurobabble&amp;quot;. I took a few contentions with the fast
and loose critique he provides.I propose that the dichotomy between
explanation and description is false.&lt;/p&gt;
&lt;p&gt;For example, given (feel free to offer alternative definitions):&lt;/p&gt;
&lt;blockquote&gt;
An explanation is a set of statements constructed to describe a set
of facts which clarifies the causes, context, and consequences of
those facts.&lt;/blockquote&gt;
&lt;p&gt;This is what neuroscientists are doing when they provide &amp;quot;descriptions&amp;quot;
of various phenomena. Now, often when people point to this distinction
between explanation vs. description, they're referring to some concept
of &amp;quot;purpose&amp;quot;. However, the author did not make this clear nor did he
propose any reason why psychology is better equipped or suited toward
providing &amp;quot;purpose&amp;quot; than neuroscience. I could be misinterpreting, but
it would have been very helpful if the distinction was explicitly
provided.&lt;/p&gt;
&lt;p&gt;We'll go over the reasons he did enumerate.&lt;/p&gt;
&lt;div class="section" id="first-it-provides-little-insight-into-psychological-phenomena"&gt;
&lt;h2&gt;First, it provides little insight into psychological phenomena.&lt;/h2&gt;
&lt;p&gt;By this I assume he means the qualia of the biological state of love.
Without addressing problems with qualia itself, I would question what
advantage psychology has over neuroscience in providing adequate
explanations. None are offered by the author. Further, qualia, as a
phenomena, is framed in such a way that it may be impossible to even
arrive at an adequate explanation that is expressible by language
(Dennet talks about this at length).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="individuals-see-know-and-want-to-make-love-brains-dont"&gt;
&lt;h2&gt;Individuals see, know, and want to make love. Brains don’t.&lt;/h2&gt;
&lt;p&gt;Neuroscience does not make such simplistic claims as &amp;quot;brains are
everything&amp;quot;. There is very deep discussion in the field over systems
analysis, or the cumulative effect of multiple contributions to a
particular mental state. DTI research is related to this as it attempts
to study the *pathways* that a signal takes rather than focusing on
only the areas of the most significant neural activities. Also, in this
specific case it is not suggested that this one locus of the brain is
where &amp;quot;love&amp;quot; starts and stops. Biologists and neuroscientists are well
aware that we're dealing with a concert of activity ( throughout the
entire body), the cumulative effect of which is our subjective
experience in totality. However, the brain is considered a crucial and
significant domino in the chain without which all other activity would
cease. We also know if you break communication between the body and the
brain, the qualia of &amp;quot;love&amp;quot; is never achieved.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="brain-activity-is-necessary-for-psychological-phenomena-but-its-relation-to-them-is-complex"&gt;
&lt;h2&gt;Brain activity is necessary for psychological phenomena, but its relation to them is complex.&lt;/h2&gt;
&lt;p&gt;He does admit/acknowledge this, but again presents no evidence or even
an opinion on *why* psychology is in a uniquely superior position to
address this problem. Neuroscientists know we're dealing with a
massively complex system, but so are psychologists.&lt;/p&gt;
&lt;blockquote&gt;
Explanations of neural phenomena are not themselves explanations of
psychological phenomena.&lt;/blockquote&gt;
&lt;p&gt;And what is? What is the framework? How does it obscure the discussion?
What makes psychologybabble superior to neurobabble?&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="see-john-cleeses-apt-spoof-of-such-reductionism"&gt;
&lt;h2&gt;See John Cleese’s apt spoof of such reductionism.&lt;/h2&gt;
&lt;p&gt;What makes John Cleese's discussion absurd is not the claim made by the
study , but the way he reduces it to an absolute. All science talks of
correlations and probabilities, not absolute certainties. Here are the
actual claims of the God Gene hypothesis:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;spirituality can be quantified by psychometric measurements&lt;/li&gt;
&lt;li&gt;the underlying tendency to spirituality is partially heritable&lt;/li&gt;
&lt;li&gt;part of this heritability can be attributed to the gene VMAT2&lt;/li&gt;
&lt;li&gt;this gene acts by altering monoamine levels&lt;/li&gt;
&lt;li&gt;spirituality arises in a population because spiritual individuals are
favored by natural selection.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Notice the liberal use of terms like &amp;quot;partially&amp;quot;. There's no one-to-one
connection between a single gene or a single chemical or a single event
that guarantees spirituality. Further, this theory is on the fringe (for
now). He didn't publish his data in a peer reviewed journal and the
community hasn't digested it yet.Cleese acts like the suggestion is that
a very specific behavior is hardwired by a single, specific gene. If
there's any doubts about this being the claim, I'll let Hamer clarify in
his own words:&lt;/p&gt;
&lt;blockquote&gt;
Just because spirituality is partly genetic doesn't mean it is
hardwired.&lt;/blockquote&gt;
&lt;p&gt;I don't think that neuroscience will replace psychology, but there's
very little reason to doubt that they will merge. He uses references to
biology quite a bit, so I'll follow that train of thought. Prior to
modern genetics research, we made great strides in understanding and
formalizing the process of inheritance. The theory of evolution itself
was derived without the aid of modern genetics. However, it also
produced a lot of trash that on the surface seemed very reasonable. An
example would be our assumptions about race, a concept that's been
proven to be nonsensical by genetics and completely unrelated to actual
biological &amp;quot;nearness&amp;quot;. But we don't have some sort of &amp;quot; schism&amp;quot; between
&amp;quot;genealogists&amp;quot; that claim genetics is intrinsically incapable of
answering important questions. We just have geneticists. They use a lot
of different tools depending on the problem at hand and one of those is
modern computational genetics.&lt;/p&gt;
&lt;p&gt;I see no reason why this won't happen with neuroscience. The
mathematical models for vision and generative linguistics are just one
more tool for the overarching class. Used when most appropriate for
solving a problem or in combination with other tools if their seen to
augment. And this is exactly [ what's
happening](&lt;a class="reference external" href="http://www.ncbi.nlm.nih.gov/sites/entrez"&gt;http://www.ncbi.nlm.nih.gov/sites/entrez&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;I look forward to the upcoming years as psychology and neuroscience
merge into one discipline. The combination of the two will likely
augment weaknesses and eliminate fallacies in both to produce a better
discipline.&lt;/p&gt;
&lt;/div&gt;
</summary><category term="neuroscience"></category><category term="opinion"></category><category term="philosophy"></category><category term="psychology"></category></entry><entry><title>The role of religion and science</title><link href="http://blog.jameskyle.org/2010/12/the-role-of-religion-and-science" rel="alternate"></link><updated>2010-12-02T10:52:00-08:00</updated><author><name>James A. Kyle</name></author><id>tag:blog.jameskyle.org,2010-12-02:2010/12/the-role-of-religion-and-science</id><summary type="html">&lt;p&gt;Greg Fish has a pretty interesting &lt;a class="reference external" href="http://worldofweirdthings.com/2010/12/01/your-morning-dose-of-would-be-martyrdom/"&gt;article&lt;/a&gt; on the religious victim
complex. The comments sparked a good discussion on the roles of religion
and science.&lt;/p&gt;
&lt;p&gt;In particular, the proposition was made that &amp;quot;S*cience answers ‘How?’;
religion answers ‘Why?’&amp;quot;.*I took contention with this statement,
proposing that science is perfectly adequate at answering 'why'
questions. Below is a response to that assertion by &lt;a class="reference external" href="http://worldofweirdthings.com/2010/12/01/your-morning-dose-of-would-be-martyrdom/#comment-32422"&gt;Bruce Coulson&lt;/a&gt;, my
reply got quite verbose so I thought it deserved its own blog
entry.&amp;nbsp;I'll walk through the main points one by one.&lt;/p&gt;
&lt;blockquote&gt;
&amp;quot;Religion provides meaning. Science doesn’t.&amp;quot;&lt;/blockquote&gt;
&lt;p&gt;I take umbrage at this. The natural conclusion would be that those who
do not have religion have no meaning in their lives. This is
demonstrably false. All the atheists I know, including myself, have very
clearly defined concepts of the &amp;quot;meaning&amp;quot; of their lives. I also know
many a religious person who is extremely conflicted over what the
meaning of their lives are. Now, that's purely anecdotal (most of the
atheists I know are academic or business professionals and very goal
oriented) and not meant to reflect the normal population as a whole. But
if I just produce a single atheist that has meaning, that negates the
assertion that it can _only_ be found through religion or
spirituality.&lt;/p&gt;
&lt;blockquote&gt;
It does not answer, and cannot answer, ‘Why?’ If you counter with,
‘well, evolution is the function of natural laws’ then the counter
is ‘Why do the natural laws work this way?’ Ultimately, your answer
(from a scientific point of view) boils down to “Because they do!”
Which is perfectly valid and correct, scientifically. But
unsatisfying from a faith point of view, because it’s not an answer.&lt;/blockquote&gt;
&lt;p&gt;I'm not sure what's being implied here. When a child asks &amp;quot;Why do
oranges fall to the ground?&amp;quot; replying &amp;quot;Gravity&amp;quot; is a perfectly valid
response.&lt;/p&gt;
&lt;p&gt;Pointing out that science is not infinite in its ability to answer the
&amp;quot;Why&amp;quot; questions is not a nail in its coffin. Also, &amp;quot;Because they do.&amp;quot; is
never, ever a valid answer from the perspective of science. However, &amp;quot;We
don't know.&amp;quot; is. This is a key difference between Religion and science.
Religion insists that when traversing the ladder of Why's there must be
turtles all the way down. Science does not require that every observed
phenomena have a definitive answer. Though lack of an answer is
certainly an indication that there is still interesting work to do.&lt;/p&gt;
&lt;p&gt;Science views unanswered questions as areas to be investigated, not
areas resolved arbitrarily by a god which need no further investigation.
Not only is it ok to say &amp;quot;I don't know.&amp;quot; in science, it's a requirement
before you can even begin to embark on a scientific inquiry. It is
religion that is perfectly fine with show stopping answers to why such
as &amp;quot;Because god made it that way.&amp;quot;&lt;/p&gt;
&lt;p&gt;To delve a little deeper into this issue and get at what I think the
core contention is in this &amp;quot;Why&amp;quot; analogy, there are some questions which
are &lt;em&gt;unanswerable&lt;/em&gt;. They are posited in such a way that they are
untestable. For example, if you define &amp;quot;spirit&amp;quot; as an entity that does
not exist on this plane of reality and is therefore undetectable by
anything in this reality. Or the framing of morality in a way that does
not entail any sort of claimed effect on our lives. The problem with
these sorts of questions is that &lt;a class="reference external" href="http://godlessgeeks.com/LINKS/Dragon.htm"&gt;the moment you remove a proposed
&amp;quot;thing&amp;quot; from our reality&lt;/a&gt;, it no longer impacts this reality (by
definition). The &amp;quot;answer&amp;quot; to an untestable question can be any one of an
infinite set of arbitrary &amp;quot;solutions&amp;quot;. Since they are all equally
untestable, they are all equally valid (or invalid) with maybe a loose
requirement of logical consistency. I say &amp;quot;loose&amp;quot; because except in the
works of the most academic of religious philosophers such as
&lt;a class="reference external" href="http://en.wikipedia.org/wiki/Alvin_Plantinga"&gt;Plantinga&lt;/a&gt;, &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Alvin_Plantinga"&gt;Alston&lt;/a&gt;, and others this requirement is never followed.
In fact, the biggest issue that rigorous modern philosophers of religion
have is trying to shoe horn religion into some sort of logically
consistent, rational framework with varying degrees of success depending
on whether you're speaking to a religiously affiliated philosopher or
not.&lt;/p&gt;
&lt;p&gt;To drive this home, claiming that X is moral means nothing if there is
no proposed positive or negative effect of doing X. It simply doesn't
impact our lives at all. As soon as you make some claim, such as &amp;quot;If
people X, then it improves Y&amp;quot; or even something as vague as &amp;quot;If people
X, they will feel better.&amp;quot; you've thrown yourself into the realm of
science as we can certainly devise a means of testing that hypothesis.&lt;/p&gt;
&lt;p&gt;To claim that religion is only concerned with those questions that are
unanswerable not by some limitation of our instruments, but by the
inherent nature of the question, is to assert that religion is only
concerned with those questions which do not impact our lives. I think
this is a proposition that even the most academic of religious
philosophers would reject.&lt;/p&gt;
</summary><category term="personal beliefs"></category><category term="philosophy"></category><category term="religion"></category><category term="science"></category></entry><entry><title>Toggling NSMenuItems for a NSSearchField Menu Template</title><link href="http://blog.jameskyle.org/2010/10/toggling-nsmenuitems-for-a-nssearchfield-menu-template" rel="alternate"></link><updated>2010-10-07T16:07:00-07:00</updated><author><name>James A. Kyle</name></author><id>tag:blog.jameskyle.org,2010-10-07:2010/10/toggling-nsmenuitems-for-a-nssearchfield-menu-template</id><summary type="html">&lt;div class="section" id="the-problem"&gt;
&lt;h2&gt;The Problem&lt;/h2&gt;
&lt;p&gt;Creating NSMenus for NSSearchFields involves specifying a particular
NSMenu as the NSSearchField's 'Menu Template'. The problem with this is
that the actual NSMenu is not used, a copy is made. The result is that
its impossible to access the NSMenu or its NSMenuItems through
IBOutlets. Thus, modification of the NSMenuItem's state, title, etc.
attributes are not done in the &amp;quot;Standard Way&amp;quot;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-solution"&gt;
&lt;h2&gt;The Solution&lt;/h2&gt;
&lt;p&gt;This wasn't immediately obvious to me from the documentation or API
references and caused a good bit of confusion, digging, and googling
before I turned up an answer. I'm sure this is in part due to my newness
with The Cocoa Way®. Regardless, it deserves a post so I'll remember it.&lt;/p&gt;
&lt;p&gt;The magic bullet is to set your controller to the delegate for the
NSSearchField and implement the validateMenuItem:. Each time the NSMenu
is refreshed, the validateMenuItem is called for each NSMenuItem at
which time you can modify its state or attributes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-implementation"&gt;
&lt;h2&gt;The Implementation&lt;/h2&gt;
&lt;p&gt;Here we do a quick implementation to demonstrate the validateMenuItem in
action. I'm going to use PyObjc for brevity, but it should suffice to
demonstrate the approach.&lt;/p&gt;
&lt;div class="section" id="create-a-pyobjc-cocoa-application-with-a-nssearchfield-using-a-menu-template"&gt;
&lt;h3&gt;Create a PyObjc Cocoa Application with a NSSearchField using a Menu Template.&lt;/h3&gt;
&lt;p&gt;I've named my project ModifySearchMenu. The object is to create an
IBAction that is assigned to the NSMenuItems action. When the item is
clicked, we set it as the current menu item. We check this value in
validateMenuItem and assign the appropriate state. validateMenuItem
returns either YES or NO if the NSMenuItem should be active or not.&lt;/p&gt;
&lt;div class="section" id="drag-a-nssearchfield-widget-to-the-default-nswindow"&gt;
&lt;h4&gt;Drag a NSSearchField widget to the default NSWindow.&lt;/h4&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="Screen shot 2010-10-07 at 4.11.22 PM.png" src="/images/2010/10/Search_Item.png" /&gt;
&lt;p class="caption"&gt;Screen shot 2010-10-07 at 4.11.22 PM.png&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="create-a-nsmenu-instance"&gt;
&lt;h4&gt;Create a NSMenu instance&lt;/h4&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="Screen shot 2010-10-07 at 4.13.26 PM.png" src="/images/2010/10/NSMenu.png" /&gt;
&lt;p class="caption"&gt;Screen shot 2010-10-07 at 4.13.26 PM.png&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="set-the-appdelegate-as-the-delegate-for-the-nssearchfield"&gt;
&lt;h4&gt;Set the AppDelegate as the delegate for the NSSearchField&lt;/h4&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="Screen shot 2010-10-07 at 4.14.24 PM.png" src="/images/2010/10/ModifySearchFieldDelegate.png" /&gt;
&lt;p class="caption"&gt;Screen shot 2010-10-07 at 4.14.24 PM.png&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="implement-the-validatemenuitem-method-in-your-appdelegate-and-create-an-ibaction-to-register-the-clicked-menu-item"&gt;
&lt;h4&gt;Implement the validateMenuItem method in your AppDelegate and create an IBAction to register the clicked menu item.&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;Foundation&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;AppKit&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;Cocoa&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;objc&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;IBAction&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;objc&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;YES&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ModifySearchMenuAppDelegate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NSObject&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;currentItem&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;u&amp;quot;Item 1&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;applicationDidFinishLaunching_&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sender&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;NSLog&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Application did finish launching.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="nd"&gt;@IBAction&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;setCurrentMenuItem_&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sender&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;currentItem&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sender&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;validateMenuItem_&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;currentItem&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setState_&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NSOnState&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setState_&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;NSOffState&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;YES&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="connect-it-up-in-ib-don-t-forget-to-set-your-menu-template"&gt;
&lt;h4&gt;Connect it up in IB. Don't forget to set your Menu Template.&lt;/h4&gt;
&lt;p&gt;&lt;img alt="Screen shot 2010-10-07 at 4.28.00 PM.png" src="/images/2010/10/Screen-shot-2010-10-07-at-4.28.00-PM.png" /&gt;
&lt;img alt="Screen shot 2010-10-07 at 4.30.02 PM.png" src="/images/2010/10/Screen-shot-2010-10-07-at-4.30.02-PM.png" /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="once-this-is-done-clicking-one-menu-item-will-toggle-it-to-the-on-state-and-all-others-to-the-off-state-on-the-next-display"&gt;
&lt;h4&gt;Once this is done, clicking one menu item will toggle it to the on state and all others to the off state on the next display.&lt;/h4&gt;
&lt;p&gt;&lt;img alt="Screen shot 2010-10-07 at 4.30.51 PM.png" src="/images/2010/10/Screen-shot-2010-10-07-at-4.30.51-PM.png" /&gt;
&lt;img alt="Screen shot 2010-10-07 at 4.31.00 PM.png" src="/images/2010/10/Screen-shot-2010-10-07-at-4.31.00-PM.png" /&gt;
&lt;img alt="Screen shot 2010-10-07 at 4.31.09 PM.png" src="/images/2010/10/Screen-shot-2010-10-07-at-4.31.09-PM.png" /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</summary><category term="cocoa"></category><category term="objc"></category><category term="osx"></category><category term="programming"></category><category term="pyobjc"></category><category term="python"></category></entry><entry><title>Nose Unit Testing Quick Start</title><link href="http://blog.jameskyle.org/2010/10/nose-unit-testing-quick-start" rel="alternate"></link><updated>2010-10-02T15:00:00-07:00</updated><author><name>James A. Kyle</name></author><id>tag:blog.jameskyle.org,2010-10-02:2010/10/nose-unit-testing-quick-start</id><summary type="html">&lt;p&gt;This is just a quick &amp;quot;get up and running fast&amp;quot; walk through on using the
&lt;a class="reference external" href="http://somethingaboutorange.com/mrl/projects/nose/0.11.2/"&gt;Nose&lt;/a&gt; Unit Testing framework. The reference documentation for Nose is
great, but their site seems a little light on the quick start side. I
assume you have python installed. If you're unsure how to install
python, see your OS documentation.&lt;/p&gt;
&lt;div class="section" id="install-nose"&gt;
&lt;h2&gt;Install Nose&lt;/h2&gt;
&lt;p&gt;Install Nose using your OS's package manager or with easy_install. For
example:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
% easy_install nose
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="create-some-code-for-testing"&gt;
&lt;h2&gt;Create Some Code for Testing&lt;/h2&gt;
&lt;p&gt;As an example, I've created the class below I'll use in the unit test
examples.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;A&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Some Value&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;return_true&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;raise_exc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;KeyError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="create-unit-test-classes"&gt;
&lt;h2&gt;Create Unit Test Classes&lt;/h2&gt;
&lt;p&gt;There are many approaches to writing Nose unit tests. I normally write a
test class for each class or module I wish to test.&amp;nbsp;Nose will load and
run any class whose name is preceded by Test such as TestClassA or
TestA. When it discovers a class, it uses its default testMatch regex to
find any methods that match. Again, we'll use the test_method()
convention for our tests.&amp;nbsp;For more information see the&amp;nbsp; &lt;a class="reference external" href="http://somethingaboutorange.com/mrl/projects/nose/0.11.1/writing_tests.html"&gt;Writing Tests&lt;/a&gt;
reference.&lt;/p&gt;
&lt;p&gt;A few notes on the testing example.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Nose supports fixtures, though we won't use them here. I have
included the fixture methods in the below example, but only provide a
comment explaining their use in the source.&lt;/li&gt;
&lt;li&gt;The nose.tools packages comes with many helper methods that make
testing syntactically clearer for common test cases. In this example,
we use assert_equal, assert_not_equal, the raises decorator, and
assert_raises. For a full list see the&amp;nbsp;&lt;a class="reference external" href="http://somethingaboutorange.com/mrl/projects/nose/doc/module_nose.tools.html"&gt;nose.tools
documentation&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;For organizational purposes, I create a subdirectory in my project
called &amp;quot;tests&amp;quot;. This is not required.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;a&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;nose.tools&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;assert_equal&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;nose.tools&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;assert_not_equal&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;nose.tools&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;assert_raises&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;nose.tools&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;raises&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TestA&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="nd"&gt;@classmethod&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;setup_class&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;klass&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;This method is run once for each class before any tests are run&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

    &lt;span class="nd"&gt;@classmethod&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;teardown_class&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;klass&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;This method is run once for each class _after_ all tests are run&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;setUp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;This method is run once before _each_ test method is executed&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;teardown&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;This method is run once after _each_ test method is executed&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_init&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;assert_equal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Some Value&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;assert_not_equal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Incorrect Value&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_return_true&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;assert_equal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;return_true&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;assert_not_equal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;return_true&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_raise_exc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;assert_raises&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ne"&gt;KeyError&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;raise_exc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;A value&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="nd"&gt;@raises&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ne"&gt;KeyError&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_raise_exc_with_decorator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;raise_exc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;A message&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="run-tests"&gt;
&lt;h2&gt;Run Tests&lt;/h2&gt;
&lt;p&gt;All that's left is to run our tests. Nose comes with a command line
utility called 'nosetests'. The simplest usage is to call nosetests from
within your project directory and pass the 'tests' directory as an
argument. For example,&lt;/p&gt;
&lt;pre class="literal-block"&gt;
% nosetests tests
&lt;/pre&gt;
&lt;p&gt;For our examples, this outputs the following test summary:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
 % nosetests tests
....
----------------------------------------------------------------------
Ran 4 tests in 0.003s  OK
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="adding-code-coverage"&gt;
&lt;h2&gt;Adding Code Coverage&lt;/h2&gt;
&lt;p&gt;One useful metric for the completeness of your unit tests is the concept
of code coverage. Nose comes out of the box with support for the
&lt;a class="reference external" href="http://pypi.python.org/pypi/coverage"&gt;coverage module&lt;/a&gt;. First, install coverage using your package manager
or by:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
% easy_install coverage
&lt;/pre&gt;
&lt;p&gt;To generate a coverage report using the nosetests utility, simply add
the --with-coverage. By default, coverage generates data for all modules
found in the current directory.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
% nosetests --with-coverage
&lt;/pre&gt;
&lt;p&gt;If you've included a few 3rd party modules, then you could be looking at
a lot of information you don't care much about. If this is the case, you
can also specify the specific modules you wish to run reports on. In our
example, you would do so by running&lt;/p&gt;
&lt;pre class="literal-block"&gt;
% nosetests --with-coverage --cover-package a
&lt;/pre&gt;
&lt;p&gt;The --cover-package switch can be used multiple times. If you had a
b.py, you could&lt;/p&gt;
&lt;pre class="literal-block"&gt;
% nosetests --with-coverage --cover-package a --cover-package b
&lt;/pre&gt;
&lt;p&gt;If we run coverage on our example tests, we get:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
% nosetests --with-coverage
....
Name    Stmts   Miss  Cover   Missing
-------------------------------------
a           8      0   100%
----------------------------------------------------------------------
Ran 4 tests in 0.006sOK
&lt;/pre&gt;
&lt;/div&gt;
</summary><category term="programming"></category><category term="python"></category><category term="unit testing"></category><category term="utilities"></category></entry><entry><title>kindle 3 review (my first ereader)</title><link href="http://blog.jameskyle.org/2010/09/kindle-3-review-my-first-ereader" rel="alternate"></link><updated>2010-09-07T14:21:00-07:00</updated><author><name>James A. Kyle</name></author><id>tag:blog.jameskyle.org,2010-09-07:2010/09/kindle-3-review-my-first-ereader</id><summary type="html">&lt;img alt="Kindle 3G" class="align-center" src="http://g-ecx.images-amazon.com/images/G/01/kindle/shasta/photos/big-viewer-3G-01-lrg._V188696038_.jpg" style="width: 12.5%;" /&gt;
&lt;div class="section" id="introduction"&gt;
&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;I just received my Kindle 3 in the mail. I decided to purchase a Kindle
for a few reasons. The first is a larger screen than the iPhone and the
second is better low light reading. The glare from the iPhone screen
would get to me after a while, but only in low light. On the flip side,
in areas of very bright light the reflective glare makes the iPhone text
difficult to read.&lt;/p&gt;
&lt;p&gt;I thought of the iPad but rejected it because of the glare issue and it
was much more than I wanted. I have a laptop, a desktop, and iPhone. I
don't really need to add &amp;quot;really big iPhone&amp;quot; to that. When you add the
extra $400'sh to the price tag of the iPad over the Kindle and it seemed
the logical choice.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="first-impressions"&gt;
&lt;h2&gt;First Impressions&lt;/h2&gt;
&lt;div class="section" id="packaging"&gt;
&lt;h3&gt;Packaging&lt;/h3&gt;
&lt;p&gt;It's definitely small and thin. About 1/2 the thickness of an iPhone (or
less) and much thinner than an iPad. The Kindle feels lighter, so I was
surprised to find it weighed 75g more than the iPhone on my scale. I
assume because the weight is distributed over a larger area. I weighed a
couple of 300 page paperbacks off my shelf and the Kindle seems to
approximate an average weight for that size book. In short, it's very
comfortable in to hold. Not too heavy, but not feather light either.
Another important size metric for me is whether it'll fit in my pocket.
In today's device driven world I need something that I can tuck away
without too much trouble. The Kindle fit neatly &amp;nbsp;in my back pocket, no
problem. Even less problem than a folded up paperback or magazine.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="interface"&gt;
&lt;h3&gt;Interface&lt;/h3&gt;
&lt;p&gt;The interface is well designed and about as intuitive as can be. It took only a matter of seconds before I had my first book open and my settings configured. My only complaint here is the placement of the next/previous side buttons. They're just a tiny bit too low for my thumb to comfortable rest by them when holding the Kindle naturally. I'd prefer the buttons be slightly higher on the device.&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="Holding-Kindle.jpg" src="/images/2010/09/Holding-Kindle.jpg" /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="readability"&gt;
&lt;h3&gt;Readability&lt;/h3&gt;
&lt;p&gt;The text on this is jaw dropping clear. You can see from the picture
above that even black &amp;amp; white images pop. The promises of e-ink are
certainly delivered. And better yet, the text becomes &lt;em&gt;more&lt;/em&gt;clear with
greater light and not less.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="final-words"&gt;
&lt;h2&gt;Final Words&lt;/h2&gt;
&lt;p&gt;That's it for first impressions. I'll revisit this post after a couple
of weeks of use and becoming more comfortable with the device to update
any changes to my first impressions or make additions.&lt;/p&gt;
&lt;/div&gt;
</summary><category term="books"></category><category term="devices"></category><category term="ebooks"></category><category term="reviews"></category><category term="kindle"></category></entry><entry><title>Fixing repetitive software firewall prompts in OSX</title><link href="http://blog.jameskyle.org/2010/09/fix-firewall-prompts-osx" rel="alternate"></link><updated>2010-09-07T07:47:00-07:00</updated><author><name>James A. Kyle</name></author><id>tag:blog.jameskyle.org,2010-09-07:2010/09/fix-firewall-prompts-osx</id><summary type="html">&lt;p&gt;Sometimes the OS X software firewall gets stuck in a loop and will
continuously prompt to allow network access for an application.&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="49034307.jpg" src="http://blog.jameskyle.org/wp-content/uploads/2010/09/49034307.jpg" /&gt;
&lt;p class="caption"&gt;49034307.jpg&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;I've seen this happen a couple of times with iTunes. Though it can
happen with any application. A common cause is changing icons of system
applications.&lt;/p&gt;
&lt;p&gt;The fix is pretty easy though. First check if the application's code
signature is valid and if not, why:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
% codesign -vvv /Applications/iTunes.app # or the problem application
/Applications/iTunes.app: a sealed resource is missing or invalid
/Applications/iTunes.app/Contents/Resources/English.lproj/DevicePrefsNotes.nib/objects.xib: resource added
/Applications/iTunes.app/Contents/Resources/English.lproj/MobilePhonePrefs.nib/objects.xib: resource added
/Applications/iTunes.app/Contents/Resources/English.lproj/PartyShuffleSettings.nib/objects.xib: resource added
/Applications/iTunes.app/Contents/Resources/English.lproj/UniversalAccess.nib/objects.xib: resource added
&lt;/pre&gt;
&lt;p&gt;We see it fails the signing and there are some extraneous objetcs.xib
files. The error indicates these files weren't included in the original
signing of the application, they should be safe to delete. Even if we
break the application, we can always reinstall after cleaning up.&lt;/p&gt;
&lt;p&gt;After deleting each of the offending files we get a very different
output:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
% codesign -vvv /Applications/iTunes.app
/Applications/iTunes.app: valid on disk
/Applications/iTunes.app: satisfies its Designated Requirement
&lt;/pre&gt;
&lt;p&gt;No more prompting!&lt;/p&gt;
</summary><category term="administration"></category><category term="osx"></category><category term="utilities"></category></entry><entry><title>enum masks idiom in python</title><link href="http://blog.jameskyle.org/2010/09/enum-masks-idiom-in-python" rel="alternate"></link><updated>2010-09-01T13:44:00-07:00</updated><author><name>James A. Kyle</name></author><id>tag:blog.jameskyle.org,2010-09-01:2010/09/enum-masks-idiom-in-python</id><summary type="html">&lt;p&gt;We've all seen this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Foo&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="k"&gt;public&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
  &lt;span class="k"&gt;enum&lt;/span&gt; &lt;span class="n"&gt;FooType&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;FooTypeOne&lt;/span&gt;    &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mh"&gt;0x1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;FooTypeTwo&lt;/span&gt;   &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mh"&gt;0x1&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;FooTypeThree&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mh"&gt;0x1&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;FLAGS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ONE&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;TWO&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;THREE&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;FOUR&lt;/span&gt;
  &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I needed to implement something similar in python. Before doing so, I
check to see what the canonical way of doing so is (e.g. 'switch' vs.
'dispatch dictionary'). Here it is:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;ONE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;TWO&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;THREE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;FOUR&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;frozenset&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;one two three four&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;()]&lt;/span&gt;
&lt;span class="n"&gt;FLAGS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;frozenset&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;ONE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;TWO&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;THREE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;FOUR&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Foo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;print_flag&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mask&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;flag&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;FLAGS&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;flag&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;mask&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;flag&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;foo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Foo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;print_flag&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ONE&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;TWO&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Output:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;frozenset&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;one&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="nb"&gt;frozenset&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;two&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In addition to the expected binary masking functionality by leveraging
the bitwise math operators of sets, we get a human readable text &amp;quot;label&amp;quot;
for printing or displaying the flag. (thanks to Aaron Gallagher &amp;#64;
#python)&lt;/p&gt;
</summary><category term="masks"></category><category term="programming"></category><category term="python"></category></entry><entry><title>Useful Defaults Hacks for OS X</title><link href="http://blog.jameskyle.org/2010/08/osx-defaults-hacks" rel="alternate"></link><updated>2010-08-21T09:35:00-07:00</updated><author><name>James A. Kyle</name></author><id>tag:blog.jameskyle.org,2010-08-21:2010/08/osx-defaults-hacks</id><summary type="html">&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;Disable Guest Accounts for Shares on OSX Tiger&lt;/p&gt;
&lt;pre class="literal-block"&gt;
sudo defaults write /Library/Preferences/com.apple.AppleFileServer guestAccess -bool false
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Disable Dashboard&lt;/p&gt;
&lt;pre class="literal-block"&gt;
defaults write com.apple.dashboard mcx-disabled -boolean YES
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Reduce Safari Rendering delay&lt;/p&gt;
&lt;pre class="literal-block"&gt;
defaults write com.apple.Safari WebKitInitialTimedLayoutDelay 0.25
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Increase animation speed of sheets&lt;/p&gt;
&lt;pre class="literal-block"&gt;
defaults write NSGlobalDomain NSWindowResizeTime .001
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Disable spotlight&lt;/p&gt;
&lt;pre class="literal-block"&gt;
edit /etc/hostconfig to change &amp;quot;SPOTLIGHT=-YES-&amp;quot; to &amp;quot;SPOTLIGHT=-NO-&amp;quot;
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Enable Safari debug menu&lt;/p&gt;
&lt;pre class="literal-block"&gt;
defaults write com.apple.Safari IncludeDebugMenu 1
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Get rid of .DS_Store files on network shares (specifically works for
smb shares)&lt;/p&gt;
&lt;pre class="literal-block"&gt;
defaults write com.apple.desktopservices DSDontWriteNetworkStores true
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Show full path to current directory in Finder title&lt;/p&gt;
&lt;pre class="literal-block"&gt;
defaults write com.apple.finder _FXShowPosixPathInTitle -bool YES
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Mount external drives at boot rather then on user login&lt;/p&gt;
&lt;pre class="literal-block"&gt;
defaults write /Library/Preferences/SystemConfiguration/autodiskmount
&lt;/pre&gt;
&lt;p&gt;AutomountDisksWithoutUserLogin -bool true&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Setting a custom software update server for a client&lt;/p&gt;
&lt;pre class="literal-block"&gt;
defaults write /Library/Preferences/com.apple.SoftwareUpdate CatalogURL &amp;quot;http://customupdateserver.com/index.sucatalog&amp;quot;
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Show All Files in Finder&lt;/p&gt;
&lt;pre class="literal-block"&gt;
defaults write com.apple.finder AppleShowAllFiles TRUE
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Terminal Focus Follows Mouse&lt;/p&gt;
&lt;pre class="literal-block"&gt;
defaults write com.apple.Terminal FocusFollowsMouse -string YES
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Add Application to OSX Dock (example uses Calculator.app)&lt;/p&gt;
&lt;pre class="literal-block"&gt;
defaults write com.apple.dock persistent-apps -array-add &amp;quot;&amp;lt; dict&amp;gt;tile-data file-data_CFURLString /Applications/Calculator.app/_CFURLStringType0 &amp;quot;;
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Disable the OSX Crash Reporter&lt;/p&gt;
&lt;pre class="literal-block"&gt;
defaults write com.apple.CrashReporter DialogType none
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Add Recent Applications Stack to the Dock&lt;/p&gt;
&lt;pre class="literal-block"&gt;
defaults write com.apple.dock persistent-others -array-add '{ &amp;quot;tile-data&amp;quot; = { &amp;quot;list-type&amp;quot; = 1; }; &amp;quot;tile-type&amp;quot; = &amp;quot;recents-tile&amp;quot;; }'
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Change Login Screen Background&lt;/p&gt;
&lt;pre class="literal-block"&gt;
sudo defaults write /Library/Preferences/com.apple.loginwindow DesktopPicture &amp;quot;/Library/Desktop Pictures/Aqua Blue.jpg&amp;quot;
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Disable Time Machine External Disk as Backup Prompt&lt;/p&gt;
&lt;pre class="literal-block"&gt;
defaults write com.apple.TimeMachine DoNotOfferNewDisksForBackup -bool YES
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Disable mouse/trackpad acceleration&lt;/p&gt;
&lt;pre class="literal-block"&gt;
defaults write .GlobalPreferences com.apple.mouse.scaling -1
&lt;/pre&gt;
&lt;pre class="literal-block"&gt;
defaults write .GlobalPreferences com.apple.trackpad.scaling -1
&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
</summary><category term="administration"></category><category term="mac"></category><category term="osx"></category><category term="tips"></category><category term="utilities"></category></entry><entry><title>Creating a redmine email filter for postfix with virtual domains</title><link href="http://blog.jameskyle.org/2010/06/postfix-virtual-domain-redmine-filter" rel="alternate"></link><updated>2010-06-12T12:47:00-07:00</updated><author><name>James A. Kyle</name></author><id>tag:blog.jameskyle.org,2010-06-12:2010/06/postfix-virtual-domain-redmine-filter</id><summary type="html">&lt;p&gt;This is adapted from the postfix virtual redme for &lt;a class="reference external" href="http://www.postfix.org/VIRTUAL_README.html#autoreplies"&gt;autoreply
transports&lt;/a&gt;. As such, I basically copy/paste that tutorial and edited
it accordingly.&lt;/p&gt;
&lt;p&gt;This assumes that you have set up redmine at its own subdomain as well
as a postfix virtual domain, e.g. redmine.yourdomain.com and wish to
create a virtual redmine user for email processing, e.g.
&lt;a class="reference external" href="mailto:redmine&amp;#64;redmine.yourdomain.com"&gt;redmine&amp;#64;redmine.yourdomain.com&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In order to set up an redmine for virtual recipients as a final stop (no
more filters applied), set up a rule in a virtual alias table:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;/etc/postfix/main.cf:
    virtual_alias_maps = hash:/etc/postfix/virtual
/etc/postfix/virtual:
    redmine@redmine.yourdomain.com redmine@redmine.yourdomain.com@yourdomain.com
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This delivers mail sent to &lt;a class="reference external" href="mailto:redmine&amp;#64;redmine.yourdomain.com"&gt;redmine&amp;#64;redmine.yourdomain.com&lt;/a&gt; to the local
address that handles the email. We service the address locally into the
script parses emails for redmine.&lt;/p&gt;
&lt;p&gt;DO NOT list redmine.yourdomain.com in mydestination!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;/etc/postfix/main.cf:
    transport_maps = hash:/etc/postfix/transport
/etc/postfix/transport:
    redmine.yourdomain.com  redmine
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;/etc/postfix/master.cf:
redmine unix  -       n       n       -       10      pipe
    user=nobody argv=/path/to/redmine/extra/mail_handler/rdm-mailhandler.rb
    --url http://redmine.yourdomain.com --key [redmine api key] --project kspecs
    --allow-override project,priority
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This invokes/path/to/redmine/extra/mail_handler/rdm-mailhandler.rb and
pipes any email sent to the redmine domain. Redmine handles rejection of
invalid users, which is why we don’t bother with filtering valid
addresses within postfix.&lt;/p&gt;
&lt;p&gt;After this is done, do the standard postmap routine for your maps, then
postfix reload.&lt;/p&gt;
</summary><category term="administration"></category><category term="email filter"></category><category term="postfix"></category><category term="redmine"></category><category term="virtual domains"></category></entry><entry><title>Migrated old Posts</title><link href="http://blog.jameskyle.org/2010/06/migrated-old-posts" rel="alternate"></link><updated>2010-06-12T11:57:00-07:00</updated><author><name>James A. Kyle</name></author><id>tag:blog.jameskyle.org,2010-06-12:2010/06/migrated-old-posts</id><summary type="html">&lt;p&gt;I migrated my old blog posts from &lt;a class="reference external" href="http://ccn.ucla.edu/users/jkyle"&gt;CCN&lt;/a&gt; into this one via rss. It looks
like it mostly worked, formatting is a little off so my apologies for
that. I'll try to touch them up &amp;quot;as needed&amp;quot;.&lt;/p&gt;
</summary></entry><entry><title>Qt4DataFormatter (custom Xcode data formatters for Qt4 objects)</title><link href="http://blog.jameskyle.org/2010/05/xcode-qt4-data-formatter" rel="alternate"></link><updated>2010-05-23T12:43:00-07:00</updated><author><name>James A. Kyle</name></author><id>tag:blog.jameskyle.org,2010-05-23:2010/05/xcode-qt4-data-formatter</id><summary type="html">&lt;p&gt;I do most of my development on OS X, including Qt4 projects. Qt4 objects
are particularly averse to inspection in the Xcode debugger.
Fortunately, Xcode has a &lt;a class="reference external" href="http://developer.apple.com/mac/library/documentation/DeveloperTools/Conceptual/XcodeDebugging/220-Viewing_Variables_and_Memory/variables_and_memory.html"&gt;data formatter plugin API&lt;/a&gt; for displaying
summaries of &amp;nbsp;user defined objects. Unfortunately, the documentation
isn't as complete as one would hope. The example program doesn't even
compile. Through a bit of trial and error, I was able to create data
formatters for some basic Qt4 objects. Included are:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;QString&lt;/li&gt;
&lt;li&gt;QVariant&lt;/li&gt;
&lt;li&gt;QModelIndex&lt;/li&gt;
&lt;li&gt;QFile&lt;/li&gt;
&lt;li&gt;QDomNode&lt;/li&gt;
&lt;li&gt;QDomElement&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I'm adding other objects on an as needed basis. Adding other QObjects is
trivial using the existing methods as a template. Basically, you just
create a display message using a QString and standard Qt4 API's, then
have the new data formatter function return the already implemented
printQString(QString* str, int ID) method. For example, if we wished to
create a summary for QObject's that displayed the QObject's classname,
we would add a method to Qt4DataFormatter.cpp in the form of:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nf"&gt;printQObject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;QObject&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;ID&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;QString&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;ClassName: %1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="n"&gt;QString&lt;/span&gt; &lt;span class="n"&gt;className&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Undefined&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="c1"&gt;// make sure we have access to the plugin function list&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;NULL&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;_pbxgdb_plugin_functions&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;className&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ogj&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;metaObject&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;className&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;printQString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;className&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;ID&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Recompile, then install (or link) the plugin to your:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;~/Library/Application&lt;span class="se"&gt;\ &lt;/span&gt;Support/Developer/Shared/Xcode/CustomDataViews/
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;or&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;/Developer/Library/Xcode/CustomDataViews/
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It's that easy. The &lt;a class="reference external" href="http://github.com/jameskyle/Qt4DataFormatter"&gt;Qt4DataFormatter project&lt;/a&gt; is hosted on github.
Please see the README for the project as well.&lt;/p&gt;
</summary><category term="data formatters"></category><category term="programming"></category><category term="qt4"></category><category term="xcode"></category></entry><entry><title>Customized Qt4 Generated Xcode Projects</title><link href="http://blog.jameskyle.org/2010/05/customized-qt4-generated-xcode-projects" rel="alternate"></link><updated>2010-05-18T15:52:00-07:00</updated><author><name>James A. Kyle</name></author><id>tag:blog.jameskyle.org,2010-05-18:2010/05/customized-qt4-generated-xcode-projects</id><summary type="html">&lt;p&gt;One of the very nice features of Qt's qmake is the ability to generate
platform specific IDE projects. However, unless I've missed something in
the Qt docs customizing the build settings for generated projects is
very limited. Since often run qmake to update other generated files
(ui_, moc_, etc), I had to reconfigure Xcode each time. To get around
this, I wrote a Python script that that first runs qmake with -spec
macx-xcode and then modifies the generated Xcode project with custom
settings. The custom settings themselves are defined in a &lt;a class="reference external" href="http://www.yaml.org/"&gt;YAML&lt;/a&gt; file.
The script expects to be run from the Qt project directory and expects
to find a file called xcode.yml in that directory that contains your
custom build options. My xcode.yml:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="l-Scalar-Plain"&gt;pbxproject&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="l-Scalar-Plain"&gt;compatibilityVersion&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;Xcode 3.2&lt;/span&gt;
&lt;span class="l-Scalar-Plain"&gt;Debug&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="l-Scalar-Plain"&gt;ONLY_ACTIVE_ARCH&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;YES&amp;quot;&lt;/span&gt;
  &lt;span class="l-Scalar-Plain"&gt;SDKROOT&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;/Developer/SDKs/MacOSX10.6.sdk&lt;/span&gt;
  &lt;span class="l-Scalar-Plain"&gt;ARCHS&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;$(ARCHS_STANDARD_32_64_BIT)&lt;/span&gt;
  &lt;span class="l-Scalar-Plain"&gt;VALID_ARCHS&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;i386&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;x86_64&amp;quot;&lt;/span&gt;
  &lt;span class="l-Scalar-Plain"&gt;GCC_WARN_EFFECTIVE_CPLUSPLUS_VIOLATIONS&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;YES&amp;quot;&lt;/span&gt;
&lt;span class="l-Scalar-Plain"&gt;Release&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt;
  &lt;span class="l-Scalar-Plain"&gt;ONLY_ACTIVE_ARCH&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;NO&amp;quot;&lt;/span&gt;
  &lt;span class="l-Scalar-Plain"&gt;VALID_ARCHS&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;i386&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;x86_64&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;ppc&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;ppc64&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The environment variables and their values are a 1-to-1 for what you see
in Xcode's Build pane of Project Info if you right click on a field and
select &amp;quot;Show Definitions&amp;quot; and &amp;quot;Show Settings Names&amp;quot;. The source can be
downloaded &lt;a class="reference external" href="http://github.com/jameskyle/Qt4-Xcode-Config"&gt;here&lt;/a&gt;.&lt;/p&gt;
</summary><category term="programming"></category><category term="qt4"></category><category term="xcode"></category></entry><entry><title>Dell Perc 5i on Ubuntu 64</title><link href="http://blog.jameskyle.org/2010/01/dell-perc-5i-on-ubuntu-64" rel="alternate"></link><updated>2010-01-19T08:38:00-08:00</updated><author><name>James A. Kyle</name></author><id>tag:blog.jameskyle.org,2010-01-19:2010/01/dell-perc-5i-on-ubuntu-64</id><summary type="html">&lt;p&gt;I've been setting up an Ubuntu server on a Dell with a 29xx series with
a Perc 5i SAS/SATA RAID controller. It took a bit of digging around and
piecing together posts on the ubuntu forums and random blogs, but I'm
pretty sure I've got it all up and working. Here's the short story:&lt;/p&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p class="first"&gt;Add the deb ports for dell's Open Management tools to your
sources.conf&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;/etc/apt/sources.list: deb &lt;a class="reference external" href="ftp://ftp.sara.nl/pub/sara-omsa"&gt;ftp://ftp.sara.nl/pub/sara-omsa&lt;/a&gt; dell
sara&lt;/li&gt;
&lt;li&gt;add the sara key to your gpg list&lt;ol class="arabic"&gt;
&lt;li&gt;wget &lt;a class="reference external" href="http://ftp.sara.nl/debian_sara.asc"&gt;http://ftp.sara.nl/debian_sara.asc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;sudo apt-key add debian_sara.asc&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;apt-get update&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Install snmp tools&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;apt-get install snmp snmpd&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Install openipmi and ipmitool&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;apt-get install openipmi&lt;/li&gt;
&lt;li&gt;apt-get install ipmitool&lt;/li&gt;
&lt;li&gt;there's an open Ubuntu bug &lt;a class="reference external" href="https://bugs.launchpad.net/ubuntu/+source/ipmitool/+bug/110992"&gt;#110992&lt;/a&gt; that requires ipmi_devinf
and ipmi_si to be appended to /dev/modules by hand to enable
creation of the /dev/ipm* needed by ipmitool on start-up.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Install lib32 ncurses and ia32-libs&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;ol class="first arabic simple"&gt;
&lt;li&gt;apt-get install -f lib32ncurses5&lt;/li&gt;
&lt;li&gt;apt-get install -f ia32-libs&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Install dell's omsa tools&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;apt-get install dellomsa&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Update your libraries&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;ldconfig&lt;/li&gt;
&lt;li&gt;&lt;ol class="first arabic"&gt;
&lt;li&gt;this takes care of a few errors I got that looked like this&lt;/li&gt;
&lt;li&gt;/opt/dell/srvadmin/dataeng/bin/dsm_sa_datamgr32d: error while
loading shared libraries: libdcsmil32.so.5: cannot open shared
object file: No such file or directory&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Place the following init script and put it in /etc/init.d/&lt;/p&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;div class="first"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#!/bin/sh&lt;/span&gt;

/opt/dell/srvadmin/dataeng/bin/dsm_sa_datamgr32d
/opt/dell/srvadmin/dataeng/bin/dsm_sa_eventmgr32d
/opt/dell/srvadmin/dataeng/bin/dsm_sa_snmp32d

/opt/dell/srvadmin/dataeng/bin/dataeng status

/opt/dell/srvadmin/iws/bin/linux/dsm_om_connsvc start
/opt/dell/srvadmin/iws/bin/linux/dsm_om_connsvc start

/etc/init.d/dataeng stop &lt;span class="p"&gt;;&lt;/span&gt; modprobe mptctl &lt;span class="p"&gt;;&lt;/span&gt; /etc/init.d/dataeng start

/opt/dell/srvadmin/dataeng/bin/dsm_sa_datamgr32d
/opt/dell/srvadmin/dataeng/bin/dsm_sa_eventmgr32d
/opt/dell/srvadmin/dataeng/bin/dsm_sa_snmp32d

/opt/dell/srvadmin/dataeng/bin/dataeng status

/opt/dell/srvadmin/iws/bin/linux/dsm_om_connsvc start
/opt/dell/srvadmin/iws/bin/linux/dsm_om_connsvc start
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Enable snmp in omsa tools&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;/etc/init.d/dataeng enablesnmp&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Execute the dell_omsa.sh script to get up and running&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;/etc/init.d/dell_omsa.sh&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Register the new driver module with omsa&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;/etc/init.d/instsvcdrv restart&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Edit your /etc/snmp/snmpd.conf so it can be used (I take no
responsibility if the following settings are not appropriate security
for your network)&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;change: com2sec paranoid default public to com2sec readonly
default public&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Change the way taht ubuntu starts snmpd&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;/etc/default/snmpd: change&lt;/li&gt;
&lt;li&gt;SNMPDOPTS='-Lsd -Lf /dev/null -u snmp -I -smux -p
/var/run/snmpd.pid 127.0.0.1' to&lt;/li&gt;
&lt;li&gt;SNMPDOPTS='-Lsd -Lf /dev/null -u snmp -p /var/run/snmpd.pid
127.0.0.1'&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;/etc/init.d/snmpd restart&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;/etc/init.d/dataeng restart&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Verify snmpd&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;snmpwalk -OS -v 1 -c public localhost .1.3.6.1.4.1.674.10892.1&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Start OMSA web services on reboot&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;update-rc.d dsm_om_connsvc defaults&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Finally, by default you must log into the web admin with the root
account. So enable root account&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;sudo passwd root&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;One more catch for 64 bit ubuntu users, you must change the lib paths
in /etc/pam.d/omauth and install 32 bit pam libs&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;change all instances of /lib/security/ to /lib32/security&lt;/li&gt;
&lt;li&gt;download the i386 versions of the following libs (you can
determine the package that provides a particular lib by dpkg -S
/path/to/file, e.g. dpkg -S /lib/security/pam_unix.so)&lt;ol class="arabic"&gt;
&lt;li&gt;libselinux1_2.0.15-2ubuntu1_i386.deb&lt;/li&gt;
&lt;li&gt;libpam-modules_0.99.7.1-5ubuntu1_i386.deb&lt;/li&gt;
&lt;li&gt;libsepol1_2.0.3-1_i386.deb&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Extract them to a tmp directory&lt;ol class="arabic"&gt;
&lt;li&gt;dpkg-deb -x &amp;lt;libname&amp;gt; /tmp/lib32s&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;then copy the following over to /lib32 and /lib32/security&lt;ol class="arabic"&gt;
&lt;li&gt;lib/libsepol.so.1&lt;/li&gt;
&lt;li&gt;lib/libselinux.so.1&lt;/li&gt;
&lt;li&gt;lib/security/pam_unix.so&lt;/li&gt;
&lt;li&gt;lib/security/pam_nologin.so&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;run ldconfig&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;You should now be able to log into the OMSA web manager at
&lt;a class="reference external" href="https://localhost"&gt;https://localhost&lt;/a&gt;:1311 using your root name password&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Having root enabled can be viewed as a security list, so you probably
want to add a normal admin user to OMSA's manager group and disable
root&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;adduser dellroot&lt;/li&gt;
&lt;li&gt;usermod -g root dellroot # user must be added to the root group to
gain admin privileges in OMSA manager&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I'd like to thank the &lt;a class="reference external" href="http://sadsoftware.blogspot.com/2008/08/installing-dell-omsa-and-snmp-in-ubuntu.html"&gt;sad software blogger&lt;/a&gt; for a good bit of this
information, especially pertaining to snmp.&lt;/p&gt;
</summary><category term="administration"></category><category term="dell"></category><category term="perc5i"></category><category term="ubuntu"></category><category term="ubuntu64"></category></entry><entry><title>Compiling a 4-way universal perl binary on osx</title><link href="http://blog.jameskyle.org/2009/08/4-way-universal-perl" rel="alternate"></link><updated>2009-08-12T13:35:00-07:00</updated><author><name>James A. Kyle</name></author><id>tag:blog.jameskyle.org,2009-08-12:2009/08/4-way-universal-perl</id><summary type="html">&lt;p&gt;If you don't like having all of your perl modules overwritten by
cavalier osx server updates, then you're either going with a macports
install or rolling your own. And if you don't want to give up
mod_auth_apple, you're probably rolling your own.&lt;/p&gt;
&lt;p&gt;If you're using mod_perl on osx, then you've probably already run into
the issues with the 4-way httpd fat binary and a flat arch mod_perl not
working. There are various posts around the internet on how to set
archflags to get around this. However, if you're already compiling your
own perl binary the easiest method is to compile it with the flags you
want passed onto your perl modules.&lt;/p&gt;
&lt;p&gt;So this is how to compile your perl binary with a 4-way (ppc ppc64
x86_64 i686) universal arch and by extension, compile all subsequent
modules with the same:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;SDK&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/Developer/SDKs/MacOSX10.5.sdk/
./Configure -Accflags&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;-arch i686 -arch ppc -arch x86_64 -arch ppc64 \&lt;/span&gt;
&lt;span class="s2"&gt;  -fPIC -nostdinc -B&lt;/span&gt;&lt;span class="nv"&gt;$SDK&lt;/span&gt;&lt;span class="s2"&gt;/usr/include/gcc \&lt;/span&gt;
&lt;span class="s2"&gt;  -B&lt;/span&gt;&lt;span class="nv"&gt;$SDK&lt;/span&gt;&lt;span class="s2"&gt;/usr/lib/gcc -isystem&lt;/span&gt;&lt;span class="nv"&gt;$SDK&lt;/span&gt;&lt;span class="s2"&gt;/usr/include \&lt;/span&gt;
&lt;span class="s2"&gt;  -F&lt;/span&gt;&lt;span class="nv"&gt;$SDK&lt;/span&gt;&lt;span class="s2"&gt;/System/Library/Frameworks&amp;quot;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
  -Aldflags&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;-arch i686 -arch ppc -arch ppc64 -arch x86_64 \&lt;/span&gt;
&lt;span class="s2"&gt;  -Wl,-syslibroot,&lt;/span&gt;&lt;span class="nv"&gt;$SDK&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; -de

make
&lt;/pre&gt;&lt;/div&gt;
</summary><category term="administration"></category><category term="leopard"></category><category term="mac"></category><category term="osx"></category><category term="perl"></category><category term="programming"></category></entry><entry><title>30 Days with TextMate</title><link href="http://blog.jameskyle.org/2009/06/30-days-with-textmate" rel="alternate"></link><updated>2009-06-15T19:32:00-07:00</updated><author><name>James A. Kyle</name></author><id>tag:blog.jameskyle.org,2009-06-15:2009/06/30-days-with-textmate</id><summary type="html">&lt;p&gt;I've been a vim user for years, but since moving to OSX I've been
hearing a lot about TextMate. Since I always encourage others to keep an
open mind and learn new things, I decided to give this editor a solid
shot.
For the next 30 days, I'll TextMate for all my editing, coding, and
general editing needs. I'll keep a tally of pros and cons that I
encounter along the way.&lt;/p&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="15%" /&gt;
&lt;col width="35%" /&gt;
&lt;col width="51%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;&amp;nbsp;&lt;/th&gt;
&lt;th class="head"&gt;Vim&lt;/th&gt;
&lt;th class="head"&gt;Textmate&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;Snippets&lt;/td&gt;
&lt;td&gt;I'm told there's a plugin
called SnipMate, haven't
tried it yet though&lt;/td&gt;
&lt;td&gt;Killer feature, highly customizable
and flexible (any scripting language
you want.)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Stability&lt;/td&gt;
&lt;td&gt;rock solid&lt;/td&gt;
&lt;td&gt;Crashes frequently. Not every 5m or
anything, but about once or twice a
day. *Seems to be related to a bug
in the help search menu. You can
avoid crashing by not launching
commands through the help search.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</summary><category term="osx"></category><category term="programming"></category><category term="textmate"></category></entry><entry><title>ZSH networksetup completion</title><link href="http://blog.jameskyle.org/2009/03/zsh-networksetup-completion" rel="alternate"></link><updated>2009-03-05T19:32:00-08:00</updated><author><name>James A. Kyle</name></author><id>tag:blog.jameskyle.org,2009-03-05:2009/03/zsh-networksetup-completion</id><summary type="html">&lt;p&gt;A zsh completion for the osx networksetup utility. It's not 100% done,
but is mostly working. [&lt;a class="reference external" href="/source/_networksetup"&gt;download&lt;/a&gt; ]&lt;/p&gt;
</summary><category term="completion"></category><category term="zsh"></category><category term="utilities"></category></entry><entry><title>Showing tabs in Vim</title><link href="http://blog.jameskyle.org/2009/02/showing-tabs-in-vim" rel="alternate"></link><updated>2009-02-20T15:01:00-08:00</updated><author><name>James A. Kyle</name></author><id>tag:blog.jameskyle.org,2009-02-20:2009/02/showing-tabs-in-vim</id><summary type="html">&lt;p&gt;Now that the lab has decided to use Python, I occasionally run into the
dreaded &amp;quot;indentation error&amp;quot; that is darn near impossible to find by eye.
This is often due to differences in text editor settings, diff'ing two
files, etc.&lt;/p&gt;
&lt;p&gt;I've looked for some easy solution on this, the most common retort is
&amp;quot;use a decent editor&amp;quot;. Which by decent, they mean whatever you're not
using right now and if you follow the suggestions you end up playing
marry-go-round with all the most popular editors (emacs, vim, textmate,
komodo, Wing, whatever).&lt;/p&gt;
&lt;p&gt;Well, this is the best actual solution I've found when it rears its ugly
head. In vim:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="k"&gt;syn&lt;/span&gt; &lt;span class="k"&gt;match&lt;/span&gt; TAB_CHAR &lt;span class="s2"&gt;&amp;quot;\t&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="k"&gt;hi&lt;/span&gt; link TAB_CHAR Error
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;After that, you'll see nice highlighted dots showing the indentation
depth. Ugly, but then you can pick out the tabs. I'm sure all the other
excellent editors above also have this ability. :)&lt;/p&gt;
</summary><category term="editors"></category><category term="programming"></category><category term="vim"></category></entry><entry><title>Agile Project Setup for Python</title><link href="http://blog.jameskyle.org/2009/02/agile-project-setup-for-python" rel="alternate"></link><updated>2009-02-20T09:37:00-08:00</updated><author><name>James A. Kyle</name></author><id>tag:blog.jameskyle.org,2009-02-20:2009/02/agile-project-setup-for-python</id><summary type="html">&lt;p&gt;This is a quick summarization of the screen casts found at &lt;a class="reference external" href="http://showmedo.com/videos/video?name=2910000&amp;amp;fromSeriesID=291"&gt;ShowMeDo.&lt;/a&gt;.
It's a good quick reference for getting a project up and going with
nosetests, easy_install, virtualenv, pastescript, and sphinx for
documentation.&lt;/p&gt;
&lt;p&gt;This is notintendedto be a zero to go walk through or a cut/paste
example. Depending on particular setup, you may need to install various
modules before hand etc. For information on doing so, refer to beginner
python tutorials and the respective package sites.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;virtualenv mydemo
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;mydemo &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;source &lt;/span&gt;bin/activate
&lt;span class="nv"&gt;$ &lt;/span&gt;easy_install pastescript
&lt;span class="nv"&gt;$ &lt;/span&gt;mkdir src &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;cd &lt;/span&gt;src &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; paster create mypackage
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We want our modules available to interactive shells and such so:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;mypackage &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; python setup.py develop
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Setting up testing:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;easy_install nose
&lt;span class="nv"&gt;$ &lt;/span&gt;easy_install coverage
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Finally, we install sphinx for professional looking, easy to maintain
documentation.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;easy_install sphinx
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Install whatever else you need and you're ready to go.&lt;/p&gt;
&lt;p&gt;Many thanks to &lt;a class="reference external" href="http://www.percious.com"&gt;Christopher Perkins&lt;/a&gt; for putting together the screen
casts that I based this quick reference on.&lt;/p&gt;
</summary><category term="programming"></category><category term="python"></category><category term="virtualenv"></category></entry><entry><title>FIX mod_rewrite: could not init rewrite log lock in child</title><link href="http://blog.jameskyle.org/2009/02/could-not-init-rewrite-log-lock-fix" rel="alternate"></link><updated>2009-02-20T07:47:00-08:00</updated><author><name>James A. Kyle</name></author><id>tag:blog.jameskyle.org,2009-02-20:2009/02/could-not-init-rewrite-log-lock-fix</id><summary type="html">&lt;p&gt;Ran into this issue a couple of times already, duplicating it here so I
dont' have to go dig for it again:&lt;/p&gt;
&lt;p&gt;Error:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
[crit] (2)No such file or directory: mod_rewrite: could not init rewrite log lock in child
&lt;/pre&gt;
&lt;p&gt;Change This:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;RewriteEngine On
RewriteCond %{REQUEST_METHOD} ^TRACE
RewriteRule .* - [F]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;RewriteEngine On
RewriteCond %{REQUEST_METHOD} ^TRACE
RewriteRule .* - [F]
RewriteLog /var/log/apache2/rewrite.log
RewriteLogLevel 0
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Original reference is &lt;a class="reference external" href="http://blog.latcarf.com/"&gt;here&lt;/a&gt;&lt;/p&gt;
</summary><category term="administration"></category><category term="apache2"></category><category term="httpd"></category><category term="mod_rewrite"></category></entry><entry><title>Auto-Configure OSX clients for BackupPC</title><link href="http://blog.jameskyle.org/2009/02/auto-configure-osx-clients-for-backuppc" rel="alternate"></link><updated>2009-02-20T07:25:00-08:00</updated><author><name>James A. Kyle</name></author><id>tag:blog.jameskyle.org,2009-02-20:2009/02/auto-configure-osx-clients-for-backuppc</id><summary type="html">&lt;p&gt;This script auto-configures osx 10.4-10.5 clients for backup via
&lt;a class="reference external" href="http://backuppc.sourceforge.net/"&gt;BackupPC.&lt;/a&gt;&amp;nbsp;It creates a hidden backuppc user with standard
permissions. Limits that users sudo permissions to rsync, sets up
public/private key authentication, fliters all incoming ssh connections
using that key to only allow rsync commands.&lt;/p&gt;
&lt;p&gt;The project also comes with a Launchd Daemon that starts backuppc at
startup and keeps it alive if anything happens.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://github.com/jameskyle/backuppcosx/tree/master"&gt;BackupPCOSX&lt;/a&gt;&lt;/p&gt;
</summary><category term="administration"></category><category term="backup"></category><category term="backuppc"></category><category term="osx"></category></entry><entry><title>HandBrakeCLI Presets</title><link href="http://blog.jameskyle.org/2009/02/handbrakecli-presets" rel="alternate"></link><updated>2009-02-18T18:38:00-08:00</updated><author><name>James A. Kyle</name></author><id>tag:blog.jameskyle.org,2009-02-18:2009/02/handbrakecli-presets</id><summary type="html">&lt;p&gt;Found this over at snipplr, thought I'd duplicate here for my own
reference: AppleTV&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;./HandBrakeCLI -i DVD -o ~/Movies/movie.mp4 &lt;span class="se"&gt;\&lt;/span&gt;
  -B &lt;span class="m"&gt;160&lt;/span&gt; -R &lt;span class="m"&gt;48&lt;/span&gt; -E AAC -e x264 -f MP4 &lt;span class="se"&gt;\&lt;/span&gt;
  -m -p -b &lt;span class="m"&gt;2500&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
  -x &lt;span class="nv"&gt;bframes&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;3:ref&lt;span class="o"&gt;=&lt;/span&gt;1:subme&lt;span class="o"&gt;=&lt;/span&gt;5:me&lt;span class="o"&gt;=&lt;/span&gt;umh:no-fast-pskip&lt;span class="o"&gt;=&lt;/span&gt;1:no-dct-decimate&lt;span class="o"&gt;=&lt;/span&gt;1:trellis&lt;span class="o"&gt;=&lt;/span&gt;2
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;iPod&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;./HandBrakeCLI -i DVD -o ~/Movies/movie.mp4 -B &lt;span class="m"&gt;160&lt;/span&gt; -R &lt;span class="m"&gt;48&lt;/span&gt; -E AAC &lt;span class="se"&gt;\&lt;/span&gt;
  -e x264b30 -f MP4 -m -b &lt;span class="m"&gt;1500&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
  -x &lt;span class="nv"&gt;frameref&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;1:bframes&lt;span class="o"&gt;=&lt;/span&gt;0:nofast_pskip:subq&lt;span class="o"&gt;=&lt;/span&gt;6:partitions&lt;span class="o"&gt;=&lt;/span&gt;p8x8,p8x4,p4x8,i4x4:qcomp&lt;span class="o"&gt;=&lt;/span&gt;0:me&lt;span class="o"&gt;=&lt;/span&gt;umh:nodct_decimate
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;PS3&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;./HandBrakeCLI -i DVD -o ~/Movies/movie.mp4 -B &lt;span class="m"&gt;160&lt;/span&gt; -R &lt;span class="m"&gt;48&lt;/span&gt; -E AAC -e x264 -f MP4 -m -p -b &lt;span class="m"&gt;2500&lt;/span&gt; -x &lt;span class="nv"&gt;level&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;41
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;PSP&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;./HandBrakeCLI -i DVD -o ~/Movies/movie.mp4 -B &lt;span class="m"&gt;128&lt;/span&gt; -R &lt;span class="m"&gt;48&lt;/span&gt; -E AAC -e FFmpeg -f MP4 -m -b 1024
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;original link &lt;a class="reference external" href="http://snipplr.com/view/3056/handbrake-cli-presets/"&gt;snipplr.com&lt;/a&gt;&lt;/p&gt;
</summary><category term="handbrake"></category><category term="multimedia"></category><category term="presets"></category></entry><entry><title>Command Line Group Management</title><link href="http://blog.jameskyle.org/2008/12/command-line-group-management" rel="alternate"></link><updated>2008-12-16T13:53:00-08:00</updated><author><name>James A. Kyle</name></author><id>tag:blog.jameskyle.org,2008-12-16:2008/12/command-line-group-management</id><summary type="html">&lt;p&gt;Adding a user:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;dscl . append /Groups/admin GroupMembership gneagle
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Removing a user:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;dscl . delete /Groups/admin GroupMembership gneagle
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Reading the membership of the admin group:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;dscl . &lt;span class="nb"&gt;read&lt;/span&gt; /Groups/admin GroupMembership
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This comes with a nod to &lt;a class="reference external" href="http://managingosx.wordpress.com/2006/09/15/add-a-user-to-the-admin-group-via-command-line-20/"&gt;Managing OSX&lt;/a&gt;&lt;/p&gt;
</summary><category term="administration"></category><category term="dscl"></category><category term="osx"></category></entry><entry><title>Disable Extended Attributes for Tar Backup</title><link href="http://blog.jameskyle.org/2008/10/disable-extended-attributes-for-tar-backup" rel="alternate"></link><updated>2008-10-09T11:06:00-07:00</updated><author><name>James A. Kyle</name></author><id>tag:blog.jameskyle.org,2008-10-09:2008/10/disable-extended-attributes-for-tar-backup</id><summary type="html">&lt;p&gt;To disable the tar'ing of extended attributes (those pesky ._foo
files), export the following variable:&lt;/p&gt;
&lt;p&gt;For Tiger:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;COPY_EXTENDED_ATTRIBUTES_DISABLE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For Leopard &amp;amp; Snow Leopard:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;COPYFILE_DISABLE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
</summary><category term="administration"></category><category term="extended attributes"></category><category term="osx"></category><category term="tar"></category></entry><entry><title>Fixing errant Share Points</title><link href="http://blog.jameskyle.org/2008/09/fixing-errant-share-points" rel="alternate"></link><updated>2008-09-19T07:30:00-07:00</updated><author><name>James A. Kyle</name></author><id>tag:blog.jameskyle.org,2008-09-19:2008/09/fixing-errant-share-points</id><summary type="html">&lt;p&gt;Recently, I ran into an issue where Share Points which were removed from
Server Admin were showing up as stale links in my clients. Though not
deal breaking, it was annoying as it indicating some sort of corruption
in my ldap configuration.&lt;/p&gt;
&lt;p&gt;After digging around, I found that the records still existed in my
server's LDAP under /Mounts. Including a duplicate entry for my
/Network/Applications entry. By removing these and reloading the clients
automount (sudo automount), everything went back to normal.&lt;/p&gt;
</summary><category term="dscl"></category><category term="ldap"></category><category term="mac"></category><category term="osx"></category><category term="share points"></category></entry><entry><title>Leopard Server Postfix TLS Error: cannot get private key from file /etc/certificates/mycert.key</title><link href="http://blog.jameskyle.org/2008/09/leopard-server-encrypted-tls-fix" rel="alternate"></link><updated>2008-09-09T07:28:00-07:00</updated><author><name>James A. Kyle</name></author><id>tag:blog.jameskyle.org,2008-09-09:2008/09/leopard-server-encrypted-tls-fix</id><summary type="html">&lt;p&gt;The problem here is that postfix is failing on encrypted TLS certs and
OSX ServerAdmin created certs are encrypted. The fix is, as should be
expected, to unencrypt the cert:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; /etc/certificates
cp mycert.key mycert.key.saved
openssl rsa -in mycert.key -out mycert.key.out
cp -p mycert.key.out mycert.key
postfix reload
&lt;/pre&gt;&lt;/div&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;credit to the apple discussion forums.&lt;/li&gt;
&lt;/ul&gt;
</summary><category term="apple"></category><category term="leopard"></category><category term="mac"></category><category term="osx"></category></entry><entry><title>Creating postfix aliases</title><link href="http://blog.jameskyle.org/2008/09/creating-postfix-aliases" rel="alternate"></link><updated>2008-09-04T17:49:00-07:00</updated><author><name>James A. Kyle</name></author><id>tag:blog.jameskyle.org,2008-09-04:2008/09/creating-postfix-aliases</id><summary type="html">&lt;p&gt;Just&amp;nbsp;a&amp;nbsp;reminder&amp;nbsp;of&amp;nbsp;the&amp;nbsp;postfix&amp;nbsp;alias&amp;nbsp;flow.&amp;nbsp;I&amp;nbsp;don't&amp;nbsp;do&amp;nbsp;it&amp;nbsp;enough&amp;nbsp;to&amp;nbsp;remember
off&amp;nbsp;the&amp;nbsp;top&amp;nbsp;of&amp;nbsp;my&amp;nbsp;head&amp;nbsp;and&amp;nbsp;this&amp;nbsp;saves&amp;nbsp;me&amp;nbsp;the&amp;nbsp;google&amp;nbsp;time.&lt;/p&gt;
&lt;p&gt;1. edit /etc/aliases or /etc/postfix/aliases (one is a symlink to the
other):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# postalias /etc/aliases&lt;/span&gt;
&lt;span class="c"&gt;# newaliases&lt;/span&gt;
&lt;span class="c"&gt;# postfix reload&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
</summary><category term="mail"></category><category term="mtu"></category><category term="postalias"></category><category term="postfix"></category></entry><entry><title>Fix for missing X11 libraries in Leopard</title><link href="http://blog.jameskyle.org/2008/09/fix-for-missing-x11-libraries-in-leopard" rel="alternate"></link><updated>2008-09-04T17:43:00-07:00</updated><author><name>James A. Kyle</name></author><id>tag:blog.jameskyle.org,2008-09-04:2008/09/fix-for-missing-x11-libraries-in-leopard</id><summary type="html">&lt;p&gt;This solution comes straight from: &lt;a class="reference external" href="http://pennysmalls.com/2007/10/28/breakage-in-leopard-rmagick-fails-to-find-libdpstk1dylib/"&gt;Penny Smalls.&lt;/a&gt;. I've just put it
here for personal reference.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
dyld: NSLinkModule() error
dyld: Library not loaded: /usr/X11R6/lib/libdpstk.1.dylib
  Referenced from: /usr/local/lib/ruby/gems/1.8/gems/rmagick-1.15.9/lib/RMagick.bundle
  Reason: image not found
Trace/BPT trap
&lt;/pre&gt;
&lt;p&gt;Those dylib files do not exist any more. But… I have a backup (I hope
you do). I ended up doing this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; /Volumes/BackupDisk/usr/X11R6/lib
sudo cp libdps*1.0* /usr/X11R6/lib/
sudo ln -s /usr/X11R6/lib/libdpstk.1.0.dylib /usr/X11R6/lib/libdpstk.1.dylib
sudo ln -s /usr/X11R6/lib/libdps.1.0.dylib /usr/X11R6/lib/libdps.1.dylib
&lt;/pre&gt;&lt;/div&gt;
</summary><category term="apple"></category><category term="leopard"></category><category term="mac"></category><category term="osx"></category><category term="x11"></category></entry><entry><title>Compiling lapack 3.1.1 on Leopard</title><link href="http://blog.jameskyle.org/2008/08/compiling-lapack-on-leopard" rel="alternate"></link><updated>2008-08-23T08:07:00-07:00</updated><author><name>James A. Kyle</name></author><id>tag:blog.jameskyle.org,2008-08-23:2008/08/compiling-lapack-on-leopard</id><summary type="html">&lt;p&gt;OSX contains an incomplete lapack library by default in the vecLib
framework. But if you want the full power of lapack 3.1.1, you have to
compile from source. This article documents that process, mostly so when
I have to do it again I'll have a reference.&lt;/p&gt;
&lt;p&gt;The first thing we notice is that OSX does not contain a fortran
compiler in its developer tools. The &lt;a class="reference external" href="http://gcc.gnu.org/wiki/GFortran&amp;quot;"&gt;gfortran project&lt;/a&gt;&amp;nbsp; contains a
nice dmg installer. Two other options are compiling from source or using
macports. I chose macports.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;sudo port install gcc43
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Create some convenient links for standard gfortran calls.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;sudo ln -sf /opt/local/bin/gfortran-mp-4.3 /usr/local/bin/gfortran
&lt;span class="nv"&gt;$ &lt;/span&gt;sudo ln -sf /opt/local/bin/gfortran-mp-4.3 /usr/local/bin/g77
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Next download &lt;a class="reference external" href="http://www.netlib.org/lapack/lapack.tgz"&gt;lapack.tgz&lt;/a&gt;&amp;nbsp;source (current 3.1.1 as of this writing)
and untar it.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;tar xzvf lapack.tgz
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Lapack does not contain the standard configure script, so we have to
edit the make.inc ourselves. Copy the make.inc.example to make.inc, then
apply &lt;a class="reference external" href="/source/2008/08/make.inc.patch"&gt;this patch&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;patch &amp;lt; make.inc.patch
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That's it, all that's left is to compile. I do so with 6 make threads.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;make -j6
&lt;/pre&gt;&lt;/div&gt;
</summary><category term="apple"></category><category term="leopard"></category><category term="mac"></category><category term="osx"></category><category term="programming"></category></entry><entry><title>Fix for max attachment size stuck at 0 bug in leopard server</title><link href="http://blog.jameskyle.org/2008/08/fix-for-max-attachment-size-stuck-at-0-bug-in-leopard-server" rel="alternate"></link><updated>2008-08-21T15:36:00-07:00</updated><author><name>James A. Kyle</name></author><id>tag:blog.jameskyle.org,2008-08-21:2008/08/fix-for-max-attachment-size-stuck-at-0-bug-in-leopard-server</id><summary type="html">&lt;p&gt;There's a bug in Server Admin which makes the max attachment size stick
at 0 MB preventing file uploads. To fix this:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;Manually set your preferred attachment size in /etc/wikid/wikid.conf
under the &lt;em&gt;maxattachmentsize&lt;/em&gt;key&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Save file&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;restart the team server on the command line&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo serveradmin stop teams
sudo serveradmin start teams
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
</summary><category term="administration"></category><category term="apple"></category><category term="leopard"></category><category term="mac"></category><category term="osx"></category></entry></feed>