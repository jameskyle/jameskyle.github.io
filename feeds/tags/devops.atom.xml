<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>miscellaneous</title><link href="http://blog.jameskyle.org/" rel="alternate"></link><link href="http://blog.jameskyle.org/feeds/tags/devops.atom.xml" rel="self"></link><id>http://blog.jameskyle.org/</id><updated>2014-08-26T10:42:00-07:00</updated><entry><title>Deploying a Bare Metal Kubernetes Cluster</title><link href="http://blog.jameskyle.org/2014/08/deploying-baremetal-kubernetes-cluster" rel="alternate"></link><updated>2014-08-26T10:42:00-07:00</updated><author><name>James A. Kyle</name></author><id>tag:blog.jameskyle.org,2014-08-20:2014/08/deploying-baremetal-kubernetes-cluster</id><summary type="html">&lt;div class="section" id="objectives"&gt;
&lt;h2&gt;Objectives&lt;/h2&gt;
&lt;p&gt;Seems my blog needs a few updates in the buzz department. I like taking the
shotgun approach, so we're going to deploy a 5 node bare metal &lt;a class="reference external" href="https://www.docker.com"&gt;docker&lt;/a&gt; cluster
using &lt;a class="reference external" href="http://www.ansible.com/home"&gt;ansible&lt;/a&gt; for host configuration and &lt;a class="reference external" href="https://github.com/GoogleCloudPlatform/kubernetes"&gt;kubernetes&lt;/a&gt; for container management.&lt;/p&gt;
&lt;p&gt;I wish I could have squeezed &lt;a class="reference external" href="http://mesos.apache.org"&gt;mesos&lt;/a&gt; into this story. But the &lt;a class="reference external" href="https://github.com/mesosphere/kubernetes-mesos"&gt;kubernetes-mesos&lt;/a&gt;
project isn't ready for prime time yet. So that'll be a post for another day.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="requirements"&gt;
&lt;h2&gt;Requirements&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;ansible&lt;/li&gt;
&lt;li&gt;librarian-ansible&lt;/li&gt;
&lt;li&gt;git&lt;/li&gt;
&lt;li&gt;CentOS 7, RHEL 7, Fedora 20+...whatever&lt;/li&gt;
&lt;li&gt;some servers&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="get-the-ansible-work-environment"&gt;
&lt;h2&gt;Get the Ansible Work Environment&lt;/h2&gt;
&lt;p&gt;I've thrown together an &lt;a class="reference external" href="https://github.com/jameskyle/ansible-sandbox"&gt;ansible-sandbox&lt;/a&gt; project to automate the
configuration of the clients. These aren't &amp;quot;production ready&amp;quot; by any means and
almost certainly would require tweaking for a different target environment.
However, I did make a first stab best effort to generalize them and make them
moderately configurable. As such, they should serve more as a programmatic walk
through then a turnkey solution.&lt;/p&gt;
&lt;p&gt;Caveats aside, they should simplify the deployment of the environment.&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
% git clone https://github.com/jameskyle/ansible-sandbox.git
% &lt;span class="nb"&gt;cd &lt;/span&gt;ansible-sandbox
% librarian-ansible install
&lt;/pre&gt;
&lt;p&gt;There's an inventory.example file included. You'll probably want to update the
fqdn's to your local domain. The primary docker host is named 'dock1' by
default. If you wish to change this, it's done in group_vars/dockers.yml.&lt;/p&gt;
&lt;div class="section" id="hostnames-and-ansible"&gt;
&lt;h3&gt;Hostnames and Ansible&lt;/h3&gt;
&lt;p&gt;Ansible assumes it's capable of resolving the hostnames in your inventory &lt;em&gt;or&lt;/em&gt;
the ansible_ssh_host argument is set in your inventory. For example, if you
don't have a dns server set up you might want to edit your inventory to look
something like&lt;/p&gt;
&lt;pre class="literal-block"&gt;
[dockers]
dock1.mydomain.com ansible_ssh_host=192.168.1.10
&lt;/pre&gt;
&lt;p&gt;Ansible general usage is beyond the scope of this walk through, so please see
the upstream docs for any needed clarifications.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="configuring-the-bootstrap-node"&gt;
&lt;h2&gt;Configuring the Bootstrap Node&lt;/h2&gt;
&lt;p&gt;We're going to work from the assumption of a green field deployment. If the
environment already has existing support services like PXE, dns, dhcp, file
server, etc.  I trust you already know how to adapt that environment
accordingly.&lt;/p&gt;
&lt;div class="section" id="install"&gt;
&lt;h3&gt;Install&lt;/h3&gt;
&lt;p&gt;Initial install is manual. In my particular configuration, I have a root drive
in a RAID 1 and a very large storage array. I installed the OS with the
following disk configuration.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;/dev/sda1 : /boot&lt;/li&gt;
&lt;li&gt;/dev/sda2 : lvm volgroup main
- swap
- /&lt;/li&gt;
&lt;li&gt;/dev/sdb : lvm volgroup data
- /var/lib/docker, btrfs
- /var/docker/registry, ext4&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Doesn't really matter. If you want to use the btrfs driver for docker (these
scripts do), then you'll want to spin off a separate drive for mounting on
/var/lib/docker.&lt;/p&gt;
&lt;p&gt;This only needs to be done manually for the first host, our kickstart
scripts will take care of the workers.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="configure-my-user-account"&gt;
&lt;h3&gt;Configure My User Account&lt;/h3&gt;
&lt;p&gt;I'd recommend hacking together your own user (or at least replacing my key),
regardless it's really convenient to have a passwordless ssh and sudo.&lt;/p&gt;
&lt;p&gt;I use my 'jkyle' role for this and put it in a separate playbook from the site
example called jkyle.yml. The first time we run, I have to provide a password.&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
% ansible-playbook --limit dock1 &lt;span class="se"&gt;\
&lt;/span&gt;                   -i inventories/inventory.example &lt;span class="se"&gt;\
&lt;/span&gt;                   --ask-pass &lt;span class="se"&gt;\
&lt;/span&gt;                   --ask-sudo &lt;span class="se"&gt;\
&lt;/span&gt;                   playbooks/jkyle.yml
&lt;/pre&gt;
&lt;p&gt;You might see something like this&lt;/p&gt;
&lt;pre class="literal-block"&gt;
PLAY [all]
********************************************************************

GATHERING FACTS
***************************************************************
ok: [dock1]

TASK: [jkyle | Install YUM Packages]
******************************************
changed: [dock1] =&amp;gt;
(item=bind-utils,zsh,git-core,lsof,tcpdump,vim)

TASK: [jkyle | Install APT Packages]
******************************************
skipping: [dock1]

TASK: [jkyle | Create James]
**************************************************
changed: [dock1]

TASK: [jkyle | Configure jkyle sudoers]
***************************************
changed: [dock1]

TASK: [jkyle | Deploy jkyle User Key]
*****************************************
changed: [dock1]

TASK: [jkyle | Setup James Home Directory]
************************************
changed: [dock1]

TASK: [jkyle | Link James configuration files]
********************************
changed: [dock1] =&amp;gt; (item=zlogin)
changed: [dock1] =&amp;gt; (item=zlogout)
changed: [dock1] =&amp;gt; (item=zpreztorc)
changed: [dock1] =&amp;gt; (item=zprofile)
changed: [dock1] =&amp;gt; (item=zshenv)
changed: [dock1] =&amp;gt; (item=zshrc)

PLAY RECAP
********************************************************************
dock1   : ok=7    changed=6    unreachable=0    failed=0
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="services-configuration-on-primary-host"&gt;
&lt;h3&gt;Services Configuration On Primary Host&lt;/h3&gt;
&lt;div class="section" id="common"&gt;
&lt;h4&gt;Common&lt;/h4&gt;
&lt;p&gt;The common role does some general configuration of networking, hostnames, etc.
Make sure your inventory file includes the necessary group and host variables
for your network. See the inventory.example file.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="docker"&gt;
&lt;h4&gt;Docker&lt;/h4&gt;
&lt;p&gt;Our docker deployment provides both the local socket connection and a remote
API with server/client certificates. Some example certificates are found in
ansible-sandbox/librarian_roles/docker/files. However, you should probably
generate your own as these are obviously insecure...particuarly if the servers have
public ports. I generated the certs using a script and an openssl template you
found in my &lt;a class="reference external" href="https://github.com/jameskyle/CertGen"&gt;CertGen&lt;/a&gt; github repo.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
% ansible-playbook --limit dock1 \
                   -i inventories/inventory.example
                   playbooks/kubernetes.yml
&lt;/pre&gt;
&lt;p&gt;You might see something like this&lt;/p&gt;
&lt;pre class="literal-block"&gt;
PLAY [dockers]
****************************************************************

GATHERING FACTS
***************************************************************
ok: [dock1]

TASK: [common | sudoers]
******************************************************
ok: [dock1]

TASK: [common | Yum Fastest Mirror]
*******************************************
ok: [dock1]

TASK: [common | Update System]
************************************************
ok: [dock1]

TASK: [common | Install Packages]
*********************************************
ok: [dock1] =&amp;gt; (item=bridge-utils,policycoreutils-python)

TASK: [common | disalbe firewalld]
********************************************
ok: [dock1]

TASK: [common | disable network.service]
**************************************
changed: [dock1]

TASK: [common | Configure Management Interface]
*******************************
ok: [dock1]

TASK: [common | config sshd_config]
*******************************************
ok: [dock1]

TASK: [common | Base /etc/hosts Template]
*************************************
changed: [dock1]

TASK: [common | Set Hostname]
*************************************************
ok: [dock1]

TASK: [common | Build hosts file]
*********************************************
changed: [dock1] =&amp;gt; (item=dock1)
skipping: [dock1] =&amp;gt; (item=dock2)
skipping: [dock1] =&amp;gt; (item=dock3)
skipping: [dock1] =&amp;gt; (item=dock4)
skipping: [dock1] =&amp;gt; (item=dock5)

TASK: [docker | disable selinux]
**********************************************
changed: [dock1]

TASK: [docker | Install EPEL Repo]
********************************************
ok: [dock1]

TASK: [docker | Install Packages]
*********************************************
ok: [dock1] =&amp;gt; (item=docker,btrfs-progs,bridge-utils)

TASK: [docker | Install Packages]
*********************************************
skipping: [dock1]

TASK: [docker | Deploy ca.crt]
************************************************
ok: [dock1]

TASK: [docker | Deploy server.crt]
********************************************
ok: [dock1]

TASK: [docker | Deploy server.key]
********************************************
ok: [dock1]

TASK: [docker | Create docker.socket directory path]
**************************
changed: [dock1]

TASK: [docker | Create docker.socket unit]
************************************
ok: [dock1]

TASK: [docker | Link docker.socket to standard location]
**********************
skipping: [dock1]

TASK: [docker | docker.service]
***********************************************
ok: [dock1]

TASK: [docker | Add Docker Users to Docker Group]
*****************************
ok: [dock1] =&amp;gt; (item=docker_users)

TASK: [docker | Enable &amp;amp; Start Services]
**************************************
ok: [dock1] =&amp;gt; (item=docker.socket)
ok: [dock1] =&amp;gt; (item=docker.service)

PLAY RECAP
********************************************************************
dock1                      : ok=23   changed=5    unreachable=0    failed=0
&lt;/pre&gt;
&lt;p&gt;After which, the following changes would have been applied:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;A sudoers file deployed that allows individual configs in /etc/sudoers.d
and passwordless sudo for wheel group members.&lt;/li&gt;
&lt;li&gt;Installation of the yum fastest mirror plugin&lt;/li&gt;
&lt;li&gt;A full system update&lt;/li&gt;
&lt;li&gt;installation of bridge-utils, policycore utils&lt;/li&gt;
&lt;li&gt;The firewalld daemon disabled. &lt;a class="footnote-reference" href="#id4" id="id1"&gt;[*]&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;NetworkManager disabled. &lt;a class="footnote-reference" href="#id5" id="id2"&gt;[†]&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;selinux disabled. &lt;a class="footnote-reference" href="#id6" id="id3"&gt;[‡]&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;configuration of the management interface...probably already done, but this
enforces it&lt;/li&gt;
&lt;li&gt;a common sshd_config file deployed&lt;/li&gt;
&lt;li&gt;/etc/hosts populated with entries for all the docker hosts&lt;/li&gt;
&lt;li&gt;the target hosts hostname&lt;/li&gt;
&lt;li&gt;A fully functional docker server with server/client certificates.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you used the default certs, make sure to copy over the client certificate
and certificate authorities to your ~/.docker directory.&lt;/p&gt;
&lt;p&gt;You can interact with the docker server over tcp via&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
% &lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;DOCKER_HOST&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;tcp://dock1.yourdomain.com:2376
% docker --tlsverify -i -t --rm ubuntu /bin/bash
% docker --tlsverify images
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="pxe-services"&gt;
&lt;h3&gt;PXE Services&lt;/h3&gt;
&lt;p&gt;Next, we're going to deploy a container with pxe related services to bring up
the worker hosts. I've created a project that builds a pxe server container
given a specific environment context. You can use my &lt;a class="reference external" href="https://github.com/jameskyle/docker-pxe-server"&gt;docker-pxe-server&lt;/a&gt;
project, or build your own...or even just install the services on the host
itself.&lt;/p&gt;
&lt;p&gt;The readme for the project should be sufficient to get going.&lt;/p&gt;
&lt;p&gt;After pxe/dns/dhcp services are up for your environment, bounce the servers and
bring them up. I typically do this with ipmitool. A script to do so might look
something like&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
&lt;span class="k"&gt;for &lt;/span&gt;i in 11 12 13 14;do
    ipmitool -I lanplus &lt;span class="se"&gt;\
&lt;/span&gt;             -f ~/.racpasswd &lt;span class="se"&gt;\
&lt;/span&gt;             -H 192.168.19.&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;i&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt; &lt;span class="se"&gt;\
&lt;/span&gt;             -U root chassis bootdev pxe
    ipmitool -I lanplus &lt;span class="se"&gt;\
&lt;/span&gt;             -f ~/.racpasswd &lt;span class="se"&gt;\
&lt;/span&gt;             -H 192.168.19.&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;i&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt; &lt;span class="se"&gt;\
&lt;/span&gt;             -U root chassis power cycle
&lt;span class="k"&gt;done&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Of course, you'll need your actually ILO/iDrac/etc ip's. Make a cup of coffee,
catch up on the news. Whatever.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="summary"&gt;
&lt;h3&gt;Summary&lt;/h3&gt;
&lt;p&gt;That completes the initial host configuration. You should have all the key
services up such as an initial docker server &amp;amp; registry, PXE, DHCP, &amp;amp; DNS
services, and your initial user account. Finally you should have a number of
client hosts with fresh installs awaiting configuration.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="finalizing-the-cluster"&gt;
&lt;h2&gt;Finalizing the Cluster.&lt;/h2&gt;
&lt;p&gt;All that's left is configuring the client hosts and installing kubernetes.
Assuming our inventory is correctly configured in, we can just skip to what's
needed for kubernetes and then run ansible on all nodes.&lt;/p&gt;
&lt;div class="section" id="kubernetes"&gt;
&lt;h3&gt;Kubernetes&lt;/h3&gt;
&lt;p&gt;The kubernetes role assumes the required binaries and etcd are located in the&lt;/p&gt;
&lt;pre class="literal-block"&gt;
roles/kubernetes/files
&lt;/pre&gt;
&lt;p&gt;directory. These aren't bundled and since we're deploying the bleeding edge,
it's probably best to build a fresh set anyway. They both have their own build
systems that are covered in the docs, so please refer to the upstream
&lt;a class="reference external" href="https://github.com/GoogleCloudPlatform/kubernetes"&gt;kubernetes&lt;/a&gt; and &lt;a class="reference external" href="https://github.com/coreos/etcd"&gt;etcd&lt;/a&gt; project for details.&lt;/p&gt;
&lt;p&gt;A couple of hints though.&lt;/p&gt;
&lt;p&gt;For Kubernetes, you'll want to read the README.md in kubernetes's ./build
directory.&lt;/p&gt;
&lt;p&gt;For etcd, you'll probably just want to run these commands&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
docker build -t coreos/etcd .
docker run -d coreos/etcd
docker cp &amp;lt;container_id&amp;gt;:/opt/etcd/bin/etcd .
docker stop &amp;lt;container_id&amp;gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; docker rm &amp;lt;container_id&amp;gt;
&lt;/pre&gt;
&lt;p&gt;Then you have an amd64 etcd binary you can copy to roles/kubernetes/files.&lt;/p&gt;
&lt;div class="section" id="installation"&gt;
&lt;h4&gt;Installation&lt;/h4&gt;
&lt;p&gt;No more configuration should be necessary. Assuming everything's gone well so
far, the following should be sufficient&lt;/p&gt;
&lt;pre class="literal-block"&gt;
ansible-playbook --ask-pass \
                 --ask-sudo \
                 -i inventories/inventory.example \
                 playbooks/kubernetes.yml
&lt;/pre&gt;
&lt;p&gt;Notice we're no longer limiting to the dock1 host or passing specific tags to
run. Once done, you should be able to query your kubernetes minions. You can do
so from any host where kubecfg is installed. Which includes all your hosts at
/usr/local/bin/kubecfg. For example&lt;/p&gt;
&lt;pre class="literal-block"&gt;
% kubecfg -h http://dock1.pao19.tfoundry.com:8080 list minions
Minion identifier
----------
dock1
dock2
dock3
dock4
dock5
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="next-steps"&gt;
&lt;h2&gt;Next Steps.&lt;/h2&gt;
&lt;p&gt;Next up, you can deploy the &lt;a class="reference external" href="https://github.com/GoogleCloudPlatform/kubernetes/tree/master/examples/guestbook"&gt;Kubernetes GuestBook&lt;/a&gt; example. Or build your
own!&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="footnotes"&gt;
&lt;h2&gt;Footnotes&lt;/h2&gt;
&lt;table class="docutils footnote" frame="void" id="id4" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id1"&gt;[*]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;I had a hell of a time getting firewalld to work as advertised. Zones
wouldn't persist, interfaces added to multiple zones, etc. Several
upstream bugs were filed.Much easier to just write your own iptables
rules.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id5" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id2"&gt;[†]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;The network.service &amp;amp; NetworkManager seem to be mortal enemies in this
release.  You coudl tell NM manager to ignore a config, but it would
happily still muck with it...such as adding it to the default zone if
firewalld was enabled. In the end, leaving only NM running seemed to
work best.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id6" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id3"&gt;[‡]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;As of the time of this tutorial, the btrfs driver for docker does not
support selinux&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
</summary><category term="administration"></category><category term="devops"></category><category term="ansible"></category><category term="kubernetes"></category></entry><entry><title>A Boilerplate Comparison: Puppet</title><link href="http://blog.jameskyle.org/2012/07/puppet-boilerplate" rel="alternate"></link><updated>2012-07-15T15:20:00-07:00</updated><author><name>James A. Kyle</name></author><id>tag:blog.jameskyle.org,2012-07-15:2012/07/puppet-boilerplate</id><summary type="html">&lt;div class="section" id="introduction"&gt;
&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Here we cover the steps for deploying a package to a puppet agent/node.
Like with chef, we assume a working installation.&lt;/p&gt;
&lt;p&gt;Though I must take the opportunity to comment that the installation
process for puppet was ridiculously easy.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-ridiculously-easy-way"&gt;
&lt;h2&gt;The ridiculously easy way&lt;/h2&gt;
&lt;p&gt;Package installation can be performed completely through the console,
e.g. web ui, for puppet. To do so, you go to &lt;a class="reference external" href="https://puppetmaster.me.com"&gt;https://puppetmaster.me.com&lt;/a&gt;
and click 'Live Management' -&amp;gt; Advanced Tasks -&amp;gt; package tasks -&amp;gt;
Install. Type in the package name you wish to install and click 'Run'.&lt;/p&gt;
&lt;p&gt;That's it. Done.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-not-quite-ridiculously-easy-way"&gt;
&lt;h2&gt;The not quite ridiculously easy way&lt;/h2&gt;
&lt;p&gt;That seems almost too trivial. It's nice that the trivial tasks are
trivial to perform, but let's take a closer look at what it takes to
roll your own task and deploy it. It's more representative of how a
sysadmin will interact with the framework and seems more fair to chef.&lt;/p&gt;
&lt;div class="section" id="creating-a-module-from-scratch"&gt;
&lt;h3&gt;Creating a module from scratch&lt;/h3&gt;
&lt;p&gt;Puppet, like chef, can generate a module template. Puppet is very
community centric and sharing of modules is the default. As such, the
module template asks you to prepend your Puppet Forge username as it is
the best practice naming convention for shared modules. Like in our
previous walk through with chef, we're going to write a package for
installing tmux.&lt;/p&gt;
&lt;div class="section" id="create-the-package"&gt;
&lt;h4&gt;Create the package&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;% puppet module generate username-tmux
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You're rewarded with a directory like&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;Modulefile README     manifests  spec       tests
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="edit-modulefile"&gt;
&lt;h4&gt;Edit Modulefile&lt;/h4&gt;
&lt;p&gt;You should always edit the modulefile and enter pertinent information
such as version, license, description, etc.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="create-tmux-class"&gt;
&lt;h4&gt;Create tmux class&lt;/h4&gt;
&lt;p&gt;The business is in the init.pp file, we edit that and add our package
requirement.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="n"&gt;tmux&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;package&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;tmux&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="add-class-to-a-node"&gt;
&lt;h4&gt;Add class to a node&lt;/h4&gt;
&lt;p&gt;Finally, to apply the role to a node you add it to the nodes definition
in the site.pp file. This isn't a hard, fast rule. Puppet can pull node
configuration from external sources. Puppet Enterprise console provides
this and so you could use the web frontend to add the class to your list
in console and then apply it to a group. You could also provide your own
backend.&lt;/p&gt;
&lt;p&gt;However, the &amp;quot;basic&amp;quot; basic, out the box puppet involves editing the
site.pp, so we&amp;amp;squot;ll add it to the default node here&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;node&lt;/span&gt; &lt;span class="n"&gt;default&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;tmux&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We also commit the package to our repository.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;% git add modules/username-tmux manifests/site.pp
% git commit modules/username-tmux manifests/site.pp -m &lt;span class="s2"&gt;&amp;quot;added tmux module&amp;quot;&lt;/span&gt;
% git push origin master
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="comments"&gt;
&lt;h3&gt;Comments&lt;/h3&gt;
&lt;p&gt;If you noticed, we didn't cover how you upload your module and manifest
like we did in the &lt;a class="reference external" href="/2012/07/infrastructure-automation-a-boilerplate-comparison/"&gt;Chef&lt;/a&gt; article. That's because puppet doesn't have a
management tool for interacting with the puppet master like the knife
tool. Deployment is left up to the administrator. Some common methods
are using cap deploy, commit hooks, or pulling files down in a cron from
the repo.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="/2012/07/infrastructure-automation-a-boilerplate-comparison/"&gt;Previous Article&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</summary><category term="administration"></category><category term="chef"></category><category term="devops"></category><category term="infrastructure"></category><category term="linux"></category><category term="puppet"></category></entry><entry><title>Infrastructure Automation: A Boilerplate Comparison</title><link href="http://blog.jameskyle.org/2012/07/infrastructure-automation-a-boilerplate-comparison" rel="alternate"></link><updated>2012-07-08T11:33:00-07:00</updated><author><name>James A. Kyle</name></author><id>tag:blog.jameskyle.org,2012-07-08:2012/07/infrastructure-automation-a-boilerplate-comparison</id><summary type="html">&lt;div class="section" id="introduction"&gt;
&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;We've been using &lt;a class="reference external" href="http://opscode.com"&gt;Chef&lt;/a&gt; to deploy our infrastructure for a while now.
One of the main sticking points we've run into is the barrier to entry
for develoepers as a result of the boiler plate required to perform a
simple deployment task. Our ideal framework would be equally accessible
to the ops, who use the system every day, and development teams, who
know their application environments best.&lt;/p&gt;
&lt;p&gt;In that spirit, this article compares the boilerplate necessary to
perform a simple configuraiton task. Since one of the most common, and
straight forward, needs is installing a system package we'll use that as
an example. This is not intended to demonstrate that one framework is
overall &amp;quot;better&amp;quot; than another. Rather it's merely a comparison of
workflows.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="contenders"&gt;
&lt;h2&gt;Contenders&lt;/h2&gt;
&lt;p&gt;The following frameworks are covered:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://opscode.com"&gt;Chef&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://puppetlabs.com/"&gt;Puppet&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="article-series-format"&gt;
&lt;h2&gt;Article Series Format&lt;/h2&gt;
&lt;p&gt;I already have a chef environment ready to go. So first, we'll cover
that workflow. In subsequent posts, I'll cover the other frameworks.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-objective"&gt;
&lt;h2&gt;The Objective&lt;/h2&gt;
&lt;p&gt;To install the tmux package.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-chef-workflow"&gt;
&lt;h2&gt;The Chef Workflow&lt;/h2&gt;
&lt;p&gt;For the purposes of our example, we assume &lt;a class="reference external" href="http://wiki.opscode.com/display/chef/Chef+Server"&gt;Chef Server&lt;/a&gt; is already
configured and working. We also assume a working repository is already
created and the users credentials/environment is set up.&lt;/p&gt;
&lt;div class="section" id="step-one-create-a-cookbook"&gt;
&lt;h3&gt;Step One: Create a Cookbook&lt;/h3&gt;
&lt;p&gt;First, we create the chef cookbook.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
% knife cookbook create tmux
** Creating cookbook tmux
** Creating README for cookbook: tmux
** Creating metadata for cookbook: tmux
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="step-two-edit-the-default-recipe"&gt;
&lt;h3&gt;Step Two: Edit the Default Recipe&lt;/h3&gt;
&lt;p&gt;Next, we edit the package to perform the task we need. To do so, we open
the default recipe.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
% vim cookbooks/tmux/recipes/default.rb
&lt;/pre&gt;
&lt;p&gt;And add the following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;# add multiple case statements for other target platforms&lt;/span&gt;
&lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:platform&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
  &lt;span class="k"&gt;when&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;ubuntu&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;debian&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;package&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;tmux&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
      &lt;span class="n"&gt;action&lt;/span&gt; &lt;span class="ss"&gt;:install&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Though technically not required, updating the metadata is certainly best
practice.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
% vim cookbooks/tmux/metadata.rb
&lt;/pre&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;maintainer&lt;/span&gt;       &lt;span class="s2"&gt;&amp;quot;AT&amp;amp;T Foundry&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;maintainer_email&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;email@domain.com&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;license&lt;/span&gt;          &lt;span class="s2"&gt;&amp;quot;All rights reserved&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;description&lt;/span&gt;      &lt;span class="s2"&gt;&amp;quot;Installs/Configures tmux&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;long_description&lt;/span&gt; &lt;span class="no"&gt;IO&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;File&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;File&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dirname&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;__FILE__&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;README.md&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;version&lt;/span&gt;          &lt;span class="s2"&gt;&amp;quot;0.0.1&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="step-three-add-the-cookbook-to-your-repository"&gt;
&lt;h3&gt;Step Three: Add the Cookbook to Your Repository&lt;/h3&gt;
&lt;pre class="literal-block"&gt;
% git add cookbooks/tmux
% git commit cookbooks/tmux -m &amp;quot;Tmux package cookbook added&amp;quot;
% git pull origin master
% git push origin master
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="step-four-upload-cookbook-to-chef-server"&gt;
&lt;h3&gt;Step Four: Upload Cookbook to Chef Server&lt;/h3&gt;
&lt;pre class="literal-block"&gt;
% knife cookbook upload tmux
Uploading tmux
[0.0.1] upload complete
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="step-five-add-recipe-to-role"&gt;
&lt;h3&gt;Step Five: Add Recipe to Role&lt;/h3&gt;
&lt;p&gt;Next we need to add the recipe to a role. This may require the creation
of a new role. In that case, an additional creation, commit, upload is
required for the role.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
% vim roles/tmux.json
&lt;/pre&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;tmux&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;default_attributes&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;   &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;json_class&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Chef::Role&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;env_run_lists&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;   &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;run_list&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;recipe[tmux]&amp;quot;&lt;/span&gt;
  &lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;description&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Install Tmux&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;chef_type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;role&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;override_attributes&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;   &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Commit &amp;amp; Upload the role:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
% knife role from file roles/tmux.json
% git commit roles/tmux.json -m &amp;quot;added tmux role&amp;quot;
% git push origin master
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="step-six-apply-role-to-server"&gt;
&lt;h3&gt;Step Six: Apply Role to Server&lt;/h3&gt;
&lt;p&gt;The final step is applying the role to a server.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
knife bootstrap 10.4.54.9 -i ~/.ssh/keys/jk328n_rsa -d ubuntu12.04-gems-att \
  -x ubuntu --sudo -N jkyle-test -E foundry-services_pao1 -r 'role[tmux]'
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="followup-articles"&gt;
&lt;h2&gt;Followup Articles&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="/2012/07/puppet-boilerplate/"&gt;Puppet Boiler Plate&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</summary><category term="administration"></category><category term="devops"></category><category term="infrastructure"></category><category term="linux"></category></entry></feed>