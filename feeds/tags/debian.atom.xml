<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>miscellaneous</title><link href="http://blog.jameskyle.org/" rel="alternate"></link><link href="http://blog.jameskyle.org/feeds/tags/debian.atom.xml" rel="self"></link><id>http://blog.jameskyle.org/</id><updated>2012-12-10T17:42:00-08:00</updated><entry><title>Deploying Pelican Blog with Bitbucket Commit Hooks</title><link href="http://blog.jameskyle.org/2012/12/deploying-pelican-blog-with-bitbucket-commit-hooks" rel="alternate"></link><updated>2012-12-10T17:42:00-08:00</updated><author><name>James A. Kyle</name></author><id>tag:blog.jameskyle.org,2012-12-10:2012/12/deploying-pelican-blog-with-bitbucket-commit-hooks</id><summary type="html">&lt;img alt="Schaffhausen Watch" class="align-center" src="/images/2012/11/schaffhausen-watch.jpg" style="width: 362.5px; height: 282.0px;" /&gt;
&lt;div class="section" id="migrating-from-wordpress"&gt;
&lt;h2&gt;Migrating from Wordpress&lt;/h2&gt;
&lt;p&gt;I recently migrated my blog from &lt;a class="reference external" href="http://wordpress.org"&gt;Wordpress&lt;/a&gt; to &lt;a class="reference external" href="http://blog.getpelican.com"&gt;Pelican&lt;/a&gt;. There are a few
incentives to do so. Not the least of which is using &lt;a class="reference external" href="http://daringfireball.net/projects/markdown/"&gt;Markdown&lt;/a&gt; or &lt;a class="reference external" href="http://docutils.sourceforge.net/rst.html"&gt;reST&lt;/a&gt; for
markup and free distributed backups with &lt;a class="reference external" href="http://git-scm.com"&gt;Git&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;There are some drawbacks as well. The one I'd miss the most is the
ability to easily sync off line changes to your blog. I was using
&lt;a class="reference external" href="http://www.red-sweater.com/marsedit/"&gt;MarsEdit&lt;/a&gt; for this purpose and am very happy with it overall. Though I've never
been able to find a non-futzy way to edit in reST and publish to the blog. All
the workflow always involved conversion steps or copy and pasting.&lt;/p&gt;
&lt;p&gt;By migrating to Pelican + Git, I'm able to use &lt;a class="reference external" href="https://bitbucket.org"&gt;Bitbucket&lt;/a&gt;'s git service hooks
to trigger a sync &amp;amp; build cycle on my web server. This article walks through
steps required to set this up. &lt;a class="footnote-reference" href="#id3" id="id1"&gt;[1]&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-method"&gt;
&lt;h2&gt;The Method&lt;/h2&gt;
&lt;p&gt;On the back end, I set all this up by writing a little flask + uwsgi application
that does one thing and one thing only: listens for a Bitbucket POST commit
notification. It checks to see if the master branch changed and pulls down the
blog updates and regenerates the static files. The static files are then served
by nginx. I also proxy uwsgi through nginx so my api endpoint is a url like:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
http://yourdomain.com/api
or
http://api.yourdomain.com/v1
&lt;/pre&gt;
&lt;div class="section" id="install"&gt;
&lt;h3&gt;Install&lt;/h3&gt;
&lt;p&gt;First, install the necessary packages on your server:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
apt-get install nginx uwsgi uwsgi-plugin-http uwsgi-plugin-python python-pip \
                python-virtualenv
&lt;/pre&gt;
&lt;p&gt;Pelican doesn't have deb packages. So I used pip instead:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
pip install pelican
&lt;/pre&gt;
&lt;p&gt;I found my theme in the &lt;a class="reference external" href="https://github.com/getpelican/pelican-themes"&gt;pelican-themes&lt;/a&gt; repository. pelican-themes is a
collection of about 25 CSS styles for pelican. This blog is styled using
a variation of tuxlite_tbs. Whichever one you choose, it needs to be installed
on your server:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
pelican-themes -i the_theme
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="configure"&gt;
&lt;h3&gt;Configure&lt;/h3&gt;
&lt;p&gt;Configuration is based on the following assumptions. You may need to adapt the
example files if yours varies. I'll use &lt;em&gt;$fqdn&lt;/em&gt; as a substitute for your actual
blog fqdn. For example, mine would be &lt;em&gt;blog.jameskyle.org&lt;/em&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;blog repository location&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;/var/www/$fqdn&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;static files location&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;/var/www/$fqdn/output/&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;default confiugraiton location for uwsgi sockets on ubuntu&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;/var/run/uwsgi/app/$fqdn/socket&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="nginx"&gt;
&lt;h4&gt;Nginx&lt;/h4&gt;
&lt;p&gt;Nginx is used to serve our static files and also proxy to the uWSGI git service.&lt;/p&gt;
&lt;p&gt;First, I disabled the default site:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
rm /etc/nginx/sites-enabled/default
&lt;/pre&gt;
&lt;p&gt;Next, I create a conf for my blog site:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
vim /etc/nginx/conf.d/${fqdn}.conf
&lt;/pre&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;server&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="kn"&gt;listen&lt;/span&gt;   &lt;span class="mi"&gt;80&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
     &lt;span class="kn"&gt;root&lt;/span&gt; &lt;span class="s"&gt;/var/www/&lt;/span&gt;&lt;span class="nv"&gt;${fqdn}/output&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
     &lt;span class="kn"&gt;index&lt;/span&gt; &lt;span class="s"&gt;index.html&lt;/span&gt; &lt;span class="s"&gt;index.htm&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
     &lt;span class="kn"&gt;server_name&lt;/span&gt; &lt;span class="s"&gt;\*.&lt;/span&gt;&lt;span class="nv"&gt;${fqdn}&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
     &lt;span class="kn"&gt;location&lt;/span&gt; &lt;span class="s"&gt;/api&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
         &lt;span class="kn"&gt;include&lt;/span&gt; &lt;span class="s"&gt;uwsgi_params&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
         &lt;span class="kn"&gt;uwsgi_pass&lt;/span&gt; &lt;span class="s"&gt;unix:///var/run/uwsgi/app/&lt;/span&gt;&lt;span class="nv"&gt;${fqdn}/socket&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
         &lt;span class="kn"&gt;uwsgi_param&lt;/span&gt; &lt;span class="s"&gt;UWSGI_SETENV&lt;/span&gt; &lt;span class="s"&gt;PELICAN=/usr/local/bin/pelican&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
     &lt;span class="p"&gt;}&lt;/span&gt;

     &lt;span class="kn"&gt;location&lt;/span&gt; &lt;span class="s"&gt;/&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
             &lt;span class="kn"&gt;try_files&lt;/span&gt; &lt;span class="nv"&gt;$uri&lt;/span&gt; &lt;span class="nv"&gt;$uri/&lt;/span&gt; &lt;span class="s"&gt;/index.html&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
     &lt;span class="p"&gt;}&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This particular configuraion proxies to all requests made to the /api route to
the backend server. However, you could modify the proxy to suit any number of
configurations.&lt;/p&gt;
&lt;p&gt;You may notice I pass a environment variable to uwsgi. The uWSGI process runs as
the www-data user. In my testing, the user was unable to find the pelican binary
when my server spawned a 'make regenerate'. To solve that problem, I set the
PELICAN environment variable and changed the pelican Makefile to conditionally
set its PELICAN var. You can do this by executing:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
sed -i.bak 's|PELICAN=|PELICAN?=|g' Makefile
&lt;/pre&gt;
&lt;p&gt;On the Makefile generated by pelican-quickstart.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="virtualenv"&gt;
&lt;h4&gt;virtualenv&lt;/h4&gt;
&lt;p&gt;I created a virtual environment with the necessary modules for my uwsgi server.
It provides a nice segration between my system and application libraries. These
config files assume the virtualenv is located at /var/www/$fqdn/env. Update them
if you choose to drop it somewhere else.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;virtualenv /var/www/&lt;span class="nv"&gt;$fqdn&lt;/span&gt;/env
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="uwsgi"&gt;
&lt;h4&gt;uWSGI&lt;/h4&gt;
&lt;p&gt;Nginx needs something to proxy too and I used uwsgi. Gunicorn or any other wsgi
compatible backend is perfectly acceptable. I created a file
/etc/uwsgi/sites-available/$fqdn.ini with these contents&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;[uwsgi]&lt;/span&gt;
&lt;span class="na"&gt;base&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;/var/www/$fqdn&lt;/span&gt;
&lt;span class="na"&gt;gitpost&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;%(base)/utils/gitpost&lt;/span&gt;
&lt;span class="na"&gt;module&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;gitpost&lt;/span&gt;
&lt;span class="na"&gt;callable&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;app&lt;/span&gt;
&lt;span class="na"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;app&lt;/span&gt;
&lt;span class="c1"&gt;# Generic Config&lt;/span&gt;
&lt;span class="na"&gt;plugins&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;http,python&lt;/span&gt;
&lt;span class="na"&gt;home&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;%(base)/env&lt;/span&gt;
&lt;span class="na"&gt;pythonpath&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;%(base)/env&lt;/span&gt;
&lt;span class="na"&gt;chdir&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;%(gitpost)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You must then link the file to the sites-enabled directory&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;ln -s /etc/uwsgi/sites-available/&lt;span class="nv"&gt;$fqdn&lt;/span&gt;.ini /etc/uwsgi/sites-enabled/
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="bitbucket"&gt;
&lt;h4&gt;Bitbucket&lt;/h4&gt;
&lt;p&gt;Bitbucket is where the magic happens. Ok, it's not magic. It's just a POST hook
on commits. But it's what sets everything in motion. To enable that feature you
go to &lt;a class="reference external" href="http://bitbucket.org/$username/$blog-reponame"&gt;http://bitbucket.org/$username/$blog-reponame&lt;/a&gt;,  then type 'r' and 'a' in
quick succession (or click the little sprocket to the right). Next, in the left
menu click &amp;quot;Services&amp;quot;. You'll have a dropdown, select the &amp;quot;POST&amp;quot; service. Finally,
enter your blog's fqdn and api url. Given a fqdn of blog.jameskyle.org, the
examples above woudl produce an api endpoint of:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
http://blog.jameskyle.org/api
&lt;/pre&gt;
&lt;p&gt;My blog repo is public. However, if you wish to keep your raw source private
you'll need to create a public/private keypair for checking out the blog. The
private key should be stored in the www-data user's home directory. On Ubuntu
systems, the key is stored in:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
/var/www/.ssh/id_rsa
&lt;/pre&gt;
&lt;p&gt;Or id_dsa, whichever.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="gitpost"&gt;
&lt;h4&gt;gitpost&lt;/h4&gt;
&lt;p&gt;Of course, we need to have something listening on the other side of the POST hook
or it's all for naught. I wrote a little server using flask to satisfy that
function. Configurable variables are set at the top of the file. Specifically,
you'll want to set the DOCROOT variable. In this case, the DOCROOT is the
location of your blog repository.&lt;/p&gt;
&lt;p&gt;My server also logs activity. By default, it does so to:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
/var/log/gitpost/gitpost.log
&lt;/pre&gt;
&lt;p&gt;This directory should be owned by the www-data user.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;mkdir /var/log/gitpost
chown www-data:www-data -R /var/log/gitpost
&lt;/pre&gt;&lt;/div&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;json&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;logging&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;subprocess&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Popen&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;subprocess&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;PIPE&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;werkzeug.contrib.fixers&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ProxyFix&lt;/span&gt;

&lt;span class="n"&gt;DOCROOT&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;/var/www/$fqdn&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;LOGLEVEL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;INFO&lt;/span&gt;
&lt;span class="n"&gt;LOG_FORMAT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="si"&gt;%(asctime)s&lt;/span&gt;&lt;span class="s"&gt; - &lt;/span&gt;&lt;span class="si"&gt;%(name)s&lt;/span&gt;&lt;span class="s"&gt; - &lt;/span&gt;&lt;span class="si"&gt;%(levelname)s&lt;/span&gt;&lt;span class="s"&gt; - &lt;/span&gt;&lt;span class="si"&gt;%(message)s&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;DATE_FORMAT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;%Y-%m-&lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s"&gt;,%H:%M:%S&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;LOGFILE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;/var/log/gitpost/gitpost.log&amp;quot;&lt;/span&gt;

&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;wsgi_app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ProxyFix&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;wsgi_app&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setLevel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;LOGLEVEL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;formatter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Formatter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;LOG_FORMAT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;datefmt&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;DATE_FORMAT&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;fh&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FileHandler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;LOGFILE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;fh&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setFormatter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;formatter&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addHandler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fh&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Starting gitpost api application&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;log_error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;command&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;returncode&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="s"&gt;    Command: {cmd} =&amp;gt; {ret}&lt;/span&gt;
&lt;span class="s"&gt;    --------------&lt;/span&gt;

&lt;span class="s"&gt;    Output:&lt;/span&gt;
&lt;span class="s"&gt;        {out}&lt;/span&gt;

&lt;span class="s"&gt;    Error:&lt;/span&gt;
&lt;span class="s"&gt;        {err}&lt;/span&gt;
&lt;span class="s"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cmd&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;command&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ret&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;returncode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;pull&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Pulling changes from master&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;popen&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;git&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;pull&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;origin&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;master&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;popen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cmd&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Changing into {0}&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DOCROOT&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Executing: {0}&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot; &amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cmd&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;

    &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;chdir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DOCROOT&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Popen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cmd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;PIPE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;stderr&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;PIPE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;wait&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;communicate&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;returncode&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;log_error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cmd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;returncode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;publish&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Publishing blog updates&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;popen&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;make&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;publish&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;update&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Updating blog&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;pull&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;publish&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="nd"&gt;@app.route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/api&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;methods&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;POST&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;parse_request&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Parsing request&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;payload&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;loads&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;payload&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="n"&gt;branch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;commits&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;branch&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;received commit from branch: {0!r}&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;branch&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;branch&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;master&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Initiating master repo sync&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;pull&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;publish&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Finished publishing&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Received:: {0}&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;The uWSGI configuration files provided assume the gitpost script is located in:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
/var/www/$fqdn/utils
&lt;/pre&gt;
&lt;p&gt;And that the created virtualenv is located in:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
/var/www/$fqdn/env
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="final-steps"&gt;
&lt;h2&gt;Final Steps&lt;/h2&gt;
&lt;p&gt;The last thing you need to do is checkout your git repository into the docroot
directory. In our examples, this would be /var/www/$fqdn. As I mentioned before,
I store all relevant files in my repository.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;git clone git@bitbucket.org:username/reponame.git /var/www/&lt;span class="nv"&gt;$fqdn&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="evaluation"&gt;
&lt;h2&gt;Evaluation&lt;/h2&gt;
&lt;p&gt;I've found the following method to be quite low maintenance. After setting up,
the workflow involves editing your local repo, then pushing the changes to
master.&lt;/p&gt;
&lt;p&gt;My blog and all modifications to the default pelican layout, Makefile, and the
supporting scripts/configurations covered here are available at my
public &lt;a class="reference external" href="http://git.jameskyle.org/blog-jameskyle"&gt;blog repository&lt;/a&gt; along with my pelicanconf and article organization.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="what-s-next"&gt;
&lt;h2&gt;What's Next&lt;/h2&gt;
&lt;p&gt;I'm using a modified &lt;a class="reference external" href="https://github.com/nvie/gitflow"&gt;git-flow&lt;/a&gt; work flow for my article posting where 'hotfixes'
are 'articles' and features are, well, features. I want to modify the plugin
to better reflect blog posting. For example, I'd like to&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;git blog article start deploy-pelican-with-bitbucket-service-hooks
&lt;span class="c"&gt;# create article&lt;/span&gt;
git blog article finish deploy-pelican-with-bitbucket-service-hooks
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If I do make those adaptations, it'll certainly be worthy of a followup post.&lt;/p&gt;
&lt;p&gt;I'm also working on a management script that automates the steps above. For
example, configuring a new application might look like&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;./manage setup
What is your blog&lt;span class="s1"&gt;&amp;#39;s fqdn? &amp;gt; blog.jameskyle.org&lt;/span&gt;
&lt;span class="s1"&gt;What is your blog&amp;#39;&lt;/span&gt;s git repository? &amp;gt; http://git.jameskyle.org/blog-jameskyle
Checking out blog-jameskyle into /var/www/blog.jameskyle.org.....
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And so on.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="external-links"&gt;
&lt;h2&gt;External Links&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://blog.getpelican.com"&gt;Pelican&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://wordpress.org"&gt;Wordpress&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://docutils.sourceforge.net/rst.html"&gt;reST&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://git-scm.com"&gt;Git&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.red-sweater.com/marsedit/"&gt;MarsEdit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://bitbucket.org"&gt;Bitbucket&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://help.ubuntu.com/community/UFW"&gt;UFW&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/nvie/gitflow"&gt;git-flow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://git.jameskyle.org/blog-jameskyle"&gt;blog repository&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;table class="docutils footnote" frame="void" id="id3" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id1"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;The &lt;a class="reference external" href="http://docs.getpelican.com/en/3.0/importer.html"&gt;Pelican documentation&lt;/a&gt; covers this.
The import worked very well for me.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
</summary><category term="administration"></category><category term="debian"></category><category term="howtos"></category><category term="python"></category><category term="pelican"></category><category term="bitbucket"></category></entry><entry><title>Configuring OpenSwan IPSec Server</title><link href="http://blog.jameskyle.org/2012/07/configuring-openswan-ipsec-server" rel="alternate"></link><updated>2012-07-18T15:06:00-07:00</updated><author><name>James A. Kyle</name></author><id>tag:blog.jameskyle.org,2012-07-18:2012/07/configuring-openswan-ipsec-server</id><summary type="html">&lt;div class="section" id="introduction"&gt;
&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;The intent of this article is to walk through the installation,
configuration, and general debugging of OpenSwan based IPSec tunnels.
Though primarily focused on Ubuntu &amp;amp; Debian systems, non-package
management portions should apply generally.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="installation-initial-configuration"&gt;
&lt;h2&gt;Installation &amp;amp; Initial Configuration&lt;/h2&gt;
&lt;p&gt;We install using apt-get or aptitude.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;% apt-get install openswan
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For a basic PSK (Private Shared Key) configuration, there are two main
files we need to modify. The first is the configuration file,
/etc/ipsec.conf. The second is the ipsec secrets file where the PSK is
stored in /etc/ipsec.secrets.&lt;/p&gt;
&lt;div class="section" id="the-ipsec-conf-file"&gt;
&lt;h3&gt;The ipsec.conf file&lt;/h3&gt;
&lt;p&gt;There are two main sections to the ipsec configuration file. The
configuration setup section &amp;amp; the connection section.&lt;/p&gt;
&lt;div class="section" id="the-configuration-setup-section"&gt;
&lt;h4&gt;The configuration setup section&lt;/h4&gt;
&lt;p&gt;The configuration setup section begins by declaring&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;config setup
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;. The 'virtual_private 'option declares which subnets should be allowed
through the tunnel and which should be excluded. Typically, you'll wish
to exclude any networks that overlap with your private LAN.&lt;/p&gt;
&lt;p&gt;Networks are allowed by specifying the internet protocol version and the
CIDR of the allowed network. Networks are excluded by prepending the
bang symbol, '!', to the CIDR.&lt;/p&gt;
&lt;p&gt;Assuming a private network of 10.1.1.1 on a /24 network, the setup
configuration would look something like...&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;config setup
    plutoopts=&amp;quot;--perpeerlog&amp;quot;
    virtual_private=%v4:172.16.0.0/12,%v4:192.168.0.0/16,%v4:10.0.0.0/8,%v4:!10.1.1.0/24
    protostack=auto
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If either end of the tunnel is being nat'd, it may be necessary to add
the nat_traversal work around to the config setup section.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;nat_traversal=yes
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The plutoopts specified create a log for each peer that connects. The
protostack specifies which kernel protocol to use. 'auto' is generally
fine. However, if you wish to apply firewall rules to traffic coming
over the tunnel, you may wan to look into the KLIPS protocol as it
creates a unique interface for tunnel traffic, greatly reducing the
complexity of your firewall scripts.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-connection-configuration-section"&gt;
&lt;h4&gt;The connection configuration section&lt;/h4&gt;
&lt;p&gt;The connection configuration section begins with the declaration of the
'conn' keyword followed by an arbitrary connection label. An example
configuration might look like...&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;conn State-Secrets
    type=tunnel
    authby=secret
    auto=start
    pfs=no
    ike=aes256-sha1;modp1024!
    phase2alg=aes256-sha1;modp1024
    aggrmode=no    left=10.1.1.1
    right=5.5.5.5    leftsubnet=10.1.1.0/24
    rightsubnet=172.16.0.0/12
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We'll walk through each of the above connection options. It is important
to note that though the protocol allows for client negotiation of most
of these parameters with the server, in practice I've found explicitly
setting them to conform to the remote servers specifications produces
the most reliable results. If you are acting as the client, without
control of the server, obtaining a thorough specification document that
lists phase1 and phase2 algorithms can be quite the time saver. Such a
document for the above configuration might look like&lt;/p&gt;
&lt;table border="1" class="docutils"&gt;
&lt;caption&gt;Configuration Table&lt;/caption&gt;
&lt;colgroup&gt;
&lt;col width="61%" /&gt;
&lt;col width="39%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;Configuration Option&lt;/th&gt;
&lt;th class="head"&gt;Configuration Value&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;Athentication Method&lt;/td&gt;
&lt;td&gt;Pre Shared Key&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Phase 1 Encryption Scheme&lt;/td&gt;
&lt;td&gt;IKE&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Phase 1 DH Group&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Encryption Algorithm&lt;/td&gt;
&lt;td&gt;AES/256&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Hashing Algorithm&lt;/td&gt;
&lt;td&gt;SHA-1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Main or Aggressive Mode&lt;/td&gt;
&lt;td&gt;Main Mode&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Phase 1 Lifetime&lt;/td&gt;
&lt;td&gt;1440&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Phase 2 Encapsulation&lt;/td&gt;
&lt;td&gt;ESP&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Phase 2 Encryption Algorithm&lt;/td&gt;
&lt;td&gt;AES/256&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Phase 2 Authentication Algorithm&lt;/td&gt;
&lt;td&gt;SHA&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Phase 2 Perfect Forward Secrecy&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Phase 2 Lifetime&lt;/td&gt;
&lt;td&gt;3600&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Key Exchange for Subnets&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Let's walk through each of the options, look at their corresponding
value from our document, and clarify its use.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;type=tunnel
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This declares the type of connection to be formed. Since we're
configuring an ipsec tunnel, we specify 'tunnel' (I know, very
original).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;authby=secret
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This option declares the type of authentication scheme to use. IPSec
supports several different authentication schemes. 'secret' is used due
to our specification document specifying a type of &amp;quot;Pre Shared Key&amp;quot;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;auto=start
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;There's no corresponding document value for this setting. It specifies
that the ipsec tunnel should be started and routes created when the
ipsec daemon itself starts.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;pfs=no
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This value comes from our documents PFS setting.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;ike=aes256-sha1;modp1024!
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is a combination of several values in our document. It specifies
the phase 1 encryption scheme, the hashing algorithm, and the
diffie-hellman group. The modp1024 is for Diffie-Hellman 2. Why 'modp'
instead of dh? DH2 is a 1028 bit encryption algorithm that modulo's a
prime number, e.g. modp1028. See RFC 5114 for details or the wiki page
on diffie hellmann, if interested.&lt;/p&gt;
&lt;p&gt;The bang symbol, !, specifies the connection shoudl be formed in strict
mode. Technically, this is the default. However, at some point (version
wise) it was not being properly applied and it doesn't hurt.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;phase2alg=aes256-sha1;modp1024
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is a combination of several values in our document. It specifies
the phase 2 encryption scheme, the hashing algorithm, and the
diffie-hellman group just like the ike parameter.&lt;/p&gt;
&lt;p&gt;For further information on valid parameters for the ike and phase2alg
variables, please see the ipsec.conf man page.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;aggrmode=no
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Enables or disables Aggressive Mode. Agressive Mode is almost &lt;em&gt;never&lt;/em&gt;
needed and 'no' is the default. However, I've included it for clarity.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;left=10.1.1.1
right=5.5.5.5
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The 'left' and &amp;amp;39;right' arguments specify details about the two end
points of the tunnel. Which is used for which endpoint is arbitrary, but
many used left to denote the 'local' endpoint and the right to denote
the 'remote' endpoing for mnemonic reasons. This &lt;em&gt;should&lt;/em&gt; be the ip of
the peer we're attempting to connect to.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;leftsubnet=10.1.1.0/24
rightsubnet=172.16.0.0/12
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;These are the subnets that are exposed by the tunnel. Again, left and
right is arbitrary. However, consistency is obviously required. Make
sure the subnet declaration matches its corresponding left/right
endpoing declaration.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="troubleshooting"&gt;
&lt;h2&gt;Troubleshooting&lt;/h2&gt;
&lt;p&gt;Configuration is normally the easy portion of setting up an ipsec
tunnel, it's normally the debugging that takes up the majority of time.
Particularly if dealing with heterogenous peers.&lt;/p&gt;
&lt;div class="section" id="pertinent-log-files"&gt;
&lt;h3&gt;Pertinent log files&lt;/h3&gt;
&lt;p&gt;These are the log files most likely to contain important information
about why a particular tunnel is not succeeding.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;/var/log/auth.log
/var/log/syslog
/var/log/pluto/peer/a/b/c/d/a.b.c.d.log
&lt;/pre&gt;&lt;/div&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The /var/log/auth.log is where logs on the authentication
transactions are, stored.&lt;/li&gt;
&lt;li&gt;The /var/log/syslog is the system log, it's always good to check here
for any startup or general errors.&lt;/li&gt;
&lt;li&gt;/var/log/pluto/peer/a/b/c/d/a.b.c.d.log file is the per peer pluto
log. You can find some of the startup and shutdown information in
here.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="utilities"&gt;
&lt;h3&gt;Utilities&lt;/h3&gt;
&lt;p&gt;The main utilities to use are&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;tcpdump&lt;/li&gt;
&lt;li&gt;ip&lt;/li&gt;
&lt;li&gt;ipsec&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="tcpdump"&gt;
&lt;h4&gt;tcpdump&lt;/h4&gt;
&lt;p&gt;Since the traffic is encrypted, you can only track the &amp;quot;flow&amp;quot; of the
ipsec transaction to ensure all packets are reaching their destination
and routing is working as expected. However, seeing the packet flow can
be very informative.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="ip"&gt;
&lt;h4&gt;ip&lt;/h4&gt;
&lt;p&gt;The ip tool is used to ensure that the needed routes have been crated.
Alternatively, you could use something like netstat.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="ipsec"&gt;
&lt;h4&gt;ipsec&lt;/h4&gt;
&lt;p&gt;Read the man page for complete information, but the most used switch is
the status command. We configured our example connection for 'auto'. To
retrieve the status of all auto configured connections, you execute&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;% ipsec auto --status
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When debugging, I find it very useful to poll the output of this command
in one second intervales. For example,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;% &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;((&lt;/span&gt; ;; &lt;span class="o"&gt;))&lt;/span&gt;;&lt;span class="k"&gt;do &lt;/span&gt;ipsec auto --status; sleep 1; &lt;span class="k"&gt;done&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The astute may notice the 'watch' command was made for this. I
experienced glitches on some systems with ipsec status and the watch
command. YMMV.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-ipsec-secrets-file"&gt;
&lt;h4&gt;The ipsec.secrets file&lt;/h4&gt;
&lt;p&gt;The ipsec.secrets file takes the following format&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;leftid1 rightid1 : PSK &amp;quot;preshared key1&amp;quot;
leftid2 rightid2 : PSK &amp;quot;preshared key2&amp;quot;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The secrets file can have multiple entries. Of note, the combination of
the leftid1 + rightid1 must be unique for each tunnel in order for the
PSK lookup to succeed.&lt;/p&gt;
&lt;p&gt;If you're only managing a single ipsec tunnel, using the the special
catch all %any can work well. Such a config would look like this&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;%any %any : PSK &amp;quot;preshared key&amp;quot;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="gotchas-to-keep-an-eye-out-for"&gt;
&lt;h3&gt;'Gotchas' to keep an eye out for&lt;/h3&gt;
&lt;p&gt;There are a few problems that seem to come up over and over and over
again. I cover those here in brief along with ways to eliminate them as
suspects. . . or at least ways to &lt;em&gt;confirm&lt;/em&gt; if not completely eliminate.&lt;/p&gt;
&lt;div class="section" id="mismatched-peer-identities"&gt;
&lt;h4&gt;Mismatched Peer Identities&lt;/h4&gt;
&lt;p&gt;This comes up quite a bit. Keep an eye out for messages from the peer
like 'no proposal found for peer' or connections that make it through
phase 1, but fail to complete phase 2. Another way to verify is by
inspecting the status output. You'll find a line like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;10.1.1.0/24===10.1.1.1&amp;lt;10.1.1.1&amp;gt;[+S=C]...5.5.5.5&amp;lt;5.5.5.5&amp;gt;[+S=C]===172.16.0.0/12; erouted; eroute owner: #6
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That line indicates that the ips of the endpoints are being used as the
peer id. It also declares the subnet being exposed. The standard default
for peer id&amp;amp;39;s is the ip of the peer. However, this is not required.
Nor is it uncommon for it to be overridden by a remote admin. If you
suspect a peer id mismatch, the remote peer admin should be able to
provide you with her routers configuration.&lt;/p&gt;
&lt;p&gt;Peer id's &lt;em&gt;must&lt;/em&gt; match.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="mismatched-configurations"&gt;
&lt;h4&gt;Mismatched configurations&lt;/h4&gt;
&lt;p&gt;This is pretty vague. In the end, virtually &lt;em&gt;all&lt;/em&gt; connection problems
boil down to mismatched configurations. However, it still bears
mentioning as it is eminently worth it to go over configurations
repeatedly to ensure they match up.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</summary><category term="administration"></category><category term="debian"></category><category term="howtos"></category><category term="openswan"></category></entry><entry><title>Chef Alternatives for Debian/Ubuntu</title><link href="http://blog.jameskyle.org/2012/02/chef-alternatives-for-debian-ubuntu" rel="alternate"></link><updated>2012-02-05T10:32:00-08:00</updated><author><name>James A. Kyle</name></author><id>tag:blog.jameskyle.org,2012-02-05:2012/02/chef-alternatives-for-debian-ubuntu</id><summary type="html">&lt;p&gt;An update-alternatives script for chef. Currently only sets up a version
installed in the 1.9.1 gems directory, but extendable to any version
easily enough.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#!/bin/bash&lt;/span&gt;
&lt;span class="nv"&gt;RUBY_VERSION&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;1.9.1
&lt;span class="nv"&gt;CHEF_VERSION&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;0.10.8
&lt;span class="nv"&gt;GEM_ROOT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/var/lib/gems/&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;RUBY_VERSION&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;/gems/chef-&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;CHEF_VERSION&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;update-alternatives &lt;span class="se"&gt;\&lt;/span&gt;
   --install /usr/bin/chef-client chef &lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;GEM_ROOT&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;/bin/chef-client 500 &lt;span class="se"&gt;\&lt;/span&gt;
   --slave /usr/bin/chef-solo chef-solo &lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;GEM_ROOT&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;/bin/chef-solo &lt;span class="se"&gt;\&lt;/span&gt;
   --slave /usr/bin/knife knife &lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;GEM_ROOT&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;/bin/knife &lt;span class="se"&gt;\&lt;/span&gt;
   --slave /usr/bin/shef shef  &lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;GEM_ROOT&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;/bin/shef
&lt;/pre&gt;&lt;/div&gt;
</summary><category term="administration"></category><category term="debian"></category><category term="linux"></category><category term="ubuntu"></category></entry><entry><title>Ruby Alternatives for Debian/Ubuntu</title><link href="http://blog.jameskyle.org/2012/02/ruby-alternatives-for-debianubuntu" rel="alternate"></link><updated>2012-02-05T10:14:00-08:00</updated><author><name>James A. Kyle</name></author><id>tag:blog.jameskyle.org,2012-02-05:2012/02/ruby-alternatives-for-debianubuntu</id><summary type="html">&lt;p&gt;A quick update-alternatives script for ruby versions on debian based
systems. It only includes the ruby binaries, man pages, etc. included in
the ruby1.8 and ruby1.9.1 debs. It's defaults to '1.9' when in auto
mode.&lt;/p&gt;
&lt;p&gt;After running the script, you can switch between ruby version via&lt;/p&gt;
&lt;pre class="literal-block"&gt;
% update-alternatives --config ruby
&lt;/pre&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#!/bin/bash&lt;/span&gt;
&lt;span class="nv"&gt;RUBY_VERSION&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;1.9.1update-alternatives &lt;span class="se"&gt;\&lt;/span&gt;
   --install /usr/bin/ruby ruby /usr/bin/ruby&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;RUBY_VERSION&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt; 500 &lt;span class="se"&gt;\&lt;/span&gt;
   --slave /usr/bin/erb erb /usr/bin/erb&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;RUBY_VERSION&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
   --slave /usr/bin/rake rake /usr/bin/rake&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;RUBY_VERSION&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
   --slave /usr/bin/irb irb /usr/bin/irb&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;RUBY_VERSION&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
   --slave /usr/bin/gem gem /usr/bin/gem&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;RUBY_VERSION&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
   --slave /usr/bin/rdoc rdoc /usr/bin/rdoc&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;RUBY_VERSION&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
   --slave /usr/bin/testrb testrb /usr/bin/testrb&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;RUBY_VERSION&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
   --slave /usr/share/man/man1/rdoc.1.gz rdoc.1.gz &lt;span class="se"&gt;\&lt;/span&gt;
       /usr/share/man/man1/rdoc&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;RUBY_VERSION&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;.1.gz &lt;span class="se"&gt;\&lt;/span&gt;
   --slave /usr/share/man/man1/testrb.1.gz testrb.1.gz &lt;span class="se"&gt;\&lt;/span&gt;
       /usr/share/man/man1/testrb&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;RUBY_VERSION&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;.1.gz &lt;span class="se"&gt;\&lt;/span&gt;
   --slave /usr/share/man/man1/rake.1.gz rake.1.gz &lt;span class="se"&gt;\&lt;/span&gt;
       /usr/share/man/man1/rake&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;RUBY_VERSION&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;.1.gz &lt;span class="se"&gt;\&lt;/span&gt;
   --slave /usr/share/man/man1/irb.1.gz irb.1.gz &lt;span class="se"&gt;\&lt;/span&gt;
       /usr/share/man/man1/irb&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;RUBY_VERSION&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;.1.gz &lt;span class="se"&gt;\&lt;/span&gt;
   --slave /usr/share/man/man1/erb.1.gz erb.1.gz &lt;span class="se"&gt;\&lt;/span&gt;
       /usr/share/man/man1/erb&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;RUBY_VERSION&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;.1.gz &lt;span class="se"&gt;\&lt;/span&gt;
   --slave /usr/share/man/man1/gem.1.gz gem.1.gz &lt;span class="se"&gt;\&lt;/span&gt;
       /usr/share/man/man1/gem&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;RUBY_VERSION&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;.1.gz &lt;span class="se"&gt;\&lt;/span&gt;
   --slave /usr/share/man/man1/ruby.1.gz ruby.1.gz &lt;span class="se"&gt;\&lt;/span&gt;
           /usr/share/man/man1/ruby&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;RUBY_VERSION&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;.1.gz &lt;span class="se"&gt;\&lt;/span&gt;
   --slave /usr/share/menu/ruby ruby_menu /usr/share/menu/ruby&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;RUBY_VERSION&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt; &lt;span class="nv"&gt;RUBY_VERSION&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;1.8update-alternatives &lt;span class="se"&gt;\&lt;/span&gt;
   --install /usr/bin/ruby ruby /usr/bin/ruby&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;RUBY_VERSION&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt; 400 &lt;span class="se"&gt;\&lt;/span&gt;
   --slave /usr/bin/erb erb /usr/bin/erb&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;RUBY_VERSION&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
   --slave /usr/bin/irb irb /usr/bin/irb&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;RUBY_VERSION&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
   --slave /usr/bin/rdoc rdoc /usr/bin/rdoc&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;RUBY_VERSION&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
   --slave /usr/bin/testrb testrb /usr/bin/testrb&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;RUBY_VERSION&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
   --slave /usr/share/man/man1/rdoc.1.gz rdoc.1.gz &lt;span class="se"&gt;\&lt;/span&gt;
       /usr/share/man/man1/rdoc&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;RUBY_VERSION&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;.1.gz &lt;span class="se"&gt;\&lt;/span&gt;
   --slave /usr/share/man/man1/testrb.1.gz testrb.1.gz &lt;span class="se"&gt;\&lt;/span&gt;
       /usr/share/man/man1/testrb&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;RUBY_VERSION&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;.1.gz &lt;span class="se"&gt;\&lt;/span&gt;
   --slave /usr/share/man/man1/irb.1.gz irb.1.gz &lt;span class="se"&gt;\&lt;/span&gt;
       /usr/share/man/man1/irb&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;RUBY_VERSION&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;.1.gz &lt;span class="se"&gt;\&lt;/span&gt;
   --slave /usr/share/man/man1/erb.1.gz erb.1.gz &lt;span class="se"&gt;\&lt;/span&gt;
       /usr/share/man/man1/erb&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;RUBY_VERSION&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;.1.gz &lt;span class="se"&gt;\&lt;/span&gt;
   --slave /usr/share/man/man1/ruby.1.gz ruby.1.gz &lt;span class="se"&gt;\&lt;/span&gt;
       /usr/share/man/man1/ruby&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;RUBY_VERSION&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;.1.gz &lt;span class="se"&gt;\&lt;/span&gt;
   --slave /usr/share/menu/ruby ruby_menu &lt;span class="se"&gt;\&lt;/span&gt;
       /usr/share/menu/ruby&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;RUBY_VERSION&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
</summary><category term="administration"></category><category term="debian"></category><category term="linux"></category></entry></feed>