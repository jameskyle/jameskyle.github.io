<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>miscellaneous</title><link href="http://blog.jameskyle.org/" rel="alternate"></link><link href="http://blog.jameskyle.org/feeds/tags/openswan.atom.xml" rel="self"></link><id>http://blog.jameskyle.org/</id><updated>2012-07-18T15:06:00-07:00</updated><entry><title>Configuring OpenSwan IPSec Server</title><link href="http://blog.jameskyle.org/2012/07/configuring-openswan-ipsec-server" rel="alternate"></link><updated>2012-07-18T15:06:00-07:00</updated><author><name>James A. Kyle</name></author><id>tag:blog.jameskyle.org,2012-07-18:2012/07/configuring-openswan-ipsec-server</id><summary type="html">&lt;div class="section" id="introduction"&gt;
&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;The intent of this article is to walk through the installation,
configuration, and general debugging of OpenSwan based IPSec tunnels.
Though primarily focused on Ubuntu &amp;amp; Debian systems, non-package
management portions should apply generally.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="installation-initial-configuration"&gt;
&lt;h2&gt;Installation &amp;amp; Initial Configuration&lt;/h2&gt;
&lt;p&gt;We install using apt-get or aptitude.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;% apt-get install openswan
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For a basic PSK (Private Shared Key) configuration, there are two main
files we need to modify. The first is the configuration file,
/etc/ipsec.conf. The second is the ipsec secrets file where the PSK is
stored in /etc/ipsec.secrets.&lt;/p&gt;
&lt;div class="section" id="the-ipsec-conf-file"&gt;
&lt;h3&gt;The ipsec.conf file&lt;/h3&gt;
&lt;p&gt;There are two main sections to the ipsec configuration file. The
configuration setup section &amp;amp; the connection section.&lt;/p&gt;
&lt;div class="section" id="the-configuration-setup-section"&gt;
&lt;h4&gt;The configuration setup section&lt;/h4&gt;
&lt;p&gt;The configuration setup section begins by declaring&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;config setup
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;. The 'virtual_private 'option declares which subnets should be allowed
through the tunnel and which should be excluded. Typically, you'll wish
to exclude any networks that overlap with your private LAN.&lt;/p&gt;
&lt;p&gt;Networks are allowed by specifying the internet protocol version and the
CIDR of the allowed network. Networks are excluded by prepending the
bang symbol, '!', to the CIDR.&lt;/p&gt;
&lt;p&gt;Assuming a private network of 10.1.1.1 on a /24 network, the setup
configuration would look something like...&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;config setup
    plutoopts=&amp;quot;--perpeerlog&amp;quot;
    virtual_private=%v4:172.16.0.0/12,%v4:192.168.0.0/16,%v4:10.0.0.0/8,%v4:!10.1.1.0/24
    protostack=auto
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If either end of the tunnel is being nat'd, it may be necessary to add
the nat_traversal work around to the config setup section.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;nat_traversal=yes
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The plutoopts specified create a log for each peer that connects. The
protostack specifies which kernel protocol to use. 'auto' is generally
fine. However, if you wish to apply firewall rules to traffic coming
over the tunnel, you may wan to look into the KLIPS protocol as it
creates a unique interface for tunnel traffic, greatly reducing the
complexity of your firewall scripts.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-connection-configuration-section"&gt;
&lt;h4&gt;The connection configuration section&lt;/h4&gt;
&lt;p&gt;The connection configuration section begins with the declaration of the
'conn' keyword followed by an arbitrary connection label. An example
configuration might look like...&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;conn State-Secrets
    type=tunnel
    authby=secret
    auto=start
    pfs=no
    ike=aes256-sha1;modp1024!
    phase2alg=aes256-sha1;modp1024
    aggrmode=no    left=10.1.1.1
    right=5.5.5.5    leftsubnet=10.1.1.0/24
    rightsubnet=172.16.0.0/12
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We'll walk through each of the above connection options. It is important
to note that though the protocol allows for client negotiation of most
of these parameters with the server, in practice I've found explicitly
setting them to conform to the remote servers specifications produces
the most reliable results. If you are acting as the client, without
control of the server, obtaining a thorough specification document that
lists phase1 and phase2 algorithms can be quite the time saver. Such a
document for the above configuration might look like&lt;/p&gt;
&lt;table border="1" class="docutils"&gt;
&lt;caption&gt;Configuration Table&lt;/caption&gt;
&lt;colgroup&gt;
&lt;col width="61%" /&gt;
&lt;col width="39%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;Configuration Option&lt;/th&gt;
&lt;th class="head"&gt;Configuration Value&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;Athentication Method&lt;/td&gt;
&lt;td&gt;Pre Shared Key&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Phase 1 Encryption Scheme&lt;/td&gt;
&lt;td&gt;IKE&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Phase 1 DH Group&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Encryption Algorithm&lt;/td&gt;
&lt;td&gt;AES/256&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Hashing Algorithm&lt;/td&gt;
&lt;td&gt;SHA-1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Main or Aggressive Mode&lt;/td&gt;
&lt;td&gt;Main Mode&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Phase 1 Lifetime&lt;/td&gt;
&lt;td&gt;1440&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Phase 2 Encapsulation&lt;/td&gt;
&lt;td&gt;ESP&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Phase 2 Encryption Algorithm&lt;/td&gt;
&lt;td&gt;AES/256&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Phase 2 Authentication Algorithm&lt;/td&gt;
&lt;td&gt;SHA&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Phase 2 Perfect Forward Secrecy&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Phase 2 Lifetime&lt;/td&gt;
&lt;td&gt;3600&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Key Exchange for Subnets&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Let's walk through each of the options, look at their corresponding
value from our document, and clarify its use.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;type=tunnel
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This declares the type of connection to be formed. Since we're
configuring an ipsec tunnel, we specify 'tunnel' (I know, very
original).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;authby=secret
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This option declares the type of authentication scheme to use. IPSec
supports several different authentication schemes. 'secret' is used due
to our specification document specifying a type of &amp;quot;Pre Shared Key&amp;quot;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;auto=start
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;There's no corresponding document value for this setting. It specifies
that the ipsec tunnel should be started and routes created when the
ipsec daemon itself starts.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;pfs=no
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This value comes from our documents PFS setting.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;ike=aes256-sha1;modp1024!
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is a combination of several values in our document. It specifies
the phase 1 encryption scheme, the hashing algorithm, and the
diffie-hellman group. The modp1024 is for Diffie-Hellman 2. Why 'modp'
instead of dh? DH2 is a 1028 bit encryption algorithm that modulo's a
prime number, e.g. modp1028. See RFC 5114 for details or the wiki page
on diffie hellmann, if interested.&lt;/p&gt;
&lt;p&gt;The bang symbol, !, specifies the connection shoudl be formed in strict
mode. Technically, this is the default. However, at some point (version
wise) it was not being properly applied and it doesn't hurt.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;phase2alg=aes256-sha1;modp1024
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is a combination of several values in our document. It specifies
the phase 2 encryption scheme, the hashing algorithm, and the
diffie-hellman group just like the ike parameter.&lt;/p&gt;
&lt;p&gt;For further information on valid parameters for the ike and phase2alg
variables, please see the ipsec.conf man page.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;aggrmode=no
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Enables or disables Aggressive Mode. Agressive Mode is almost &lt;em&gt;never&lt;/em&gt;
needed and 'no' is the default. However, I've included it for clarity.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;left=10.1.1.1
right=5.5.5.5
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The 'left' and &amp;amp;39;right' arguments specify details about the two end
points of the tunnel. Which is used for which endpoint is arbitrary, but
many used left to denote the 'local' endpoint and the right to denote
the 'remote' endpoing for mnemonic reasons. This &lt;em&gt;should&lt;/em&gt; be the ip of
the peer we're attempting to connect to.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;leftsubnet=10.1.1.0/24
rightsubnet=172.16.0.0/12
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;These are the subnets that are exposed by the tunnel. Again, left and
right is arbitrary. However, consistency is obviously required. Make
sure the subnet declaration matches its corresponding left/right
endpoing declaration.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="troubleshooting"&gt;
&lt;h2&gt;Troubleshooting&lt;/h2&gt;
&lt;p&gt;Configuration is normally the easy portion of setting up an ipsec
tunnel, it's normally the debugging that takes up the majority of time.
Particularly if dealing with heterogenous peers.&lt;/p&gt;
&lt;div class="section" id="pertinent-log-files"&gt;
&lt;h3&gt;Pertinent log files&lt;/h3&gt;
&lt;p&gt;These are the log files most likely to contain important information
about why a particular tunnel is not succeeding.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;/var/log/auth.log
/var/log/syslog
/var/log/pluto/peer/a/b/c/d/a.b.c.d.log
&lt;/pre&gt;&lt;/div&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The /var/log/auth.log is where logs on the authentication
transactions are, stored.&lt;/li&gt;
&lt;li&gt;The /var/log/syslog is the system log, it's always good to check here
for any startup or general errors.&lt;/li&gt;
&lt;li&gt;/var/log/pluto/peer/a/b/c/d/a.b.c.d.log file is the per peer pluto
log. You can find some of the startup and shutdown information in
here.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="utilities"&gt;
&lt;h3&gt;Utilities&lt;/h3&gt;
&lt;p&gt;The main utilities to use are&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;tcpdump&lt;/li&gt;
&lt;li&gt;ip&lt;/li&gt;
&lt;li&gt;ipsec&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="tcpdump"&gt;
&lt;h4&gt;tcpdump&lt;/h4&gt;
&lt;p&gt;Since the traffic is encrypted, you can only track the &amp;quot;flow&amp;quot; of the
ipsec transaction to ensure all packets are reaching their destination
and routing is working as expected. However, seeing the packet flow can
be very informative.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="ip"&gt;
&lt;h4&gt;ip&lt;/h4&gt;
&lt;p&gt;The ip tool is used to ensure that the needed routes have been crated.
Alternatively, you could use something like netstat.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="ipsec"&gt;
&lt;h4&gt;ipsec&lt;/h4&gt;
&lt;p&gt;Read the man page for complete information, but the most used switch is
the status command. We configured our example connection for 'auto'. To
retrieve the status of all auto configured connections, you execute&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;% ipsec auto --status
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When debugging, I find it very useful to poll the output of this command
in one second intervales. For example,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;% &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;((&lt;/span&gt; ;; &lt;span class="o"&gt;))&lt;/span&gt;;&lt;span class="k"&gt;do &lt;/span&gt;ipsec auto --status; sleep 1; &lt;span class="k"&gt;done&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The astute may notice the 'watch' command was made for this. I
experienced glitches on some systems with ipsec status and the watch
command. YMMV.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-ipsec-secrets-file"&gt;
&lt;h4&gt;The ipsec.secrets file&lt;/h4&gt;
&lt;p&gt;The ipsec.secrets file takes the following format&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;leftid1 rightid1 : PSK &amp;quot;preshared key1&amp;quot;
leftid2 rightid2 : PSK &amp;quot;preshared key2&amp;quot;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The secrets file can have multiple entries. Of note, the combination of
the leftid1 + rightid1 must be unique for each tunnel in order for the
PSK lookup to succeed.&lt;/p&gt;
&lt;p&gt;If you're only managing a single ipsec tunnel, using the the special
catch all %any can work well. Such a config would look like this&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;%any %any : PSK &amp;quot;preshared key&amp;quot;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="gotchas-to-keep-an-eye-out-for"&gt;
&lt;h3&gt;'Gotchas' to keep an eye out for&lt;/h3&gt;
&lt;p&gt;There are a few problems that seem to come up over and over and over
again. I cover those here in brief along with ways to eliminate them as
suspects. . . or at least ways to &lt;em&gt;confirm&lt;/em&gt; if not completely eliminate.&lt;/p&gt;
&lt;div class="section" id="mismatched-peer-identities"&gt;
&lt;h4&gt;Mismatched Peer Identities&lt;/h4&gt;
&lt;p&gt;This comes up quite a bit. Keep an eye out for messages from the peer
like 'no proposal found for peer' or connections that make it through
phase 1, but fail to complete phase 2. Another way to verify is by
inspecting the status output. You'll find a line like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;10.1.1.0/24===10.1.1.1&amp;lt;10.1.1.1&amp;gt;[+S=C]...5.5.5.5&amp;lt;5.5.5.5&amp;gt;[+S=C]===172.16.0.0/12; erouted; eroute owner: #6
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That line indicates that the ips of the endpoints are being used as the
peer id. It also declares the subnet being exposed. The standard default
for peer id&amp;amp;39;s is the ip of the peer. However, this is not required.
Nor is it uncommon for it to be overridden by a remote admin. If you
suspect a peer id mismatch, the remote peer admin should be able to
provide you with her routers configuration.&lt;/p&gt;
&lt;p&gt;Peer id's &lt;em&gt;must&lt;/em&gt; match.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="mismatched-configurations"&gt;
&lt;h4&gt;Mismatched configurations&lt;/h4&gt;
&lt;p&gt;This is pretty vague. In the end, virtually &lt;em&gt;all&lt;/em&gt; connection problems
boil down to mismatched configurations. However, it still bears
mentioning as it is eminently worth it to go over configurations
repeatedly to ensure they match up.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</summary><category term="administration"></category><category term="debian"></category><category term="howtos"></category><category term="openswan"></category></entry></feed>