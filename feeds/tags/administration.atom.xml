<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>miscellaneous</title><link href="http://blog.jameskyle.org/" rel="alternate"></link><link href="http://blog.jameskyle.org/feeds/tags/administration.atom.xml" rel="self"></link><id>http://blog.jameskyle.org/</id><updated>2014-08-20T10:42:34-07:00</updated><entry><title>Deploying a Bare Metal Kubernetes Cluster</title><link href="http://blog.jameskyle.org/2014/08/deploying-baremetal-kubernetes-cluster" rel="alternate"></link><updated>2014-08-20T10:42:34-07:00</updated><author><name>James A. Kyle</name></author><id>tag:blog.jameskyle.org,2014-08-20:2014/08/deploying-baremetal-kubernetes-cluster</id><summary type="html">&lt;div class="section" id="objectives"&gt;
&lt;h2&gt;Objectives&lt;/h2&gt;
&lt;p&gt;Seems my blog needs a few updates in the buzz department. I like taking the
shotgun approach, so we're going to deploy a 5 node bare metal &lt;a class="reference external" href="https://www.docker.com"&gt;docker&lt;/a&gt; cluster
using &lt;a class="reference external" href="http://www.ansible.com/home"&gt;ansible&lt;/a&gt; for host configuration and &lt;a class="reference external" href="https://github.com/GoogleCloudPlatform/kubernetes"&gt;kubernetes&lt;/a&gt; for container management.&lt;/p&gt;
&lt;p&gt;I wish I could have squeezed &lt;a class="reference external" href="http://mesos.apache.org"&gt;mesos&lt;/a&gt; into this story. But the &lt;a class="reference external" href="https://github.com/mesosphere/kubernetes-mesos"&gt;kubernetes-mesos&lt;/a&gt;
project isn't ready for prime time yet. So that'll be a post for another day.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="requirements"&gt;
&lt;h2&gt;Requirements&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;ansible&lt;/li&gt;
&lt;li&gt;librarian-ansible&lt;/li&gt;
&lt;li&gt;git&lt;/li&gt;
&lt;li&gt;CentOS 7, RHEL 7, Fedora 20+...whatever&lt;/li&gt;
&lt;li&gt;some servers&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="get-the-ansible-work-environment"&gt;
&lt;h2&gt;Get the Ansible Work Environment&lt;/h2&gt;
&lt;p&gt;I've thrown together an &lt;a class="reference external" href="https://github.com/jameskyle/ansible-kubernetes"&gt;ansible-kubernetes&lt;/a&gt; project to automate the
configuration of the clients. These aren't &amp;quot;production ready&amp;quot; by any means and
almost certainly would require tweaking for a different target environment.
However, I did make a first stab best effort to generalize them and make them
moderately configurable. As such, they should serve more as a programmatic walk
through then a turnkey solution. Also, if you deployed the playbook as is,
you'll end up with my user and public key in your environment. While I always
welcome new resources, you likely don't want that...so creating your own
site.yml or removing my user module from the example might be prudent.&lt;/p&gt;
&lt;p&gt;Caveats aside, they should simplify the deployment of the environment.&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
% git clone https://github.com/jameskyle/ansible-kubernetes.git
% &lt;span class="nb"&gt;cd &lt;/span&gt;ansible-kubernetes
% librarian-ansible install
&lt;/pre&gt;
&lt;p&gt;There's an inventory.example file included. You'll probably want to update the
fqdn's to your local domain. The primary docker host is named 'dock1' by
default. If you wish to change this, it's done in group_vars/dockers.yml.&lt;/p&gt;
&lt;div class="section" id="hostnames-and-ansible"&gt;
&lt;h3&gt;Hostnames and Ansible&lt;/h3&gt;
&lt;p&gt;Ansible assumes it's capable of resolving the hostnames in your inventory &lt;em&gt;or&lt;/em&gt;
the ansible_ssh_host argument is set in your inventory. For example, if you
don't have a dns server set up you might want to edit your inventory to look
something like&lt;/p&gt;
&lt;pre class="literal-block"&gt;
[dockers]
dock1.mydomain.com ansible_ssh_host=192.168.1.10
&lt;/pre&gt;
&lt;p&gt;Ansible general usage is beyond the scope of this walk through, so please see
the upstream docs for any needed clarifications.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="configuring-the-bootstrap-node"&gt;
&lt;h2&gt;Configuring the Bootstrap Node&lt;/h2&gt;
&lt;p&gt;We're going to work from the assumption of a green field deployment. If the
environment already has existing support services like PXE, dns, dhcp, file
server, etc.  I trust you already know how to adapt that environment
accordingly.&lt;/p&gt;
&lt;div class="section" id="install"&gt;
&lt;h3&gt;Install&lt;/h3&gt;
&lt;p&gt;Initial install is manual. In my particular configuration, I have a root drive
in a RAID 1 and a very large storage array. I installed the OS with the
following disk configuration.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;/dev/sda1 : /boot&lt;/li&gt;
&lt;li&gt;/dev/sda2 : lvm volgroup main
- swap
- /&lt;/li&gt;
&lt;li&gt;/dev/sdb : lvm volgroup data
- /var/lib/docker, btrfs
- /var/docker/registry, ext4&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Doesn't really matter. If you want to use the btrfs driver for docker (these
scripts do), then you'll want to spin off a separate drive for mounting on
/var/lib/docker.&lt;/p&gt;
&lt;p&gt;This only needs to be done manually for the first host, our kickstart
scripts will take care of the workers.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="configure-my-user-account"&gt;
&lt;h3&gt;Configure My User Account&lt;/h3&gt;
&lt;p&gt;I'd recommend hacking together your own user (or at least replacing my key),
regardless it's really convenient to have a passwordless ssh and sudo.&lt;/p&gt;
&lt;p&gt;I use my 'jkyle' role for this and put it in a separate playbook from the site
example called jkyle.yml. The first time we run, I have to provide a password.&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
% ansible-playbook --limit dock1 &lt;span class="se"&gt;\
&lt;/span&gt;                   -i inventory.example &lt;span class="se"&gt;\
&lt;/span&gt;                   --ask-pass &lt;span class="se"&gt;\
&lt;/span&gt;                   --ask-sudo &lt;span class="se"&gt;\
&lt;/span&gt;                   jkyle.yml
&lt;/pre&gt;
&lt;p&gt;You might see something like this&lt;/p&gt;
&lt;pre class="literal-block"&gt;
PLAY [all]
********************************************************************

GATHERING FACTS
***************************************************************
ok: [dock1]

TASK: [jkyle | Install YUM Packages]
******************************************
changed: [dock1] =&amp;gt;
(item=bind-utils,zsh,git-core,lsof,tcpdump,vim)

TASK: [jkyle | Install APT Packages]
******************************************
skipping: [dock1]

TASK: [jkyle | Create James]
**************************************************
changed: [dock1]

TASK: [jkyle | Configure jkyle sudoers]
***************************************
changed: [dock1]

TASK: [jkyle | Deploy jkyle User Key]
*****************************************
changed: [dock1]

TASK: [jkyle | Setup James Home Directory]
************************************
changed: [dock1]

TASK: [jkyle | Link James configuration files]
********************************
changed: [dock1] =&amp;gt; (item=zlogin)
changed: [dock1] =&amp;gt; (item=zlogout)
changed: [dock1] =&amp;gt; (item=zpreztorc)
changed: [dock1] =&amp;gt; (item=zprofile)
changed: [dock1] =&amp;gt; (item=zshenv)
changed: [dock1] =&amp;gt; (item=zshrc)

PLAY RECAP
********************************************************************
dock1   : ok=7    changed=6    unreachable=0    failed=0
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="services-configuration-on-primary-host"&gt;
&lt;h3&gt;Services Configuration On Primary Host&lt;/h3&gt;
&lt;div class="section" id="common"&gt;
&lt;h4&gt;Common&lt;/h4&gt;
&lt;p&gt;The common role does some general configuration of networking, hostnames, etc.
Make sure your inventory file includes the necessary group and host variables
for your network. See the inventory.example file.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="docker"&gt;
&lt;h4&gt;Docker&lt;/h4&gt;
&lt;p&gt;Our docker deployment provides both the local socket connection and a remote
API with server/client certificates. Some example certificates are found in
ansible-kubernetes/roles/docker/files. However, you should probably generate
your own as these are obviously insecure...particuarly if the servers have
public ports. I generated the certs using a script and an openssl template you
found in my &lt;a class="reference external" href="https://github.com/jameskyle/CertGen"&gt;CertGen&lt;/a&gt; github repo.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
% ansible-playbook --limit dock1 -i inventory.example site.example.yml
&lt;/pre&gt;
&lt;p&gt;You might see something like this&lt;/p&gt;
&lt;pre class="literal-block"&gt;
PLAY [dockers]
****************************************************************

GATHERING FACTS
***************************************************************
ok: [dock1]

TASK: [common | sudoers]
******************************************************
ok: [dock1]

TASK: [common | Yum Fastest Mirror]
*******************************************
ok: [dock1]

TASK: [common | Update System]
************************************************
ok: [dock1]

TASK: [common | Install Packages]
*********************************************
ok: [dock1] =&amp;gt; (item=bridge-utils,policycoreutils-python)

TASK: [common | disalbe firewalld]
********************************************
ok: [dock1]

TASK: [common | disable network.service]
**************************************
changed: [dock1]

TASK: [common | Configure Management Interface]
*******************************
ok: [dock1]

TASK: [common | config sshd_config]
*******************************************
ok: [dock1]

TASK: [common | Base /etc/hosts Template]
*************************************
changed: [dock1]

TASK: [common | Set Hostname]
*************************************************
ok: [dock1]

TASK: [common | Build hosts file]
*********************************************
changed: [dock1] =&amp;gt; (item=dock1)
skipping: [dock1] =&amp;gt; (item=dock2)
skipping: [dock1] =&amp;gt; (item=dock3)
skipping: [dock1] =&amp;gt; (item=dock4)
skipping: [dock1] =&amp;gt; (item=dock5)

TASK: [docker | disable selinux]
**********************************************
changed: [dock1]

TASK: [docker | Install EPEL Repo]
********************************************
ok: [dock1]

TASK: [docker | Install Packages]
*********************************************
ok: [dock1] =&amp;gt; (item=docker,btrfs-progs,bridge-utils)

TASK: [docker | Install Packages]
*********************************************
skipping: [dock1]

TASK: [docker | Deploy ca.crt]
************************************************
ok: [dock1]

TASK: [docker | Deploy server.crt]
********************************************
ok: [dock1]

TASK: [docker | Deploy server.key]
********************************************
ok: [dock1]

TASK: [docker | Create docker.socket directory path]
**************************
changed: [dock1]

TASK: [docker | Create docker.socket unit]
************************************
ok: [dock1]

TASK: [docker | Link docker.socket to standard location]
**********************
skipping: [dock1]

TASK: [docker | docker.service]
***********************************************
ok: [dock1]

TASK: [docker | Add Docker Users to Docker Group]
*****************************
ok: [dock1] =&amp;gt; (item=docker_users)

TASK: [docker | Enable &amp;amp; Start Services]
**************************************
ok: [dock1] =&amp;gt; (item=docker.socket)
ok: [dock1] =&amp;gt; (item=docker.service)

PLAY RECAP
********************************************************************
dock1                      : ok=23   changed=5    unreachable=0    failed=0
&lt;/pre&gt;
&lt;p&gt;After which, the following changes would have been applied:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;A sudoers file deployed that allows individual configs in /etc/sudoers.d
and passwordless sudo for wheel group members.&lt;/li&gt;
&lt;li&gt;Installation of the yum fastest mirror plugin&lt;/li&gt;
&lt;li&gt;A full system update&lt;/li&gt;
&lt;li&gt;installation of bridge-utils, policy core utils&lt;/li&gt;
&lt;li&gt;The firewalld daemon disabled. &lt;a class="footnote-reference" href="#id6" id="id1"&gt;[*]&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;NetworkManager disabled. &lt;a class="footnote-reference" href="#id7" id="id2"&gt;[†]&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;selinux disabled. &lt;a class="footnote-reference" href="#id8" id="id3"&gt;[‡]&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;configuration of the management interface...probably already done, but this
enforces it&lt;/li&gt;
&lt;li&gt;a common sshd_config file deployed&lt;/li&gt;
&lt;li&gt;/etc/hosts populated with entries for all the docker hosts&lt;/li&gt;
&lt;li&gt;the target hosts hostname&lt;/li&gt;
&lt;li&gt;A fully functional docker server with server/client certificates.&lt;/li&gt;
&lt;li&gt;A docker registry at &lt;a class="reference external" href="http://yourdomain.com:5000/"&gt;http://yourdomain.com:5000/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you used the default certs, make sure to copy over the client certificate
and certificate authorities to your ~/.docker directory.&lt;/p&gt;
&lt;p&gt;You can interact with the docker server over tcp via&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
% &lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;DOCKER_HOST&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;tcp://dock1.yourdomain.com:2376
% docker --tlsverify -i -t --rm ubuntu /bin/bash
% docker --tlsverify images
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="pxe-services"&gt;
&lt;h3&gt;PXE Services&lt;/h3&gt;
&lt;p&gt;Next, we're going to deploy a container with pxe related services to bring up
the worker hosts. I've created a project that builds a pxe server container
given a specific environment context. You can use my &lt;a class="reference external" href="https://github.com/jameskyle/docker-pxe-server"&gt;docker-pxe-server&lt;/a&gt;
project, or build your own...or even just install the services on the host
itself.&lt;/p&gt;
&lt;p&gt;The readme for the project should be sufficient to get going.&lt;/p&gt;
&lt;p&gt;After pxe/dns/dhcp services are up for your environment, bounce the servers and
bring them up. I typically do this with ipmitool. A script to do so might look
something like&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
&lt;span class="k"&gt;for &lt;/span&gt;i in 11 12 13 14;do
    ipmitool -I lanplus &lt;span class="se"&gt;\
&lt;/span&gt;             -f ~/.racpasswd &lt;span class="se"&gt;\
&lt;/span&gt;             -H 192.168.19.&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;i&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt; &lt;span class="se"&gt;\
&lt;/span&gt;             -U root chassis bootdev pxe
    ipmitool -I lanplus &lt;span class="se"&gt;\
&lt;/span&gt;             -f ~/.racpasswd &lt;span class="se"&gt;\
&lt;/span&gt;             -H 192.168.19.&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;i&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt; &lt;span class="se"&gt;\
&lt;/span&gt;             -U root chassis power cycle
&lt;span class="k"&gt;done&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Of course, you'll need your actually ILO/iDrac/etc ip's. Make a cup of coffee,
catch up on the news. Whatever.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="summary"&gt;
&lt;h3&gt;Summary&lt;/h3&gt;
&lt;p&gt;That completes the initial host configuration. You should have all the key
services up such as an initial docker server &amp;amp; registry, PXE, DHCP, &amp;amp; DNS
services, and your initial user account. Finally you should have a number of
client hosts with fresh installs awaiting configuration.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="finalizing-the-cluster"&gt;
&lt;h2&gt;Finalizing the Cluster.&lt;/h2&gt;
&lt;p&gt;All that's left is configuring the client hosts and installing kubernetes.
Assuming our inventory is correctly configured in, we can just skip to what's
needed for kubernetes and then run ansible on all nodes.&lt;/p&gt;
&lt;div class="section" id="kubernetes"&gt;
&lt;h3&gt;Kubernetes&lt;/h3&gt;
&lt;p&gt;The kubernetes role assumes the required binaries and etcd are located in the&lt;/p&gt;
&lt;pre class="literal-block"&gt;
roles/kubernetes/files
&lt;/pre&gt;
&lt;p&gt;directory. These aren't bundled and since we're deploying the bleeding edge,
it's probably best to build a fresh set anyway. They both have their own build
systems that are covered in the docs, so please refer to the upstream
&lt;a class="reference external" href="https://github.com/GoogleCloudPlatform/kubernetes"&gt;kubernetes&lt;/a&gt; and &lt;a class="reference external" href="https://github.com/coreos/etcd"&gt;etcd&lt;/a&gt; project for details.&lt;/p&gt;
&lt;p&gt;A couple of hints though.&lt;/p&gt;
&lt;p&gt;For Kubernetes, you'll want to read the README.md in kubernetes's ./build
directory.&lt;/p&gt;
&lt;p&gt;For etcd, you'll probably just want to run these commands&lt;/p&gt;
&lt;pre class="code bash literal-block"&gt;
docker build -t coreos/etcd .
docker run -d coreos/etcd
docker cp &amp;lt;container_id&amp;gt;:/opt/etcd/bin/etcd .
docker stop &amp;lt;container_id&amp;gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; docker rm &amp;lt;container_id&amp;gt;
&lt;/pre&gt;
&lt;p&gt;Then you have an amd64 etcd binary you can copy to roles/kubernetes/files.&lt;/p&gt;
&lt;div class="section" id="installation"&gt;
&lt;h4&gt;Installation&lt;/h4&gt;
&lt;p&gt;No more configuration should be necessary. Assuming everything's gone well so
far, the following should be sufficient&lt;/p&gt;
&lt;pre class="literal-block"&gt;
ansible-playbook --ask-pass \
                 --ask-sudo \
                 -i inventory.example site.example.yml
&lt;/pre&gt;
&lt;p&gt;Notice we're no longer limiting to the dock1 host or passing specific tags to
run. Once done, you should be able to query your kubernetes minions. You can do
so from any host where kubecfg is installed. Which includes all your hosts at
/usr/local/bin/kubecfg. For example&lt;/p&gt;
&lt;pre class="literal-block"&gt;
% kubecfg -h http://dock1.pao19.tfoundry.com:8080 list minions
Minion identifier
----------
dock1
dock2
dock3
dock4
dock5
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="next-steps"&gt;
&lt;h2&gt;Next Steps.&lt;/h2&gt;
&lt;p&gt;Next up, you can deploy the &lt;a class="reference external" href="https://github.com/GoogleCloudPlatform/kubernetes/tree/master/examples/guestbook"&gt;Kubernetes GuestBook&lt;/a&gt; example. Or build your
own!&lt;/p&gt;
&lt;table class="docutils footnote" frame="void" id="id6" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id1"&gt;[*]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;I had a hell of a time getting firewalld to work as advertised. Zones
wouldn't persist, interfaces added to multiple zones, etc. Several
upstream bugs were filed.Much easier to just write your own iptables
rules.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id7" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id2"&gt;[†]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;The network.service &amp;amp; NetworkManager seem to be mortal enemies in this
release.  You coudl tell NM manager to ignore a config, but it would
happily still muck with it...such as adding it to the default zone if
firewalld was enabled. In the end, leaving only NM running seemed to
work best.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="id8" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id3"&gt;[‡]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;As of the time of this tutorial, the btrfs driver for docker does not
support selinux&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
</summary><category term="administration"></category><category term="devops"></category><category term="ansible"></category><category term="kubernetes"></category></entry><entry><title>Deploying Pelican Blog with Bitbucket Commit Hooks</title><link href="http://blog.jameskyle.org/2012/12/deploying-pelican-blog-with-bitbucket-commit-hooks" rel="alternate"></link><updated>2012-12-10T17:42:00-08:00</updated><author><name>James A. Kyle</name></author><id>tag:blog.jameskyle.org,2012-12-10:2012/12/deploying-pelican-blog-with-bitbucket-commit-hooks</id><summary type="html">&lt;img alt="Schaffhausen Watch" class="align-center" src="/images/2012/11/schaffhausen-watch.jpg" style="width: 362.5px; height: 282.0px;" /&gt;
&lt;div class="section" id="migrating-from-wordpress"&gt;
&lt;h2&gt;Migrating from Wordpress&lt;/h2&gt;
&lt;p&gt;I recently migrated my blog from &lt;a class="reference external" href="http://wordpress.org"&gt;Wordpress&lt;/a&gt; to &lt;a class="reference external" href="http://blog.getpelican.com"&gt;Pelican&lt;/a&gt;. There are a few
incentives to do so. Not the least of which is using &lt;a class="reference external" href="http://daringfireball.net/projects/markdown/"&gt;Markdown&lt;/a&gt; or &lt;a class="reference external" href="http://docutils.sourceforge.net/rst.html"&gt;reST&lt;/a&gt; for
markup and free distributed backups with &lt;a class="reference external" href="http://git-scm.com"&gt;Git&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;There are some drawbacks as well. The one I'd miss the most is the
ability to easily sync off line changes to your blog. I was using
&lt;a class="reference external" href="http://www.red-sweater.com/marsedit/"&gt;MarsEdit&lt;/a&gt; for this purpose and am very happy with it overall. Though I've never
been able to find a non-futzy way to edit in reST and publish to the blog. All
the workflow always involved conversion steps or copy and pasting.&lt;/p&gt;
&lt;p&gt;By migrating to Pelican + Git, I'm able to use &lt;a class="reference external" href="https://bitbucket.org"&gt;Bitbucket&lt;/a&gt;'s git service hooks
to trigger a sync &amp;amp; build cycle on my web server. This article walks through
steps required to set this up. &lt;a class="footnote-reference" href="#id3" id="id1"&gt;[1]&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-method"&gt;
&lt;h2&gt;The Method&lt;/h2&gt;
&lt;p&gt;On the back end, I set all this up by writing a little flask + uwsgi application
that does one thing and one thing only: listens for a Bitbucket POST commit
notification. It checks to see if the master branch changed and pulls down the
blog updates and regenerates the static files. The static files are then served
by nginx. I also proxy uwsgi through nginx so my api endpoint is a url like:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
http://yourdomain.com/api
or
http://api.yourdomain.com/v1
&lt;/pre&gt;
&lt;div class="section" id="install"&gt;
&lt;h3&gt;Install&lt;/h3&gt;
&lt;p&gt;First, install the necessary packages on your server:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
apt-get install nginx uwsgi uwsgi-plugin-http uwsgi-plugin-python python-pip \
                python-virtualenv
&lt;/pre&gt;
&lt;p&gt;Pelican doesn't have deb packages. So I used pip instead:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
pip install pelican
&lt;/pre&gt;
&lt;p&gt;I found my theme in the &lt;a class="reference external" href="https://github.com/getpelican/pelican-themes"&gt;pelican-themes&lt;/a&gt; repository. pelican-themes is a
collection of about 25 CSS styles for pelican. This blog is styled using
a variation of tuxlite_tbs. Whichever one you choose, it needs to be installed
on your server:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
pelican-themes -i the_theme
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="configure"&gt;
&lt;h3&gt;Configure&lt;/h3&gt;
&lt;p&gt;Configuration is based on the following assumptions. You may need to adapt the
example files if yours varies. I'll use &lt;em&gt;$fqdn&lt;/em&gt; as a substitute for your actual
blog fqdn. For example, mine would be &lt;em&gt;blog.jameskyle.org&lt;/em&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;blog repository location&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;/var/www/$fqdn&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;static files location&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;/var/www/$fqdn/output/&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;li&gt;&lt;dl class="first docutils"&gt;
&lt;dt&gt;default confiugraiton location for uwsgi sockets on ubuntu&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;/var/run/uwsgi/app/$fqdn/socket&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="nginx"&gt;
&lt;h4&gt;Nginx&lt;/h4&gt;
&lt;p&gt;Nginx is used to serve our static files and also proxy to the uWSGI git service.&lt;/p&gt;
&lt;p&gt;First, I disabled the default site:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
rm /etc/nginx/sites-enabled/default
&lt;/pre&gt;
&lt;p&gt;Next, I create a conf for my blog site:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
vim /etc/nginx/conf.d/${fqdn}.conf
&lt;/pre&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;server&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="kn"&gt;listen&lt;/span&gt;   &lt;span class="mi"&gt;80&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
     &lt;span class="kn"&gt;root&lt;/span&gt; &lt;span class="s"&gt;/var/www/&lt;/span&gt;&lt;span class="nv"&gt;${fqdn}/output&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
     &lt;span class="kn"&gt;index&lt;/span&gt; &lt;span class="s"&gt;index.html&lt;/span&gt; &lt;span class="s"&gt;index.htm&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
     &lt;span class="kn"&gt;server_name&lt;/span&gt; &lt;span class="s"&gt;\*.&lt;/span&gt;&lt;span class="nv"&gt;${fqdn}&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
     &lt;span class="kn"&gt;location&lt;/span&gt; &lt;span class="s"&gt;/api&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
         &lt;span class="kn"&gt;include&lt;/span&gt; &lt;span class="s"&gt;uwsgi_params&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
         &lt;span class="kn"&gt;uwsgi_pass&lt;/span&gt; &lt;span class="s"&gt;unix:///var/run/uwsgi/app/&lt;/span&gt;&lt;span class="nv"&gt;${fqdn}/socket&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
         &lt;span class="kn"&gt;uwsgi_param&lt;/span&gt; &lt;span class="s"&gt;UWSGI_SETENV&lt;/span&gt; &lt;span class="s"&gt;PELICAN=/usr/local/bin/pelican&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
     &lt;span class="p"&gt;}&lt;/span&gt;

     &lt;span class="kn"&gt;location&lt;/span&gt; &lt;span class="s"&gt;/&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
             &lt;span class="kn"&gt;try_files&lt;/span&gt; &lt;span class="nv"&gt;$uri&lt;/span&gt; &lt;span class="nv"&gt;$uri/&lt;/span&gt; &lt;span class="s"&gt;/index.html&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
     &lt;span class="p"&gt;}&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This particular configuraion proxies to all requests made to the /api route to
the backend server. However, you could modify the proxy to suit any number of
configurations.&lt;/p&gt;
&lt;p&gt;You may notice I pass a environment variable to uwsgi. The uWSGI process runs as
the www-data user. In my testing, the user was unable to find the pelican binary
when my server spawned a 'make regenerate'. To solve that problem, I set the
PELICAN environment variable and changed the pelican Makefile to conditionally
set its PELICAN var. You can do this by executing:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
sed -i.bak 's|PELICAN=|PELICAN?=|g' Makefile
&lt;/pre&gt;
&lt;p&gt;On the Makefile generated by pelican-quickstart.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="virtualenv"&gt;
&lt;h4&gt;virtualenv&lt;/h4&gt;
&lt;p&gt;I created a virtual environment with the necessary modules for my uwsgi server.
It provides a nice segration between my system and application libraries. These
config files assume the virtualenv is located at /var/www/$fqdn/env. Update them
if you choose to drop it somewhere else.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;virtualenv /var/www/&lt;span class="nv"&gt;$fqdn&lt;/span&gt;/env
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="uwsgi"&gt;
&lt;h4&gt;uWSGI&lt;/h4&gt;
&lt;p&gt;Nginx needs something to proxy too and I used uwsgi. Gunicorn or any other wsgi
compatible backend is perfectly acceptable. I created a file
/etc/uwsgi/sites-available/$fqdn.ini with these contents&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;[uwsgi]&lt;/span&gt;
&lt;span class="na"&gt;base&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;/var/www/$fqdn&lt;/span&gt;
&lt;span class="na"&gt;gitpost&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;%(base)/utils/gitpost&lt;/span&gt;
&lt;span class="na"&gt;module&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;gitpost&lt;/span&gt;
&lt;span class="na"&gt;callable&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;app&lt;/span&gt;
&lt;span class="na"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;app&lt;/span&gt;
&lt;span class="c1"&gt;# Generic Config&lt;/span&gt;
&lt;span class="na"&gt;plugins&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;http,python&lt;/span&gt;
&lt;span class="na"&gt;home&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;%(base)/env&lt;/span&gt;
&lt;span class="na"&gt;pythonpath&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;%(base)/env&lt;/span&gt;
&lt;span class="na"&gt;chdir&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;%(gitpost)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You must then link the file to the sites-enabled directory&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;ln -s /etc/uwsgi/sites-available/&lt;span class="nv"&gt;$fqdn&lt;/span&gt;.ini /etc/uwsgi/sites-enabled/
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="bitbucket"&gt;
&lt;h4&gt;Bitbucket&lt;/h4&gt;
&lt;p&gt;Bitbucket is where the magic happens. Ok, it's not magic. It's just a POST hook
on commits. But it's what sets everything in motion. To enable that feature you
go to &lt;a class="reference external" href="http://bitbucket.org/$username/$blog-reponame"&gt;http://bitbucket.org/$username/$blog-reponame&lt;/a&gt;,  then type 'r' and 'a' in
quick succession (or click the little sprocket to the right). Next, in the left
menu click &amp;quot;Services&amp;quot;. You'll have a dropdown, select the &amp;quot;POST&amp;quot; service. Finally,
enter your blog's fqdn and api url. Given a fqdn of blog.jameskyle.org, the
examples above woudl produce an api endpoint of:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
http://blog.jameskyle.org/api
&lt;/pre&gt;
&lt;p&gt;My blog repo is public. However, if you wish to keep your raw source private
you'll need to create a public/private keypair for checking out the blog. The
private key should be stored in the www-data user's home directory. On Ubuntu
systems, the key is stored in:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
/var/www/.ssh/id_rsa
&lt;/pre&gt;
&lt;p&gt;Or id_dsa, whichever.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="gitpost"&gt;
&lt;h4&gt;gitpost&lt;/h4&gt;
&lt;p&gt;Of course, we need to have something listening on the other side of the POST hook
or it's all for naught. I wrote a little server using flask to satisfy that
function. Configurable variables are set at the top of the file. Specifically,
you'll want to set the DOCROOT variable. In this case, the DOCROOT is the
location of your blog repository.&lt;/p&gt;
&lt;p&gt;My server also logs activity. By default, it does so to:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
/var/log/gitpost/gitpost.log
&lt;/pre&gt;
&lt;p&gt;This directory should be owned by the www-data user.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;mkdir /var/log/gitpost
chown www-data:www-data -R /var/log/gitpost
&lt;/pre&gt;&lt;/div&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;json&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;logging&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;subprocess&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Popen&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;subprocess&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;PIPE&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;werkzeug.contrib.fixers&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ProxyFix&lt;/span&gt;

&lt;span class="n"&gt;DOCROOT&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;/var/www/$fqdn&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;LOGLEVEL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;INFO&lt;/span&gt;
&lt;span class="n"&gt;LOG_FORMAT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;&lt;/span&gt;&lt;span class="si"&gt;%(asctime)s&lt;/span&gt;&lt;span class="s"&gt; - &lt;/span&gt;&lt;span class="si"&gt;%(name)s&lt;/span&gt;&lt;span class="s"&gt; - &lt;/span&gt;&lt;span class="si"&gt;%(levelname)s&lt;/span&gt;&lt;span class="s"&gt; - &lt;/span&gt;&lt;span class="si"&gt;%(message)s&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;DATE_FORMAT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;%Y-%m-&lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s"&gt;,%H:%M:%S&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;LOGFILE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;/var/log/gitpost/gitpost.log&amp;quot;&lt;/span&gt;

&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;wsgi_app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ProxyFix&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;wsgi_app&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setLevel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;LOGLEVEL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;formatter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Formatter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;LOG_FORMAT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;datefmt&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;DATE_FORMAT&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;fh&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FileHandler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;LOGFILE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;fh&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setFormatter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;formatter&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addHandler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fh&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Starting gitpost api application&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;log_error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;command&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;returncode&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="s"&gt;    Command: {cmd} =&amp;gt; {ret}&lt;/span&gt;
&lt;span class="s"&gt;    --------------&lt;/span&gt;

&lt;span class="s"&gt;    Output:&lt;/span&gt;
&lt;span class="s"&gt;        {out}&lt;/span&gt;

&lt;span class="s"&gt;    Error:&lt;/span&gt;
&lt;span class="s"&gt;        {err}&lt;/span&gt;
&lt;span class="s"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cmd&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;command&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ret&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;returncode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;pull&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Pulling changes from master&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;popen&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;git&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;pull&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;origin&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;master&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;popen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cmd&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Changing into {0}&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DOCROOT&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Executing: {0}&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot; &amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cmd&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;

    &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;chdir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DOCROOT&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Popen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cmd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;PIPE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;stderr&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;PIPE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;wait&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;communicate&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;returncode&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;log_error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cmd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;returncode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;publish&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Publishing blog updates&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;popen&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;make&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;publish&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;update&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Updating blog&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;pull&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;publish&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="nd"&gt;@app.route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/api&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;methods&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;POST&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;parse_request&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Parsing request&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;payload&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;loads&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;payload&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="n"&gt;branch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;commits&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;branch&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;received commit from branch: {0!r}&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;branch&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;branch&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;master&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Initiating master repo sync&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;pull&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;publish&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Finished publishing&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Received:: {0}&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;The uWSGI configuration files provided assume the gitpost script is located in:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
/var/www/$fqdn/utils
&lt;/pre&gt;
&lt;p&gt;And that the created virtualenv is located in:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
/var/www/$fqdn/env
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="final-steps"&gt;
&lt;h2&gt;Final Steps&lt;/h2&gt;
&lt;p&gt;The last thing you need to do is checkout your git repository into the docroot
directory. In our examples, this would be /var/www/$fqdn. As I mentioned before,
I store all relevant files in my repository.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;git clone git@bitbucket.org:username/reponame.git /var/www/&lt;span class="nv"&gt;$fqdn&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="evaluation"&gt;
&lt;h2&gt;Evaluation&lt;/h2&gt;
&lt;p&gt;I've found the following method to be quite low maintenance. After setting up,
the workflow involves editing your local repo, then pushing the changes to
master.&lt;/p&gt;
&lt;p&gt;My blog and all modifications to the default pelican layout, Makefile, and the
supporting scripts/configurations covered here are available at my
public &lt;a class="reference external" href="http://git.jameskyle.org/blog-jameskyle"&gt;blog repository&lt;/a&gt; along with my pelicanconf and article organization.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="what-s-next"&gt;
&lt;h2&gt;What's Next&lt;/h2&gt;
&lt;p&gt;I'm using a modified &lt;a class="reference external" href="https://github.com/nvie/gitflow"&gt;git-flow&lt;/a&gt; work flow for my article posting where 'hotfixes'
are 'articles' and features are, well, features. I want to modify the plugin
to better reflect blog posting. For example, I'd like to&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;git blog article start deploy-pelican-with-bitbucket-service-hooks
&lt;span class="c"&gt;# create article&lt;/span&gt;
git blog article finish deploy-pelican-with-bitbucket-service-hooks
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If I do make those adaptations, it'll certainly be worthy of a followup post.&lt;/p&gt;
&lt;p&gt;I'm also working on a management script that automates the steps above. For
example, configuring a new application might look like&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;./manage setup
What is your blog&lt;span class="s1"&gt;&amp;#39;s fqdn? &amp;gt; blog.jameskyle.org&lt;/span&gt;
&lt;span class="s1"&gt;What is your blog&amp;#39;&lt;/span&gt;s git repository? &amp;gt; http://git.jameskyle.org/blog-jameskyle
Checking out blog-jameskyle into /var/www/blog.jameskyle.org.....
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And so on.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="external-links"&gt;
&lt;h2&gt;External Links&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://blog.getpelican.com"&gt;Pelican&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://wordpress.org"&gt;Wordpress&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://docutils.sourceforge.net/rst.html"&gt;reST&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://git-scm.com"&gt;Git&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.red-sweater.com/marsedit/"&gt;MarsEdit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://bitbucket.org"&gt;Bitbucket&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://help.ubuntu.com/community/UFW"&gt;UFW&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/nvie/gitflow"&gt;git-flow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://git.jameskyle.org/blog-jameskyle"&gt;blog repository&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;table class="docutils footnote" frame="void" id="id3" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#id1"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;The &lt;a class="reference external" href="http://docs.getpelican.com/en/3.0/importer.html"&gt;Pelican documentation&lt;/a&gt; covers this.
The import worked very well for me.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
</summary><category term="administration"></category><category term="debian"></category><category term="howtos"></category><category term="python"></category><category term="pelican"></category><category term="bitbucket"></category></entry><entry><title>Configuring OpenSwan IPSec Server</title><link href="http://blog.jameskyle.org/2012/07/configuring-openswan-ipsec-server" rel="alternate"></link><updated>2012-07-18T15:06:00-07:00</updated><author><name>James A. Kyle</name></author><id>tag:blog.jameskyle.org,2012-07-18:2012/07/configuring-openswan-ipsec-server</id><summary type="html">&lt;div class="section" id="introduction"&gt;
&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;The intent of this article is to walk through the installation,
configuration, and general debugging of OpenSwan based IPSec tunnels.
Though primarily focused on Ubuntu &amp;amp; Debian systems, non-package
management portions should apply generally.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="installation-initial-configuration"&gt;
&lt;h2&gt;Installation &amp;amp; Initial Configuration&lt;/h2&gt;
&lt;p&gt;We install using apt-get or aptitude.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;% apt-get install openswan
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For a basic PSK (Private Shared Key) configuration, there are two main
files we need to modify. The first is the configuration file,
/etc/ipsec.conf. The second is the ipsec secrets file where the PSK is
stored in /etc/ipsec.secrets.&lt;/p&gt;
&lt;div class="section" id="the-ipsec-conf-file"&gt;
&lt;h3&gt;The ipsec.conf file&lt;/h3&gt;
&lt;p&gt;There are two main sections to the ipsec configuration file. The
configuration setup section &amp;amp; the connection section.&lt;/p&gt;
&lt;div class="section" id="the-configuration-setup-section"&gt;
&lt;h4&gt;The configuration setup section&lt;/h4&gt;
&lt;p&gt;The configuration setup section begins by declaring&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;config setup
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;. The 'virtual_private 'option declares which subnets should be allowed
through the tunnel and which should be excluded. Typically, you'll wish
to exclude any networks that overlap with your private LAN.&lt;/p&gt;
&lt;p&gt;Networks are allowed by specifying the internet protocol version and the
CIDR of the allowed network. Networks are excluded by prepending the
bang symbol, '!', to the CIDR.&lt;/p&gt;
&lt;p&gt;Assuming a private network of 10.1.1.1 on a /24 network, the setup
configuration would look something like...&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;config setup
    plutoopts=&amp;quot;--perpeerlog&amp;quot;
    virtual_private=%v4:172.16.0.0/12,%v4:192.168.0.0/16,%v4:10.0.0.0/8,%v4:!10.1.1.0/24
    protostack=auto
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If either end of the tunnel is being nat'd, it may be necessary to add
the nat_traversal work around to the config setup section.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;nat_traversal=yes
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The plutoopts specified create a log for each peer that connects. The
protostack specifies which kernel protocol to use. 'auto' is generally
fine. However, if you wish to apply firewall rules to traffic coming
over the tunnel, you may wan to look into the KLIPS protocol as it
creates a unique interface for tunnel traffic, greatly reducing the
complexity of your firewall scripts.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-connection-configuration-section"&gt;
&lt;h4&gt;The connection configuration section&lt;/h4&gt;
&lt;p&gt;The connection configuration section begins with the declaration of the
'conn' keyword followed by an arbitrary connection label. An example
configuration might look like...&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;conn State-Secrets
    type=tunnel
    authby=secret
    auto=start
    pfs=no
    ike=aes256-sha1;modp1024!
    phase2alg=aes256-sha1;modp1024
    aggrmode=no    left=10.1.1.1
    right=5.5.5.5    leftsubnet=10.1.1.0/24
    rightsubnet=172.16.0.0/12
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We'll walk through each of the above connection options. It is important
to note that though the protocol allows for client negotiation of most
of these parameters with the server, in practice I've found explicitly
setting them to conform to the remote servers specifications produces
the most reliable results. If you are acting as the client, without
control of the server, obtaining a thorough specification document that
lists phase1 and phase2 algorithms can be quite the time saver. Such a
document for the above configuration might look like&lt;/p&gt;
&lt;table border="1" class="docutils"&gt;
&lt;caption&gt;Configuration Table&lt;/caption&gt;
&lt;colgroup&gt;
&lt;col width="61%" /&gt;
&lt;col width="39%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;Configuration Option&lt;/th&gt;
&lt;th class="head"&gt;Configuration Value&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;Athentication Method&lt;/td&gt;
&lt;td&gt;Pre Shared Key&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Phase 1 Encryption Scheme&lt;/td&gt;
&lt;td&gt;IKE&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Phase 1 DH Group&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Encryption Algorithm&lt;/td&gt;
&lt;td&gt;AES/256&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Hashing Algorithm&lt;/td&gt;
&lt;td&gt;SHA-1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Main or Aggressive Mode&lt;/td&gt;
&lt;td&gt;Main Mode&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Phase 1 Lifetime&lt;/td&gt;
&lt;td&gt;1440&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Phase 2 Encapsulation&lt;/td&gt;
&lt;td&gt;ESP&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Phase 2 Encryption Algorithm&lt;/td&gt;
&lt;td&gt;AES/256&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Phase 2 Authentication Algorithm&lt;/td&gt;
&lt;td&gt;SHA&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Phase 2 Perfect Forward Secrecy&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Phase 2 Lifetime&lt;/td&gt;
&lt;td&gt;3600&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Key Exchange for Subnets&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Let's walk through each of the options, look at their corresponding
value from our document, and clarify its use.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;type=tunnel
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This declares the type of connection to be formed. Since we're
configuring an ipsec tunnel, we specify 'tunnel' (I know, very
original).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;authby=secret
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This option declares the type of authentication scheme to use. IPSec
supports several different authentication schemes. 'secret' is used due
to our specification document specifying a type of &amp;quot;Pre Shared Key&amp;quot;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;auto=start
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;There's no corresponding document value for this setting. It specifies
that the ipsec tunnel should be started and routes created when the
ipsec daemon itself starts.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;pfs=no
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This value comes from our documents PFS setting.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;ike=aes256-sha1;modp1024!
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is a combination of several values in our document. It specifies
the phase 1 encryption scheme, the hashing algorithm, and the
diffie-hellman group. The modp1024 is for Diffie-Hellman 2. Why 'modp'
instead of dh? DH2 is a 1028 bit encryption algorithm that modulo's a
prime number, e.g. modp1028. See RFC 5114 for details or the wiki page
on diffie hellmann, if interested.&lt;/p&gt;
&lt;p&gt;The bang symbol, !, specifies the connection shoudl be formed in strict
mode. Technically, this is the default. However, at some point (version
wise) it was not being properly applied and it doesn't hurt.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;phase2alg=aes256-sha1;modp1024
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is a combination of several values in our document. It specifies
the phase 2 encryption scheme, the hashing algorithm, and the
diffie-hellman group just like the ike parameter.&lt;/p&gt;
&lt;p&gt;For further information on valid parameters for the ike and phase2alg
variables, please see the ipsec.conf man page.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;aggrmode=no
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Enables or disables Aggressive Mode. Agressive Mode is almost &lt;em&gt;never&lt;/em&gt;
needed and 'no' is the default. However, I've included it for clarity.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;left=10.1.1.1
right=5.5.5.5
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The 'left' and &amp;amp;39;right' arguments specify details about the two end
points of the tunnel. Which is used for which endpoint is arbitrary, but
many used left to denote the 'local' endpoint and the right to denote
the 'remote' endpoing for mnemonic reasons. This &lt;em&gt;should&lt;/em&gt; be the ip of
the peer we're attempting to connect to.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;leftsubnet=10.1.1.0/24
rightsubnet=172.16.0.0/12
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;These are the subnets that are exposed by the tunnel. Again, left and
right is arbitrary. However, consistency is obviously required. Make
sure the subnet declaration matches its corresponding left/right
endpoing declaration.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="troubleshooting"&gt;
&lt;h2&gt;Troubleshooting&lt;/h2&gt;
&lt;p&gt;Configuration is normally the easy portion of setting up an ipsec
tunnel, it's normally the debugging that takes up the majority of time.
Particularly if dealing with heterogenous peers.&lt;/p&gt;
&lt;div class="section" id="pertinent-log-files"&gt;
&lt;h3&gt;Pertinent log files&lt;/h3&gt;
&lt;p&gt;These are the log files most likely to contain important information
about why a particular tunnel is not succeeding.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;/var/log/auth.log
/var/log/syslog
/var/log/pluto/peer/a/b/c/d/a.b.c.d.log
&lt;/pre&gt;&lt;/div&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The /var/log/auth.log is where logs on the authentication
transactions are, stored.&lt;/li&gt;
&lt;li&gt;The /var/log/syslog is the system log, it's always good to check here
for any startup or general errors.&lt;/li&gt;
&lt;li&gt;/var/log/pluto/peer/a/b/c/d/a.b.c.d.log file is the per peer pluto
log. You can find some of the startup and shutdown information in
here.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="utilities"&gt;
&lt;h3&gt;Utilities&lt;/h3&gt;
&lt;p&gt;The main utilities to use are&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;tcpdump&lt;/li&gt;
&lt;li&gt;ip&lt;/li&gt;
&lt;li&gt;ipsec&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="tcpdump"&gt;
&lt;h4&gt;tcpdump&lt;/h4&gt;
&lt;p&gt;Since the traffic is encrypted, you can only track the &amp;quot;flow&amp;quot; of the
ipsec transaction to ensure all packets are reaching their destination
and routing is working as expected. However, seeing the packet flow can
be very informative.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="ip"&gt;
&lt;h4&gt;ip&lt;/h4&gt;
&lt;p&gt;The ip tool is used to ensure that the needed routes have been crated.
Alternatively, you could use something like netstat.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="ipsec"&gt;
&lt;h4&gt;ipsec&lt;/h4&gt;
&lt;p&gt;Read the man page for complete information, but the most used switch is
the status command. We configured our example connection for 'auto'. To
retrieve the status of all auto configured connections, you execute&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;% ipsec auto --status
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When debugging, I find it very useful to poll the output of this command
in one second intervales. For example,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;% &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;((&lt;/span&gt; ;; &lt;span class="o"&gt;))&lt;/span&gt;;&lt;span class="k"&gt;do &lt;/span&gt;ipsec auto --status; sleep 1; &lt;span class="k"&gt;done&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The astute may notice the 'watch' command was made for this. I
experienced glitches on some systems with ipsec status and the watch
command. YMMV.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-ipsec-secrets-file"&gt;
&lt;h4&gt;The ipsec.secrets file&lt;/h4&gt;
&lt;p&gt;The ipsec.secrets file takes the following format&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;leftid1 rightid1 : PSK &amp;quot;preshared key1&amp;quot;
leftid2 rightid2 : PSK &amp;quot;preshared key2&amp;quot;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The secrets file can have multiple entries. Of note, the combination of
the leftid1 + rightid1 must be unique for each tunnel in order for the
PSK lookup to succeed.&lt;/p&gt;
&lt;p&gt;If you're only managing a single ipsec tunnel, using the the special
catch all %any can work well. Such a config would look like this&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;%any %any : PSK &amp;quot;preshared key&amp;quot;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="gotchas-to-keep-an-eye-out-for"&gt;
&lt;h3&gt;'Gotchas' to keep an eye out for&lt;/h3&gt;
&lt;p&gt;There are a few problems that seem to come up over and over and over
again. I cover those here in brief along with ways to eliminate them as
suspects. . . or at least ways to &lt;em&gt;confirm&lt;/em&gt; if not completely eliminate.&lt;/p&gt;
&lt;div class="section" id="mismatched-peer-identities"&gt;
&lt;h4&gt;Mismatched Peer Identities&lt;/h4&gt;
&lt;p&gt;This comes up quite a bit. Keep an eye out for messages from the peer
like 'no proposal found for peer' or connections that make it through
phase 1, but fail to complete phase 2. Another way to verify is by
inspecting the status output. You'll find a line like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;10.1.1.0/24===10.1.1.1&amp;lt;10.1.1.1&amp;gt;[+S=C]...5.5.5.5&amp;lt;5.5.5.5&amp;gt;[+S=C]===172.16.0.0/12; erouted; eroute owner: #6
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That line indicates that the ips of the endpoints are being used as the
peer id. It also declares the subnet being exposed. The standard default
for peer id&amp;amp;39;s is the ip of the peer. However, this is not required.
Nor is it uncommon for it to be overridden by a remote admin. If you
suspect a peer id mismatch, the remote peer admin should be able to
provide you with her routers configuration.&lt;/p&gt;
&lt;p&gt;Peer id's &lt;em&gt;must&lt;/em&gt; match.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="mismatched-configurations"&gt;
&lt;h4&gt;Mismatched configurations&lt;/h4&gt;
&lt;p&gt;This is pretty vague. In the end, virtually &lt;em&gt;all&lt;/em&gt; connection problems
boil down to mismatched configurations. However, it still bears
mentioning as it is eminently worth it to go over configurations
repeatedly to ensure they match up.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</summary><category term="administration"></category><category term="debian"></category><category term="howtos"></category><category term="openswan"></category></entry><entry><title>A Boilerplate Comparison: Puppet</title><link href="http://blog.jameskyle.org/2012/07/puppet-boilerplate" rel="alternate"></link><updated>2012-07-15T15:20:00-07:00</updated><author><name>James A. Kyle</name></author><id>tag:blog.jameskyle.org,2012-07-15:2012/07/puppet-boilerplate</id><summary type="html">&lt;div class="section" id="introduction"&gt;
&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Here we cover the steps for deploying a package to a puppet agent/node.
Like with chef, we assume a working installation.&lt;/p&gt;
&lt;p&gt;Though I must take the opportunity to comment that the installation
process for puppet was ridiculously easy.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-ridiculously-easy-way"&gt;
&lt;h2&gt;The ridiculously easy way&lt;/h2&gt;
&lt;p&gt;Package installation can be performed completely through the console,
e.g. web ui, for puppet. To do so, you go to &lt;a class="reference external" href="https://puppetmaster.me.com"&gt;https://puppetmaster.me.com&lt;/a&gt;
and click 'Live Management' -&amp;gt; Advanced Tasks -&amp;gt; package tasks -&amp;gt;
Install. Type in the package name you wish to install and click 'Run'.&lt;/p&gt;
&lt;p&gt;That's it. Done.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-not-quite-ridiculously-easy-way"&gt;
&lt;h2&gt;The not quite ridiculously easy way&lt;/h2&gt;
&lt;p&gt;That seems almost too trivial. It's nice that the trivial tasks are
trivial to perform, but let's take a closer look at what it takes to
roll your own task and deploy it. It's more representative of how a
sysadmin will interact with the framework and seems more fair to chef.&lt;/p&gt;
&lt;div class="section" id="creating-a-module-from-scratch"&gt;
&lt;h3&gt;Creating a module from scratch&lt;/h3&gt;
&lt;p&gt;Puppet, like chef, can generate a module template. Puppet is very
community centric and sharing of modules is the default. As such, the
module template asks you to prepend your Puppet Forge username as it is
the best practice naming convention for shared modules. Like in our
previous walk through with chef, we're going to write a package for
installing tmux.&lt;/p&gt;
&lt;div class="section" id="create-the-package"&gt;
&lt;h4&gt;Create the package&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;% puppet module generate username-tmux
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You're rewarded with a directory like&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;Modulefile README     manifests  spec       tests
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="edit-modulefile"&gt;
&lt;h4&gt;Edit Modulefile&lt;/h4&gt;
&lt;p&gt;You should always edit the modulefile and enter pertinent information
such as version, license, description, etc.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="create-tmux-class"&gt;
&lt;h4&gt;Create tmux class&lt;/h4&gt;
&lt;p&gt;The business is in the init.pp file, we edit that and add our package
requirement.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="n"&gt;tmux&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;package&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;tmux&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="add-class-to-a-node"&gt;
&lt;h4&gt;Add class to a node&lt;/h4&gt;
&lt;p&gt;Finally, to apply the role to a node you add it to the nodes definition
in the site.pp file. This isn't a hard, fast rule. Puppet can pull node
configuration from external sources. Puppet Enterprise console provides
this and so you could use the web frontend to add the class to your list
in console and then apply it to a group. You could also provide your own
backend.&lt;/p&gt;
&lt;p&gt;However, the &amp;quot;basic&amp;quot; basic, out the box puppet involves editing the
site.pp, so we&amp;amp;squot;ll add it to the default node here&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;node&lt;/span&gt; &lt;span class="n"&gt;default&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;tmux&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We also commit the package to our repository.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;% git add modules/username-tmux manifests/site.pp
% git commit modules/username-tmux manifests/site.pp -m &lt;span class="s2"&gt;&amp;quot;added tmux module&amp;quot;&lt;/span&gt;
% git push origin master
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="comments"&gt;
&lt;h3&gt;Comments&lt;/h3&gt;
&lt;p&gt;If you noticed, we didn't cover how you upload your module and manifest
like we did in the &lt;a class="reference external" href="/2012/07/infrastructure-automation-a-boilerplate-comparison/"&gt;Chef&lt;/a&gt; article. That's because puppet doesn't have a
management tool for interacting with the puppet master like the knife
tool. Deployment is left up to the administrator. Some common methods
are using cap deploy, commit hooks, or pulling files down in a cron from
the repo.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="/2012/07/infrastructure-automation-a-boilerplate-comparison/"&gt;Previous Article&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</summary><category term="administration"></category><category term="chef"></category><category term="devops"></category><category term="infrastructure"></category><category term="linux"></category><category term="puppet"></category></entry><entry><title>Infrastructure Automation: A Boilerplate Comparison</title><link href="http://blog.jameskyle.org/2012/07/infrastructure-automation-a-boilerplate-comparison" rel="alternate"></link><updated>2012-07-08T11:33:00-07:00</updated><author><name>James A. Kyle</name></author><id>tag:blog.jameskyle.org,2012-07-08:2012/07/infrastructure-automation-a-boilerplate-comparison</id><summary type="html">&lt;div class="section" id="introduction"&gt;
&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;We've been using &lt;a class="reference external" href="http://opscode.com"&gt;Chef&lt;/a&gt; to deploy our infrastructure for a while now.
One of the main sticking points we've run into is the barrier to entry
for develoepers as a result of the boiler plate required to perform a
simple deployment task. Our ideal framework would be equally accessible
to the ops, who use the system every day, and development teams, who
know their application environments best.&lt;/p&gt;
&lt;p&gt;In that spirit, this article compares the boilerplate necessary to
perform a simple configuraiton task. Since one of the most common, and
straight forward, needs is installing a system package we'll use that as
an example. This is not intended to demonstrate that one framework is
overall &amp;quot;better&amp;quot; than another. Rather it's merely a comparison of
workflows.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="contenders"&gt;
&lt;h2&gt;Contenders&lt;/h2&gt;
&lt;p&gt;The following frameworks are covered:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://opscode.com"&gt;Chef&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://puppetlabs.com/"&gt;Puppet&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="article-series-format"&gt;
&lt;h2&gt;Article Series Format&lt;/h2&gt;
&lt;p&gt;I already have a chef environment ready to go. So first, we'll cover
that workflow. In subsequent posts, I'll cover the other frameworks.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-objective"&gt;
&lt;h2&gt;The Objective&lt;/h2&gt;
&lt;p&gt;To install the tmux package.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-chef-workflow"&gt;
&lt;h2&gt;The Chef Workflow&lt;/h2&gt;
&lt;p&gt;For the purposes of our example, we assume &lt;a class="reference external" href="http://wiki.opscode.com/display/chef/Chef+Server"&gt;Chef Server&lt;/a&gt; is already
configured and working. We also assume a working repository is already
created and the users credentials/environment is set up.&lt;/p&gt;
&lt;div class="section" id="step-one-create-a-cookbook"&gt;
&lt;h3&gt;Step One: Create a Cookbook&lt;/h3&gt;
&lt;p&gt;First, we create the chef cookbook.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
% knife cookbook create tmux
** Creating cookbook tmux
** Creating README for cookbook: tmux
** Creating metadata for cookbook: tmux
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="step-two-edit-the-default-recipe"&gt;
&lt;h3&gt;Step Two: Edit the Default Recipe&lt;/h3&gt;
&lt;p&gt;Next, we edit the package to perform the task we need. To do so, we open
the default recipe.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
% vim cookbooks/tmux/recipes/default.rb
&lt;/pre&gt;
&lt;p&gt;And add the following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;# add multiple case statements for other target platforms&lt;/span&gt;
&lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:platform&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
  &lt;span class="k"&gt;when&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;ubuntu&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;debian&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;package&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;tmux&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
      &lt;span class="n"&gt;action&lt;/span&gt; &lt;span class="ss"&gt;:install&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Though technically not required, updating the metadata is certainly best
practice.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
% vim cookbooks/tmux/metadata.rb
&lt;/pre&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;maintainer&lt;/span&gt;       &lt;span class="s2"&gt;&amp;quot;AT&amp;amp;T Foundry&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;maintainer_email&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;email@domain.com&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;license&lt;/span&gt;          &lt;span class="s2"&gt;&amp;quot;All rights reserved&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;description&lt;/span&gt;      &lt;span class="s2"&gt;&amp;quot;Installs/Configures tmux&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;long_description&lt;/span&gt; &lt;span class="no"&gt;IO&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;File&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;File&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dirname&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;__FILE__&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;README.md&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;version&lt;/span&gt;          &lt;span class="s2"&gt;&amp;quot;0.0.1&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="step-three-add-the-cookbook-to-your-repository"&gt;
&lt;h3&gt;Step Three: Add the Cookbook to Your Repository&lt;/h3&gt;
&lt;pre class="literal-block"&gt;
% git add cookbooks/tmux
% git commit cookbooks/tmux -m &amp;quot;Tmux package cookbook added&amp;quot;
% git pull origin master
% git push origin master
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="step-four-upload-cookbook-to-chef-server"&gt;
&lt;h3&gt;Step Four: Upload Cookbook to Chef Server&lt;/h3&gt;
&lt;pre class="literal-block"&gt;
% knife cookbook upload tmux
Uploading tmux
[0.0.1] upload complete
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="step-five-add-recipe-to-role"&gt;
&lt;h3&gt;Step Five: Add Recipe to Role&lt;/h3&gt;
&lt;p&gt;Next we need to add the recipe to a role. This may require the creation
of a new role. In that case, an additional creation, commit, upload is
required for the role.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
% vim roles/tmux.json
&lt;/pre&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;tmux&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;default_attributes&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;   &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;json_class&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Chef::Role&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;env_run_lists&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;   &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;run_list&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;recipe[tmux]&amp;quot;&lt;/span&gt;
  &lt;span class="p"&gt;],&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;description&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Install Tmux&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;chef_type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;role&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;override_attributes&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;   &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Commit &amp;amp; Upload the role:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
% knife role from file roles/tmux.json
% git commit roles/tmux.json -m &amp;quot;added tmux role&amp;quot;
% git push origin master
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="step-six-apply-role-to-server"&gt;
&lt;h3&gt;Step Six: Apply Role to Server&lt;/h3&gt;
&lt;p&gt;The final step is applying the role to a server.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
knife bootstrap 10.4.54.9 -i ~/.ssh/keys/jk328n_rsa -d ubuntu12.04-gems-att \
  -x ubuntu --sudo -N jkyle-test -E foundry-services_pao1 -r 'role[tmux]'
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="followup-articles"&gt;
&lt;h2&gt;Followup Articles&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="/2012/07/puppet-boilerplate/"&gt;Puppet Boiler Plate&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</summary><category term="administration"></category><category term="devops"></category><category term="infrastructure"></category><category term="linux"></category></entry><entry><title>Chef Alternatives for Debian/Ubuntu</title><link href="http://blog.jameskyle.org/2012/02/chef-alternatives-for-debian-ubuntu" rel="alternate"></link><updated>2012-02-05T10:32:00-08:00</updated><author><name>James A. Kyle</name></author><id>tag:blog.jameskyle.org,2012-02-05:2012/02/chef-alternatives-for-debian-ubuntu</id><summary type="html">&lt;p&gt;An update-alternatives script for chef. Currently only sets up a version
installed in the 1.9.1 gems directory, but extendable to any version
easily enough.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#!/bin/bash&lt;/span&gt;
&lt;span class="nv"&gt;RUBY_VERSION&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;1.9.1
&lt;span class="nv"&gt;CHEF_VERSION&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;0.10.8
&lt;span class="nv"&gt;GEM_ROOT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/var/lib/gems/&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;RUBY_VERSION&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;/gems/chef-&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;CHEF_VERSION&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;update-alternatives &lt;span class="se"&gt;\&lt;/span&gt;
   --install /usr/bin/chef-client chef &lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;GEM_ROOT&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;/bin/chef-client 500 &lt;span class="se"&gt;\&lt;/span&gt;
   --slave /usr/bin/chef-solo chef-solo &lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;GEM_ROOT&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;/bin/chef-solo &lt;span class="se"&gt;\&lt;/span&gt;
   --slave /usr/bin/knife knife &lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;GEM_ROOT&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;/bin/knife &lt;span class="se"&gt;\&lt;/span&gt;
   --slave /usr/bin/shef shef  &lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;GEM_ROOT&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;/bin/shef
&lt;/pre&gt;&lt;/div&gt;
</summary><category term="administration"></category><category term="debian"></category><category term="linux"></category><category term="ubuntu"></category></entry><entry><title>Ruby Alternatives for Debian/Ubuntu</title><link href="http://blog.jameskyle.org/2012/02/ruby-alternatives-for-debianubuntu" rel="alternate"></link><updated>2012-02-05T10:14:00-08:00</updated><author><name>James A. Kyle</name></author><id>tag:blog.jameskyle.org,2012-02-05:2012/02/ruby-alternatives-for-debianubuntu</id><summary type="html">&lt;p&gt;A quick update-alternatives script for ruby versions on debian based
systems. It only includes the ruby binaries, man pages, etc. included in
the ruby1.8 and ruby1.9.1 debs. It's defaults to '1.9' when in auto
mode.&lt;/p&gt;
&lt;p&gt;After running the script, you can switch between ruby version via&lt;/p&gt;
&lt;pre class="literal-block"&gt;
% update-alternatives --config ruby
&lt;/pre&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#!/bin/bash&lt;/span&gt;
&lt;span class="nv"&gt;RUBY_VERSION&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;1.9.1update-alternatives &lt;span class="se"&gt;\&lt;/span&gt;
   --install /usr/bin/ruby ruby /usr/bin/ruby&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;RUBY_VERSION&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt; 500 &lt;span class="se"&gt;\&lt;/span&gt;
   --slave /usr/bin/erb erb /usr/bin/erb&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;RUBY_VERSION&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
   --slave /usr/bin/rake rake /usr/bin/rake&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;RUBY_VERSION&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
   --slave /usr/bin/irb irb /usr/bin/irb&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;RUBY_VERSION&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
   --slave /usr/bin/gem gem /usr/bin/gem&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;RUBY_VERSION&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
   --slave /usr/bin/rdoc rdoc /usr/bin/rdoc&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;RUBY_VERSION&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
   --slave /usr/bin/testrb testrb /usr/bin/testrb&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;RUBY_VERSION&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
   --slave /usr/share/man/man1/rdoc.1.gz rdoc.1.gz &lt;span class="se"&gt;\&lt;/span&gt;
       /usr/share/man/man1/rdoc&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;RUBY_VERSION&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;.1.gz &lt;span class="se"&gt;\&lt;/span&gt;
   --slave /usr/share/man/man1/testrb.1.gz testrb.1.gz &lt;span class="se"&gt;\&lt;/span&gt;
       /usr/share/man/man1/testrb&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;RUBY_VERSION&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;.1.gz &lt;span class="se"&gt;\&lt;/span&gt;
   --slave /usr/share/man/man1/rake.1.gz rake.1.gz &lt;span class="se"&gt;\&lt;/span&gt;
       /usr/share/man/man1/rake&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;RUBY_VERSION&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;.1.gz &lt;span class="se"&gt;\&lt;/span&gt;
   --slave /usr/share/man/man1/irb.1.gz irb.1.gz &lt;span class="se"&gt;\&lt;/span&gt;
       /usr/share/man/man1/irb&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;RUBY_VERSION&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;.1.gz &lt;span class="se"&gt;\&lt;/span&gt;
   --slave /usr/share/man/man1/erb.1.gz erb.1.gz &lt;span class="se"&gt;\&lt;/span&gt;
       /usr/share/man/man1/erb&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;RUBY_VERSION&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;.1.gz &lt;span class="se"&gt;\&lt;/span&gt;
   --slave /usr/share/man/man1/gem.1.gz gem.1.gz &lt;span class="se"&gt;\&lt;/span&gt;
       /usr/share/man/man1/gem&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;RUBY_VERSION&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;.1.gz &lt;span class="se"&gt;\&lt;/span&gt;
   --slave /usr/share/man/man1/ruby.1.gz ruby.1.gz &lt;span class="se"&gt;\&lt;/span&gt;
           /usr/share/man/man1/ruby&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;RUBY_VERSION&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;.1.gz &lt;span class="se"&gt;\&lt;/span&gt;
   --slave /usr/share/menu/ruby ruby_menu /usr/share/menu/ruby&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;RUBY_VERSION&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt; &lt;span class="nv"&gt;RUBY_VERSION&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;1.8update-alternatives &lt;span class="se"&gt;\&lt;/span&gt;
   --install /usr/bin/ruby ruby /usr/bin/ruby&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;RUBY_VERSION&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt; 400 &lt;span class="se"&gt;\&lt;/span&gt;
   --slave /usr/bin/erb erb /usr/bin/erb&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;RUBY_VERSION&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
   --slave /usr/bin/irb irb /usr/bin/irb&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;RUBY_VERSION&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
   --slave /usr/bin/rdoc rdoc /usr/bin/rdoc&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;RUBY_VERSION&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
   --slave /usr/bin/testrb testrb /usr/bin/testrb&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;RUBY_VERSION&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
   --slave /usr/share/man/man1/rdoc.1.gz rdoc.1.gz &lt;span class="se"&gt;\&lt;/span&gt;
       /usr/share/man/man1/rdoc&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;RUBY_VERSION&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;.1.gz &lt;span class="se"&gt;\&lt;/span&gt;
   --slave /usr/share/man/man1/testrb.1.gz testrb.1.gz &lt;span class="se"&gt;\&lt;/span&gt;
       /usr/share/man/man1/testrb&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;RUBY_VERSION&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;.1.gz &lt;span class="se"&gt;\&lt;/span&gt;
   --slave /usr/share/man/man1/irb.1.gz irb.1.gz &lt;span class="se"&gt;\&lt;/span&gt;
       /usr/share/man/man1/irb&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;RUBY_VERSION&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;.1.gz &lt;span class="se"&gt;\&lt;/span&gt;
   --slave /usr/share/man/man1/erb.1.gz erb.1.gz &lt;span class="se"&gt;\&lt;/span&gt;
       /usr/share/man/man1/erb&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;RUBY_VERSION&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;.1.gz &lt;span class="se"&gt;\&lt;/span&gt;
   --slave /usr/share/man/man1/ruby.1.gz ruby.1.gz &lt;span class="se"&gt;\&lt;/span&gt;
       /usr/share/man/man1/ruby&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;RUBY_VERSION&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;.1.gz &lt;span class="se"&gt;\&lt;/span&gt;
   --slave /usr/share/menu/ruby ruby_menu &lt;span class="se"&gt;\&lt;/span&gt;
       /usr/share/menu/ruby&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;RUBY_VERSION&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
</summary><category term="administration"></category><category term="debian"></category><category term="linux"></category></entry><entry><title>Fixing repetitive software firewall prompts in OSX</title><link href="http://blog.jameskyle.org/2010/09/fix-firewall-prompts-osx" rel="alternate"></link><updated>2010-09-07T07:47:00-07:00</updated><author><name>James A. Kyle</name></author><id>tag:blog.jameskyle.org,2010-09-07:2010/09/fix-firewall-prompts-osx</id><summary type="html">&lt;p&gt;Sometimes the OS X software firewall gets stuck in a loop and will
continuously prompt to allow network access for an application.&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="49034307.jpg" src="http://blog.jameskyle.org/wp-content/uploads/2010/09/49034307.jpg" /&gt;
&lt;p class="caption"&gt;49034307.jpg&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;I've seen this happen a couple of times with iTunes. Though it can
happen with any application. A common cause is changing icons of system
applications.&lt;/p&gt;
&lt;p&gt;The fix is pretty easy though. First check if the application's code
signature is valid and if not, why:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
% codesign -vvv /Applications/iTunes.app # or the problem application
/Applications/iTunes.app: a sealed resource is missing or invalid
/Applications/iTunes.app/Contents/Resources/English.lproj/DevicePrefsNotes.nib/objects.xib: resource added
/Applications/iTunes.app/Contents/Resources/English.lproj/MobilePhonePrefs.nib/objects.xib: resource added
/Applications/iTunes.app/Contents/Resources/English.lproj/PartyShuffleSettings.nib/objects.xib: resource added
/Applications/iTunes.app/Contents/Resources/English.lproj/UniversalAccess.nib/objects.xib: resource added
&lt;/pre&gt;
&lt;p&gt;We see it fails the signing and there are some extraneous objetcs.xib
files. The error indicates these files weren't included in the original
signing of the application, they should be safe to delete. Even if we
break the application, we can always reinstall after cleaning up.&lt;/p&gt;
&lt;p&gt;After deleting each of the offending files we get a very different
output:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
% codesign -vvv /Applications/iTunes.app
/Applications/iTunes.app: valid on disk
/Applications/iTunes.app: satisfies its Designated Requirement
&lt;/pre&gt;
&lt;p&gt;No more prompting!&lt;/p&gt;
</summary><category term="administration"></category><category term="osx"></category><category term="utilities"></category></entry><entry><title>Useful Defaults Hacks for OS X</title><link href="http://blog.jameskyle.org/2010/08/osx-defaults-hacks" rel="alternate"></link><updated>2010-08-21T09:35:00-07:00</updated><author><name>James A. Kyle</name></author><id>tag:blog.jameskyle.org,2010-08-21:2010/08/osx-defaults-hacks</id><summary type="html">&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;Disable Guest Accounts for Shares on OSX Tiger&lt;/p&gt;
&lt;pre class="literal-block"&gt;
sudo defaults write /Library/Preferences/com.apple.AppleFileServer guestAccess -bool false
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Disable Dashboard&lt;/p&gt;
&lt;pre class="literal-block"&gt;
defaults write com.apple.dashboard mcx-disabled -boolean YES
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Reduce Safari Rendering delay&lt;/p&gt;
&lt;pre class="literal-block"&gt;
defaults write com.apple.Safari WebKitInitialTimedLayoutDelay 0.25
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Increase animation speed of sheets&lt;/p&gt;
&lt;pre class="literal-block"&gt;
defaults write NSGlobalDomain NSWindowResizeTime .001
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Disable spotlight&lt;/p&gt;
&lt;pre class="literal-block"&gt;
edit /etc/hostconfig to change &amp;quot;SPOTLIGHT=-YES-&amp;quot; to &amp;quot;SPOTLIGHT=-NO-&amp;quot;
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Enable Safari debug menu&lt;/p&gt;
&lt;pre class="literal-block"&gt;
defaults write com.apple.Safari IncludeDebugMenu 1
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Get rid of .DS_Store files on network shares (specifically works for
smb shares)&lt;/p&gt;
&lt;pre class="literal-block"&gt;
defaults write com.apple.desktopservices DSDontWriteNetworkStores true
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Show full path to current directory in Finder title&lt;/p&gt;
&lt;pre class="literal-block"&gt;
defaults write com.apple.finder _FXShowPosixPathInTitle -bool YES
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Mount external drives at boot rather then on user login&lt;/p&gt;
&lt;pre class="literal-block"&gt;
defaults write /Library/Preferences/SystemConfiguration/autodiskmount
&lt;/pre&gt;
&lt;p&gt;AutomountDisksWithoutUserLogin -bool true&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Setting a custom software update server for a client&lt;/p&gt;
&lt;pre class="literal-block"&gt;
defaults write /Library/Preferences/com.apple.SoftwareUpdate CatalogURL &amp;quot;http://customupdateserver.com/index.sucatalog&amp;quot;
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Show All Files in Finder&lt;/p&gt;
&lt;pre class="literal-block"&gt;
defaults write com.apple.finder AppleShowAllFiles TRUE
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Terminal Focus Follows Mouse&lt;/p&gt;
&lt;pre class="literal-block"&gt;
defaults write com.apple.Terminal FocusFollowsMouse -string YES
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Add Application to OSX Dock (example uses Calculator.app)&lt;/p&gt;
&lt;pre class="literal-block"&gt;
defaults write com.apple.dock persistent-apps -array-add &amp;quot;&amp;lt; dict&amp;gt;tile-data file-data_CFURLString /Applications/Calculator.app/_CFURLStringType0 &amp;quot;;
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Disable the OSX Crash Reporter&lt;/p&gt;
&lt;pre class="literal-block"&gt;
defaults write com.apple.CrashReporter DialogType none
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Add Recent Applications Stack to the Dock&lt;/p&gt;
&lt;pre class="literal-block"&gt;
defaults write com.apple.dock persistent-others -array-add '{ &amp;quot;tile-data&amp;quot; = { &amp;quot;list-type&amp;quot; = 1; }; &amp;quot;tile-type&amp;quot; = &amp;quot;recents-tile&amp;quot;; }'
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Change Login Screen Background&lt;/p&gt;
&lt;pre class="literal-block"&gt;
sudo defaults write /Library/Preferences/com.apple.loginwindow DesktopPicture &amp;quot;/Library/Desktop Pictures/Aqua Blue.jpg&amp;quot;
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Disable Time Machine External Disk as Backup Prompt&lt;/p&gt;
&lt;pre class="literal-block"&gt;
defaults write com.apple.TimeMachine DoNotOfferNewDisksForBackup -bool YES
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Disable mouse/trackpad acceleration&lt;/p&gt;
&lt;pre class="literal-block"&gt;
defaults write .GlobalPreferences com.apple.mouse.scaling -1
&lt;/pre&gt;
&lt;pre class="literal-block"&gt;
defaults write .GlobalPreferences com.apple.trackpad.scaling -1
&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
</summary><category term="administration"></category><category term="mac"></category><category term="osx"></category><category term="tips"></category><category term="utilities"></category></entry><entry><title>Creating a redmine email filter for postfix with virtual domains</title><link href="http://blog.jameskyle.org/2010/06/postfix-virtual-domain-redmine-filter" rel="alternate"></link><updated>2010-06-12T12:47:00-07:00</updated><author><name>James A. Kyle</name></author><id>tag:blog.jameskyle.org,2010-06-12:2010/06/postfix-virtual-domain-redmine-filter</id><summary type="html">&lt;p&gt;This is adapted from the postfix virtual redme for &lt;a class="reference external" href="http://www.postfix.org/VIRTUAL_README.html#autoreplies"&gt;autoreply
transports&lt;/a&gt;. As such, I basically copy/paste that tutorial and edited
it accordingly.&lt;/p&gt;
&lt;p&gt;This assumes that you have set up redmine at its own subdomain as well
as a postfix virtual domain, e.g. redmine.yourdomain.com and wish to
create a virtual redmine user for email processing, e.g.
&lt;a class="reference external" href="mailto:redmine&amp;#64;redmine.yourdomain.com"&gt;redmine&amp;#64;redmine.yourdomain.com&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In order to set up an redmine for virtual recipients as a final stop (no
more filters applied), set up a rule in a virtual alias table:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;/etc/postfix/main.cf:
    virtual_alias_maps = hash:/etc/postfix/virtual
/etc/postfix/virtual:
    redmine@redmine.yourdomain.com redmine@redmine.yourdomain.com@yourdomain.com
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This delivers mail sent to &lt;a class="reference external" href="mailto:redmine&amp;#64;redmine.yourdomain.com"&gt;redmine&amp;#64;redmine.yourdomain.com&lt;/a&gt; to the local
address that handles the email. We service the address locally into the
script parses emails for redmine.&lt;/p&gt;
&lt;p&gt;DO NOT list redmine.yourdomain.com in mydestination!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;/etc/postfix/main.cf:
    transport_maps = hash:/etc/postfix/transport
/etc/postfix/transport:
    redmine.yourdomain.com  redmine
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;/etc/postfix/master.cf:
redmine unix  -       n       n       -       10      pipe
    user=nobody argv=/path/to/redmine/extra/mail_handler/rdm-mailhandler.rb
    --url http://redmine.yourdomain.com --key [redmine api key] --project kspecs
    --allow-override project,priority
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This invokes/path/to/redmine/extra/mail_handler/rdm-mailhandler.rb and
pipes any email sent to the redmine domain. Redmine handles rejection of
invalid users, which is why we don’t bother with filtering valid
addresses within postfix.&lt;/p&gt;
&lt;p&gt;After this is done, do the standard postmap routine for your maps, then
postfix reload.&lt;/p&gt;
</summary><category term="administration"></category><category term="email filter"></category><category term="postfix"></category><category term="redmine"></category><category term="virtual domains"></category></entry><entry><title>Dell Perc 5i on Ubuntu 64</title><link href="http://blog.jameskyle.org/2010/01/dell-perc-5i-on-ubuntu-64" rel="alternate"></link><updated>2010-01-19T08:38:00-08:00</updated><author><name>James A. Kyle</name></author><id>tag:blog.jameskyle.org,2010-01-19:2010/01/dell-perc-5i-on-ubuntu-64</id><summary type="html">&lt;p&gt;I've been setting up an Ubuntu server on a Dell with a 29xx series with
a Perc 5i SAS/SATA RAID controller. It took a bit of digging around and
piecing together posts on the ubuntu forums and random blogs, but I'm
pretty sure I've got it all up and working. Here's the short story:&lt;/p&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p class="first"&gt;Add the deb ports for dell's Open Management tools to your
sources.conf&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;/etc/apt/sources.list: deb &lt;a class="reference external" href="ftp://ftp.sara.nl/pub/sara-omsa"&gt;ftp://ftp.sara.nl/pub/sara-omsa&lt;/a&gt; dell
sara&lt;/li&gt;
&lt;li&gt;add the sara key to your gpg list&lt;ol class="arabic"&gt;
&lt;li&gt;wget &lt;a class="reference external" href="http://ftp.sara.nl/debian_sara.asc"&gt;http://ftp.sara.nl/debian_sara.asc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;sudo apt-key add debian_sara.asc&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;apt-get update&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Install snmp tools&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;apt-get install snmp snmpd&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Install openipmi and ipmitool&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;apt-get install openipmi&lt;/li&gt;
&lt;li&gt;apt-get install ipmitool&lt;/li&gt;
&lt;li&gt;there's an open Ubuntu bug &lt;a class="reference external" href="https://bugs.launchpad.net/ubuntu/+source/ipmitool/+bug/110992"&gt;#110992&lt;/a&gt; that requires ipmi_devinf
and ipmi_si to be appended to /dev/modules by hand to enable
creation of the /dev/ipm* needed by ipmitool on start-up.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Install lib32 ncurses and ia32-libs&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;ol class="first arabic simple"&gt;
&lt;li&gt;apt-get install -f lib32ncurses5&lt;/li&gt;
&lt;li&gt;apt-get install -f ia32-libs&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Install dell's omsa tools&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;apt-get install dellomsa&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Update your libraries&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;ldconfig&lt;/li&gt;
&lt;li&gt;&lt;ol class="first arabic"&gt;
&lt;li&gt;this takes care of a few errors I got that looked like this&lt;/li&gt;
&lt;li&gt;/opt/dell/srvadmin/dataeng/bin/dsm_sa_datamgr32d: error while
loading shared libraries: libdcsmil32.so.5: cannot open shared
object file: No such file or directory&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Place the following init script and put it in /etc/init.d/&lt;/p&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;div class="first"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#!/bin/sh&lt;/span&gt;

/opt/dell/srvadmin/dataeng/bin/dsm_sa_datamgr32d
/opt/dell/srvadmin/dataeng/bin/dsm_sa_eventmgr32d
/opt/dell/srvadmin/dataeng/bin/dsm_sa_snmp32d

/opt/dell/srvadmin/dataeng/bin/dataeng status

/opt/dell/srvadmin/iws/bin/linux/dsm_om_connsvc start
/opt/dell/srvadmin/iws/bin/linux/dsm_om_connsvc start

/etc/init.d/dataeng stop ; modprobe mptctl ; /etc/init.d/dataeng start

/opt/dell/srvadmin/dataeng/bin/dsm_sa_datamgr32d
/opt/dell/srvadmin/dataeng/bin/dsm_sa_eventmgr32d
/opt/dell/srvadmin/dataeng/bin/dsm_sa_snmp32d

/opt/dell/srvadmin/dataeng/bin/dataeng status

/opt/dell/srvadmin/iws/bin/linux/dsm_om_connsvc start
/opt/dell/srvadmin/iws/bin/linux/dsm_om_connsvc start
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Enable snmp in omsa tools&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;/etc/init.d/dataeng enablesnmp&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Execute the dell_omsa.sh script to get up and running&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;/etc/init.d/dell_omsa.sh&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Register the new driver module with omsa&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;/etc/init.d/instsvcdrv restart&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Edit your /etc/snmp/snmpd.conf so it can be used (I take no
responsibility if the following settings are not appropriate security
for your network)&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;change: com2sec paranoid default public to com2sec readonly
default public&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Change the way taht ubuntu starts snmpd&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;/etc/default/snmpd: change&lt;/li&gt;
&lt;li&gt;SNMPDOPTS='-Lsd -Lf /dev/null -u snmp -I -smux -p
/var/run/snmpd.pid 127.0.0.1' to&lt;/li&gt;
&lt;li&gt;SNMPDOPTS='-Lsd -Lf /dev/null -u snmp -p /var/run/snmpd.pid
127.0.0.1'&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;/etc/init.d/snmpd restart&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;/etc/init.d/dataeng restart&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Verify snmpd&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;snmpwalk -OS -v 1 -c public localhost .1.3.6.1.4.1.674.10892.1&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Start OMSA web services on reboot&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;update-rc.d dsm_om_connsvc defaults&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Finally, by default you must log into the web admin with the root
account. So enable root account&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;sudo passwd root&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;One more catch for 64 bit ubuntu users, you must change the lib paths
in /etc/pam.d/omauth and install 32 bit pam libs&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;change all instances of /lib/security/ to /lib32/security&lt;/li&gt;
&lt;li&gt;download the i386 versions of the following libs (you can
determine the package that provides a particular lib by dpkg -S
/path/to/file, e.g. dpkg -S /lib/security/pam_unix.so)&lt;ol class="arabic"&gt;
&lt;li&gt;libselinux1_2.0.15-2ubuntu1_i386.deb&lt;/li&gt;
&lt;li&gt;libpam-modules_0.99.7.1-5ubuntu1_i386.deb&lt;/li&gt;
&lt;li&gt;libsepol1_2.0.3-1_i386.deb&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Extract them to a tmp directory&lt;ol class="arabic"&gt;
&lt;li&gt;dpkg-deb -x &amp;lt;libname&amp;gt; /tmp/lib32s&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;then copy the following over to /lib32 and /lib32/security&lt;ol class="arabic"&gt;
&lt;li&gt;lib/libsepol.so.1&lt;/li&gt;
&lt;li&gt;lib/libselinux.so.1&lt;/li&gt;
&lt;li&gt;lib/security/pam_unix.so&lt;/li&gt;
&lt;li&gt;lib/security/pam_nologin.so&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;run ldconfig&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;You should now be able to log into the OMSA web manager at
&lt;a class="reference external" href="https://localhost"&gt;https://localhost&lt;/a&gt;:1311 using your root name password&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Having root enabled can be viewed as a security list, so you probably
want to add a normal admin user to OMSA's manager group and disable
root&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;adduser dellroot&lt;/li&gt;
&lt;li&gt;usermod -g root dellroot # user must be added to the root group to
gain admin privileges in OMSA manager&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I'd like to thank the &lt;a class="reference external" href="http://sadsoftware.blogspot.com/2008/08/installing-dell-omsa-and-snmp-in-ubuntu.html"&gt;sad software blogger&lt;/a&gt; for a good bit of this
information, especially pertaining to snmp.&lt;/p&gt;
</summary><category term="administration"></category><category term="dell"></category><category term="perc5i"></category><category term="ubuntu"></category><category term="ubuntu64"></category></entry><entry><title>Compiling a 4-way universal perl binary on osx</title><link href="http://blog.jameskyle.org/2009/08/4-way-universal-perl" rel="alternate"></link><updated>2009-08-12T13:35:00-07:00</updated><author><name>James A. Kyle</name></author><id>tag:blog.jameskyle.org,2009-08-12:2009/08/4-way-universal-perl</id><summary type="html">&lt;p&gt;If you don't like having all of your perl modules overwritten by
cavalier osx server updates, then you're either going with a macports
install or rolling your own. And if you don't want to give up
mod_auth_apple, you're probably rolling your own.&lt;/p&gt;
&lt;p&gt;If you're using mod_perl on osx, then you've probably already run into
the issues with the 4-way httpd fat binary and a flat arch mod_perl not
working. There are various posts around the internet on how to set
archflags to get around this. However, if you're already compiling your
own perl binary the easiest method is to compile it with the flags you
want passed onto your perl modules.&lt;/p&gt;
&lt;p&gt;So this is how to compile your perl binary with a 4-way (ppc ppc64
x86_64 i686) universal arch and by extension, compile all subsequent
modules with the same:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;SDK&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/Developer/SDKs/MacOSX10.5.sdk/
./Configure -Accflags&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;-arch i686 -arch ppc -arch x86_64 -arch ppc64 \&lt;/span&gt;
&lt;span class="s2"&gt;  -fPIC -nostdinc -B$SDK/usr/include/gcc \&lt;/span&gt;
&lt;span class="s2"&gt;  -B$SDK/usr/lib/gcc -isystem$SDK/usr/include \&lt;/span&gt;
&lt;span class="s2"&gt;  -F$SDK/System/Library/Frameworks&amp;quot;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
  -Aldflags&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;-arch i686 -arch ppc -arch ppc64 -arch x86_64 \&lt;/span&gt;
&lt;span class="s2"&gt;  -Wl,-syslibroot,$SDK&amp;quot;&lt;/span&gt; -de

make
&lt;/pre&gt;&lt;/div&gt;
</summary><category term="administration"></category><category term="leopard"></category><category term="mac"></category><category term="osx"></category><category term="perl"></category><category term="programming"></category></entry><entry><title>FIX mod_rewrite: could not init rewrite log lock in child</title><link href="http://blog.jameskyle.org/2009/02/could-not-init-rewrite-log-lock-fix" rel="alternate"></link><updated>2009-02-20T07:47:00-08:00</updated><author><name>James A. Kyle</name></author><id>tag:blog.jameskyle.org,2009-02-20:2009/02/could-not-init-rewrite-log-lock-fix</id><summary type="html">&lt;p&gt;Ran into this issue a couple of times already, duplicating it here so I
dont' have to go dig for it again:&lt;/p&gt;
&lt;p&gt;Error:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
[crit] (2)No such file or directory: mod_rewrite: could not init rewrite log lock in child
&lt;/pre&gt;
&lt;p&gt;Change This:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;RewriteEngine On
RewriteCond %{REQUEST_METHOD} ^TRACE
RewriteRule .* - [F]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;RewriteEngine On
RewriteCond %{REQUEST_METHOD} ^TRACE
RewriteRule .* - [F]
RewriteLog /var/log/apache2/rewrite.log
RewriteLogLevel 0
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Original reference is &lt;a class="reference external" href="http://blog.latcarf.com/"&gt;here&lt;/a&gt;&lt;/p&gt;
</summary><category term="administration"></category><category term="apache2"></category><category term="httpd"></category><category term="mod_rewrite"></category></entry><entry><title>Auto-Configure OSX clients for BackupPC</title><link href="http://blog.jameskyle.org/2009/02/auto-configure-osx-clients-for-backuppc" rel="alternate"></link><updated>2009-02-20T07:25:00-08:00</updated><author><name>James A. Kyle</name></author><id>tag:blog.jameskyle.org,2009-02-20:2009/02/auto-configure-osx-clients-for-backuppc</id><summary type="html">&lt;p&gt;This script auto-configures osx 10.4-10.5 clients for backup via
&lt;a class="reference external" href="http://backuppc.sourceforge.net/"&gt;BackupPC.&lt;/a&gt;&amp;nbsp;It creates a hidden backuppc user with standard
permissions. Limits that users sudo permissions to rsync, sets up
public/private key authentication, fliters all incoming ssh connections
using that key to only allow rsync commands.&lt;/p&gt;
&lt;p&gt;The project also comes with a Launchd Daemon that starts backuppc at
startup and keeps it alive if anything happens.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://github.com/jameskyle/backuppcosx/tree/master"&gt;BackupPCOSX&lt;/a&gt;&lt;/p&gt;
</summary><category term="administration"></category><category term="backup"></category><category term="backuppc"></category><category term="osx"></category></entry><entry><title>Command Line Group Management</title><link href="http://blog.jameskyle.org/2008/12/command-line-group-management" rel="alternate"></link><updated>2008-12-16T13:53:00-08:00</updated><author><name>James A. Kyle</name></author><id>tag:blog.jameskyle.org,2008-12-16:2008/12/command-line-group-management</id><summary type="html">&lt;p&gt;Adding a user:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;dscl . append /Groups/admin GroupMembership gneagle
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Removing a user:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;dscl . delete /Groups/admin GroupMembership gneagle
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Reading the membership of the admin group:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;dscl . &lt;span class="nb"&gt;read&lt;/span&gt; /Groups/admin GroupMembership
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This comes with a nod to &lt;a class="reference external" href="http://managingosx.wordpress.com/2006/09/15/add-a-user-to-the-admin-group-via-command-line-20/"&gt;Managing OSX&lt;/a&gt;&lt;/p&gt;
</summary><category term="administration"></category><category term="dscl"></category><category term="osx"></category></entry><entry><title>Disable Extended Attributes for Tar Backup</title><link href="http://blog.jameskyle.org/2008/10/disable-extended-attributes-for-tar-backup" rel="alternate"></link><updated>2008-10-09T11:06:00-07:00</updated><author><name>James A. Kyle</name></author><id>tag:blog.jameskyle.org,2008-10-09:2008/10/disable-extended-attributes-for-tar-backup</id><summary type="html">&lt;p&gt;To disable the tar'ing of extended attributes (those pesky ._foo
files), export the following variable:&lt;/p&gt;
&lt;p&gt;For Tiger:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;COPY_EXTENDED_ATTRIBUTES_DISABLE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For Leopard &amp;amp; Snow Leopard:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;COPYFILE_DISABLE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
</summary><category term="administration"></category><category term="extended attributes"></category><category term="osx"></category><category term="tar"></category></entry><entry><title>Fix for max attachment size stuck at 0 bug in leopard server</title><link href="http://blog.jameskyle.org/2008/08/fix-for-max-attachment-size-stuck-at-0-bug-in-leopard-server" rel="alternate"></link><updated>2008-08-21T15:36:00-07:00</updated><author><name>James A. Kyle</name></author><id>tag:blog.jameskyle.org,2008-08-21:2008/08/fix-for-max-attachment-size-stuck-at-0-bug-in-leopard-server</id><summary type="html">&lt;p&gt;There's a bug in Server Admin which makes the max attachment size stick
at 0 MB preventing file uploads. To fix this:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;Manually set your preferred attachment size in /etc/wikid/wikid.conf
under the &lt;em&gt;maxattachmentsize&lt;/em&gt;key&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Save file&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;restart the team server on the command line&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo serveradmin stop teams
sudo serveradmin start teams
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
</summary><category term="administration"></category><category term="apple"></category><category term="leopard"></category><category term="mac"></category><category term="osx"></category></entry></feed>